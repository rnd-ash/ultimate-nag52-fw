
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'ESP51'
*/

#ifndef __ECU_ESP51_H_
#define __ECU_ESP51_H_

#include <stdint.h>
    
#define BS_200EGS51_CAN_ID 0x0200
#define BS_208EGS51_CAN_ID 0x0208

/** brake light switch */
enum class BS_200h_BLSEGS51 {
	BREMSE_NBET = 0, // Brake not actuated
	BREMSE_BET = 1, // brake actuated
	UNKNOWN = 2, // not defined
	SNV = 3, // signal not available
};

/** rotary direction wheel front left */
enum class BS_200h_DRTGVLEGS51 {
	PASSIVE = 0, // No rotation detection
	FWD = 1, // direction of rotation forward
	REV = 2, // direction of rotation backwards
	SNV = 3, // signal not available
};

/** direction of rotation wheel front right */
enum class BS_200h_DRTGVREGS51 {
	PASSIVE = 0, // No rotation detection
	FWD = 1, // direction of rotation forward
	REV = 2, // direction of rotation backwards
	SNV = 3, // signal not available
};

/** Rad Left for Cruise */
enum class BS_200h_DRTGTMEGS51 {
	PASSIVE = 0, // No rotation detection
	FWD = 1, // direction of rotation forward
	REV = 2, // direction of rotation backwards
	SNV = 3, // signal not available
};

/** Gear, upper limit */
enum class BS_208h_GMAX_ESPEGS51 {
	PASSIVE = 0, // passive value
	G1 = 1, // Gear, upper limit = 1
	G2 = 2, // Gear, upper limit = 2
	G3 = 3, // Gear, upper limit = 3
	G4 = 4, // Gear, upper limit = 4
	G5 = 5, // Gear, upper limit = 5
	G6 = 6, // Gear, upper limit = 6
	G7 = 7, // Gear, upper limit = 7
};

/** Gear, lower limit */
enum class BS_208h_GMIN_ESPEGS51 {
	PASSIVE = 0, // passive value
	G1 = 1, // Gear, lower limit = 1
	G2 = 2, // Gear, lower limit = 2
	G3 = 3, // Gear, lower limit = 3
	G4 = 4, // Gear, lower limit = 4
	G5 = 5, // Gear, lower limit = 5
	G6 = 6, // Gear, lower limit = 6
	G7 = 7, // Gear, lower limit = 7
};

/** system condition */
enum class BS_208h_SZSEGS51 {
	ERR = 0, // system error
	NORM = 1, // normal operation
	DIAG = 2, // Diagnosis
	ABGAS = 3, // exhaust gas test
};

/** Switching Difference ESP */
enum class BS_208h_SLV_ESPEGS51 {
	SKL0 = 0, // Shift characteristic "0"
	SKL1 = 1, // Shift characteristic "1"
	SKL2 = 2, // Shift characteristic "2"
	SKL3 = 3, // Shift characteristic "3"
	SKL4 = 4, // Shift characteristic "4"
	SKL5 = 5, // Shift characteristic "5"
	SKL6 = 6, // Shift characteristic "6"
	SKL7 = 7, // Shift characteristic "7"
	SKL8 = 8, // Shift characteristic "8"
	SKL9 = 9, // Shift characteristic "9"
	SKL10 = 10, // Shift characteristic "10"
};

/** ESP request: "N" Insert */
enum class BS_208h_ANFNEGS51 {
	UNKNOWN = 0, // not defined
	ANF_N = 1, // requirement "neutral"
	IDLE = 2, // No requirement
	SNV = 3, // signal not available
};

/** rotary direction wheel rear right */
enum class BS_208h_DRTGHREGS51 {
	PASSIVE = 0, // No rotation detection
	FWD = 1, // direction of rotation forward
	REV = 2, // direction of rotation backwards
	SNV = 3, // signal not available
};

/** rotary direction wheel rear left */
enum class BS_208h_DRTGHLEGS51 {
	PASSIVE = 0, // No rotation detection
	FWD = 1, // direction of rotation forward
	REV = 2, // direction of rotation backwards
	SNV = 3, // signal not available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BS_200EGS51 */
	uint32_t get_canid(){ return BS_200EGS51_CAN_ID; }
    /** Sets Brake defective control lamp (EBV_KL at 463/461 / NCV2) */
    void set_BRE_KL(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Brake defective control lamp (EBV_KL at 463/461 / NCV2) */
    bool get_BRE_KL() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Bas defective control lamp */
    void set_BAS_KL(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Bas defective control lamp */
    bool get_BAS_KL() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets ESP Infolramp flashing light */
    void set_ESP_INFO_BL(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets ESP Infolramp flashing light */
    bool get_ESP_INFO_BL() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets ESP Info lamp permanent light */
    void set_ESP_INFO_DL(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets ESP Info lamp permanent light */
    bool get_ESP_INFO_DL() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets ESP defective control lamp */
    void set_ESP_KL(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets ESP defective control lamp */
    bool get_ESP_KL() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets ABS defective control lamp */
    void set_ABS_KL(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets ABS defective control lamp */
    bool get_ABS_KL() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets brake pad wear control lamp */
    void set_BBV_KL(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets brake pad wear control lamp */
    bool get_BBV_KL() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Brake light suppression (EBV_KL at 163 / T0 / T1N) */
    void set_BLS_UNT(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Brake light suppression (EBV_KL at 163 / T0 / T1N) */
    bool get_BLS_UNT() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets BLS Parity (straight parity) */
    void set_BLS_PA(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets BLS Parity (straight parity) */
    bool get_BLS_PA() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Message counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_BZ200h(uint8_t value){ raw = (raw & 0xffc3ffffffffffff) | ((uint64_t)value & 0xf) << 50; }

    /** Gets Message counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_BZ200h() const { return (uint8_t)(raw >> 50 & 0xf); }
        
    /** Sets brake light switch */
    void set_BLS(BS_200h_BLSEGS51 value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets brake light switch */
    BS_200h_BLSEGS51 get_BLS() const { return (BS_200h_BLSEGS51)(raw >> 48 & 0x3); }
        
    /** Sets rotary direction wheel front left */
    void set_DRTGVL(BS_200h_DRTGVLEGS51 value){ raw = (raw & 0xffff3fffffffffff) | ((uint64_t)value & 0x3) << 46; }

    /** Gets rotary direction wheel front left */
    BS_200h_DRTGVLEGS51 get_DRTGVL() const { return (BS_200h_DRTGVLEGS51)(raw >> 46 & 0x3); }
        
    /** Sets wheel speed front left. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DVL(uint16_t value){ raw = (raw & 0xffffc000ffffffff) | ((uint64_t)value & 0x3fff) << 32; }

    /** Gets wheel speed front left. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DVL() const { return (uint16_t)(raw >> 32 & 0x3fff); }
        
    /** Sets direction of rotation wheel front right */
    void set_DRTGVR(BS_200h_DRTGVREGS51 value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets direction of rotation wheel front right */
    BS_200h_DRTGVREGS51 get_DRTGVR() const { return (BS_200h_DRTGVREGS51)(raw >> 30 & 0x3); }
        
    /** Sets Right speed front right. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DVR(uint16_t value){ raw = (raw & 0xffffffffc000ffff) | ((uint64_t)value & 0x3fff) << 16; }

    /** Gets Right speed front right. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DVR() const { return (uint16_t)(raw >> 16 & 0x3fff); }
        
    /** Sets Rad Left for Cruise */
    void set_DRTGTM(BS_200h_DRTGTMEGS51 value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets Rad Left for Cruise */
    BS_200h_DRTGTMEGS51 get_DRTGTM() const { return (BS_200h_DRTGTMEGS51)(raw >> 14 & 0x3); }
        
    /** Sets wheel speed links for cruise control. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_TM_DL(uint16_t value){ raw = (raw & 0xffffffffffffc000) | ((uint64_t)value & 0x3fff) << 0; }

    /** Gets wheel speed links for cruise control. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_TM_DL() const { return (uint16_t)(raw >> 0 & 0x3fff); }
        
} BS_200EGS51;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BS_208EGS51 */
	uint32_t get_canid(){ return BS_208EGS51_CAN_ID; }
    /** Sets ESP / Art-Wish: "Active Retract" */
    void set_AKT_R_ESP(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets ESP / Art-Wish: "Active Retract" */
    bool get_AKT_R_ESP() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Gear requirement of art */
    void set_MINMAX_ART(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Gear requirement of art */
    bool get_MINMAX_ART() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Gear, upper limit */
    void set_GMAX_ESP(BS_208h_GMAX_ESPEGS51 value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Gear, upper limit */
    BS_208h_GMAX_ESPEGS51 get_GMAX_ESP() const { return (BS_208h_GMAX_ESPEGS51)(raw >> 59 & 0x7); }
        
    /** Sets Gear, lower limit */
    void set_GMIN_ESP(BS_208h_GMIN_ESPEGS51 value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Gear, lower limit */
    BS_208h_GMIN_ESPEGS51 get_GMIN_ESP() const { return (BS_208h_GMIN_ESPEGS51)(raw >> 56 & 0x7); }
        
    /** Sets Suppression Dynamic fully detection */
    void set_DDYN_UNT(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Suppression Dynamic fully detection */
    bool get_DDYN_UNT() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets system condition */
    void set_SZS(BS_208h_SZSEGS51 value){ raw = (raw & 0xff9fffffffffffff) | ((uint64_t)value & 0x3) << 53; }

    /** Gets system condition */
    BS_208h_SZSEGS51 get_SZS() const { return (BS_208h_SZSEGS51)(raw >> 53 & 0x3); }
        
    /** Sets Tempomat operation */
    void set_TM_AUS(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Tempomat operation */
    bool get_TM_AUS() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Switching Difference ESP */
    void set_SLV_ESP(BS_208h_SLV_ESPEGS51 value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Switching Difference ESP */
    BS_208h_SLV_ESPEGS51 get_SLV_ESP() const { return (BS_208h_SLV_ESPEGS51)(raw >> 48 & 0xf); }
        
    /** Sets ESP brake engagement active */
    void set_BRE_AKT_ESP(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets ESP brake engagement active */
    bool get_BRE_AKT_ESP() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets ESP request: "N" Insert */
    void set_ANFN(BS_208h_ANFNEGS51 value){ raw = (raw & 0xffff9fffffffffff) | ((uint64_t)value & 0x3) << 45; }

    /** Gets ESP request: "N" Insert */
    BS_208h_ANFNEGS51 get_ANFN() const { return (BS_208h_ANFNEGS51)(raw >> 45 & 0x3); }
        
    /** Sets ART brake intervention active */
    void set_BRE_AKT_ART(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets ART brake intervention active */
    bool get_BRE_AKT_ART() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets set braking torque (BR240 factor 1.8 larger). Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MBRE_ESP(uint16_t value){ raw = (raw & 0xfffff000ffffffff) | ((uint64_t)value & 0xfff) << 32; }

    /** Gets set braking torque (BR240 factor 1.8 larger). Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_MBRE_ESP() const { return (uint16_t)(raw >> 32 & 0xfff); }
        
    /** Sets rotary direction wheel rear right */
    void set_DRTGHR(BS_208h_DRTGHREGS51 value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets rotary direction wheel rear right */
    BS_208h_DRTGHREGS51 get_DRTGHR() const { return (BS_208h_DRTGHREGS51)(raw >> 30 & 0x3); }
        
    /** Sets Rear wheel speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DHR(uint16_t value){ raw = (raw & 0xffffffffc000ffff) | ((uint64_t)value & 0x3fff) << 16; }

    /** Gets Rear wheel speed. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DHR() const { return (uint16_t)(raw >> 16 & 0x3fff); }
        
    /** Sets rotary direction wheel rear left */
    void set_DRTGHL(BS_208h_DRTGHLEGS51 value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets rotary direction wheel rear left */
    BS_208h_DRTGHLEGS51 get_DRTGHL() const { return (BS_208h_DRTGHLEGS51)(raw >> 14 & 0x3); }
        
    /** Sets Rear wheel speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_DHL(uint16_t value){ raw = (raw & 0xffffffffffffc000) | ((uint64_t)value & 0x3fff) << 0; }

    /** Gets Rear wheel speed. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint16_t get_DHL() const { return (uint16_t)(raw >> 0 & 0x3fff); }
        
} BS_208EGS51;



class ECU_ESP51 {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case BS_200EGS51_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case BS_208EGS51_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to BS_200
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BS_200(uint64_t now, uint64_t max_expire_time, BS_200EGS51* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to BS_208
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BS_208(uint64_t now, uint64_t max_expire_time, BS_208EGS51* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[2];
		uint64_t LAST_FRAME_TIMES[2];
};
#endif // __ECU_ESP51_H_
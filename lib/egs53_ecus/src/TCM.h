
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'TCM'
*/

#ifndef __ECU_TCM_H_
#define __ECU_TCM_H_

#include <stdint.h>
    
#define TCM_A1_EGS53_CAN_ID 0x02F1
#define TCM_A2_EGS53_CAN_ID 0x02E2
#define ENG_RQ1_TCM_EGS53_CAN_ID 0x00F1
#define ENG_RQ2_TCM_EGS53_CAN_ID 0x00F3
#define ENG_RQ3_TCM_EGS53_CAN_ID 0x00F4
#define SBW_RS_TCM_EGS53_CAN_ID 0x01BD
#define TCM_DISP_RQ_EGS53_CAN_ID 0x02F3
#define NM_TCM_EGS53_CAN_ID 0x041C

/** State (Torque Converter Lockup) Clutch / Status (Converter Bridging) Clutch */
enum class TCM_A1_Clutch_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	ENGG = 1, // engaged
	DISENGG = 2, // disengaged
	NDEF3 = 3, // Not Defined
	SLIP = 4, // SLIPPING
	SLIP_ENGG = 5, // Between Slipping and Engaged
	DISENGG_SLIP = 6, // Between Disgaged and Slipping
	NDEF7 = 7, // Not Defined
};

/** Transmission Selector Lever Position / Transmission Logging */
enum class TCM_A1_TSL_Posn_TCM_EGS53 : uint16_t {
	P = 0, // TRANMMISSION SELECTOR LEVER IN PARKING POSITION
	R = 1, // TRANMMISSION SELECTOR LEVER IN REVERSE POSITION
	N = 2, // TRANMMISSION SELECTOR LEVER IN NEUTRAL POSITION
	D = 4, // TRANMMISSION SELECTOR LEVER IN NORMAL DRIVING POSITION
	SNA = 7, // Signal Not Available
};

/** Actual Vehicle Driving Program (ie Sent During Txdrvprogman_Activ = 1) / Driving Program Transmission (is also sent to TXDRVPROGMAN_ACTV = 1) */
enum class TCM_A1_VehDrvProg_TCM_V2_EGS53 : uint16_t {
	SPORT = 0, // Sports (standard)
	COMFORT = 1, // Comfort
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
	NDEF4 = 4, // Not Defined
	NDEF5 = 5, // Not Defined
	OFFROAD = 6, // off-road
	SNA = 7, // Signal Not Available
};

/** Error Check State / Status Error Check */
enum class TCM_A2_TCM_ErrChk_Stat_EGS53 : uint16_t {
	WAIT = 0, // Error Test Not Yet Finished
	OK = 1, // Error Test Finished, result is ok
	ERROR = 2, // Error Detected, Record Actual Data
	NDEF3 = 3, // Not Defined
};

/** Intervention fashion / intervention mode */
enum class ENG_RQ1_TCM_IntrvntnMd_TCM_EGS53 : uint16_t {
	MFC = 0, // Intervention Fashion Minimum Fuel Consumption
	FAST = 1, // Intervention Fashion Fastest
	RATE_DEC = 2, // Intervention Fashion Fastest With Rate Action - Torque Decreasing
	RATE_INC = 3, // Intervention Fashion Fastest With Rate Action - Torque Increasing
};

/** Transmission Downshift Mode / Rewish Mode Transmission */
enum class ENG_RQ1_TCM_TxDnShiftMd_EGS53 : uint16_t {
	IDLE = 0, // Downshift Without Engine Torque Increase
	SINGLE = 1, // Single Downshift With Engine Torque Increase
	MULTI = 2, // Multiple Downshift with Engine Torque Increase
	INTRVNTN_MON = 3, // Intervention Monitoring by TCM
};

/** Target Gear / Target Gear */
enum class ENG_RQ2_TCM_Gr_Target_EGS53 : uint16_t {
	N = 0, // Target Gear "N"
	D1 = 1, // Target Gear "1"
	D2 = 2, // Target Gear "2"
	D3 = 3, // Target Gear "3"
	D4 = 4, // Target Gear "4"
	D5 = 5, // Target Gear "5"
	D6 = 6, // Target Gear "6"
	D7 = 7, // Target Gear "7"
	D_CVT = 8, // Target Gear "Continuously Forward"
	R_CVT = 9, // Target Gear "Continuously Backward"
	R_3 = 10, // Target Gear "R3"
	R = 11, // Target Gear "R"
	R_2 = 12, // Target Gear "R2"
	P = 13, // Target Gear "P"
	ABORT = 14, // Gear Shift Abortion
	SNA = 15, // Signal Not Available
};

/** Actual Gear / Actual Gang */
enum class ENG_RQ2_TCM_Gr_EGS53 : uint16_t {
	N = 0, // Actual Gear "N"
	D1 = 1, // Actual Gear "1"
	D2 = 2, // Actual Gear "2"
	D3 = 3, // Actual Gear "3"
	D4 = 4, // Actual Gear "4"
	D5 = 5, // Actual Gear "5"
	D6 = 6, // Actual Gear "6"
	D7 = 7, // Actual Gear "7"
	D_CVT = 8, // Actual Gear "Continuously Forward"
	R_CVT = 9, // Actual Gear "Continuously Backward"
	R_3 = 10, // Actual Gear "R3"
	R = 11, // Actual Gear "R"
	R_2 = 12, // Actual Gear "R2"
	P = 13, // Actual Gear "P"
	PWRFREE = 14, // Power Free
	SNA = 15, // Signal Not Available
};

/** Vehicle Drive Style / Drive Variant */
enum class ENG_RQ2_TCM_VehDrvStyle_EGS53 : uint16_t {
	REAR = 0, // Rear Wheel Driven
	FRONT = 1, // Front Wheel Driven
	ALL2 = 2, // All Wheel Driven
	ALL3 = 3, // All Wheel Driven
};

/** Transmission Variant / Gear Variant */
enum class ENG_RQ2_TCM_TxStyle_EGS53 : uint16_t {
	SAT = 0, // Stepped Automatic Transmission
	CVT = 1, // Continously Variable Automatic Transmission
	AMT = 2, // Automated Manual Transmission
	NDEF3 = 3, // Not Defined
};

/** Transmission Mechanics Style / Gear Mechanic Variant */
enum class ENG_RQ2_TCM_TxMechStyle_EGS53 : uint16_t {
	LARGE = 0, // NAG, Large Gear
	SMALL = 1, // NAG, Small Gear
	LARGE2 = 2, // NAG2, Large Gear
	SMALL2 = 3, // NAG2, Small Gear
};

/** Transmission Shifting Style / Transmission Circuit Variant */
enum class ENG_RQ2_TCM_TxShiftStyle_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	SBW = 1, // Shift by Wire (ISM)
	MS = 2, // Mechanical Shifting (EWM)
	SNA = 3, // Signal Not Available
};

/** Driveaway with Maximum Acceleration State / Status Attachment With Maximum Acceleration */
enum class ENG_RQ3_TCM_DrvAccelMax_Stat_EGS53 : uint16_t {
	OFF = 0, // OFF
	ENBL = 1, // Enabled
	ACTV = 2, // Active
	SNA = 3, // Signal Not Available
};

/** Shift by wire message transmitter identification / shift-by-wire transmitter identification */
enum class SBW_RS_TCM_SBW_MsgTxmtId_EGS53 : uint16_t {
	VGS_NAG2 = 0, // VGS NAG2
	EGS52 = 1, // EGS52
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
};

/** Actual position transmission selector valve / Actual position WÃ¤hlbereichsschieber in gear */
enum class SBW_RS_TCM_TxSelVlvPosn_EGS53 : uint16_t {
	D = 5, // Actual selector valve position "D"
	N = 6, // Actual selector valve position "N"
	R = 7, // Actual selector valve position "R"
	P = 8, // Actual selector valve position "P"
	N_ZW_D = 11, // Actual selector valve position "N-D"
	R_ZW_N = 12, // Actual selector valve position "R-N"
	P_ZW_R = 13, // Actual selector valve position "P-R"
	SNA = 15, // Signal Not Available
};

/** transmission selector lever position request / requirement gear selector lever position */
enum class SBW_RS_TCM_TSL_Posn_Rq_EGS53 : uint16_t {
	IDLE = 0, // transmission selector lever passive request
	D = 5, // transmission selector lever request "D"
	N = 6, // transmission selector lever request "N"
	R = 7, // transmission selector lever request "R"
	P = 8, // transmission selector lever request "P"
	SNA = 15, // Signal Not Available
};

/** Transmission Driving Position Display Request / Request Display Gearbox */
enum class TCM_DISP_RQ_TxDrvPosn_Disp_Rq_TCM_EGS53 : uint16_t {
	M1 = 1, // Driving position "M1"
	M2 = 2, // Driving position "M2"
	M3 = 3, // Driving position "M3"
	M4 = 4, // driving position "M4"
	M5 = 5, // Driving position "M5"
	M6 = 6, // Driving position "M6"
	M7 = 7, // Driving position "M7"
	BLANK = 32, // blank ("")
	D1 = 49, // driving position "D1"
	D2 = 50, // Driving position "D2"
	D3 = 51, // Driving position "D3"
	D4 = 52, // Driving position "D4"
	D5 = 53, // Driving position "D5"
	D6 = 54, // Driving position "D6"
	D7 = 55, // Driving position "D7"
	A = 65, // Driving position "A"
	D = 68, // Driving position "D"
	F = 70, // Fault Label "F"
	N = 78, // Driving position "N"
	P = 80, // driving position "P"
	R = 82, // Driving position "R"
	SNA = 255, // Signal Not Available
};

/** Transmission Driving Program Display Request / Request Display Gearbox Program */
enum class TCM_DISP_RQ_TxDrvProg_Disp_Rq_TCM_EGS53 : uint16_t {
	BLANK = 32, // Driving Program "" (blank)
	A = 65, // Driving Program "A"
	C = 67, // Driving Program "C"
	F = 70, // Fault Label "F"
	M = 77, // Driving Program "M"
	S = 83, // Driving Program "S"
	W = 87, // Driving Program "W"
	SNA = 255, // Signal Not Available
};

/** Transmission Shift Recommendation Display Request / Request Display Transmission Description */
enum class TCM_DISP_RQ_TxShiftRcmmnd_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Recommendation
	UP = 1, // Upshift Recommendation
	DOWN = 2, // Downshift Recommendation
	SNA = 3, // Signal Not Available
};

/** Shift by Wire Message Display Request / Request Shift by Wire Show message */
enum class TCM_DISP_RQ_SBW_Msg_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Message
	M1 = 1, // Message 1
	M2 = 2, // Message 2
	M3 = 3, // Message 3
	M4 = 4, // Message 4
	M5 = 5, // Message 5
	M6 = 6, // Message 6
	NDEF7 = 7, // Not Defined
};

/** Transmission Selector Lever Motion Lock 2 Display Request / Request Transmission Lock Lock 2 Display */
enum class TCM_DISP_RQ_TSL_MtnLk2_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 1 Display Request / Request Transmission Lock Lock 1 Display */
enum class TCM_DISP_RQ_TSL_MtnLk1_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 4 Display Request / Request Transmission Lock Lock 4 Display */
enum class TCM_DISP_RQ_TSL_MtnLk4_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 3 Display Request / Request Transmission Lock Lock 3 Display */
enum class TCM_DISP_RQ_TSL_MtnLk3_Disp_Rq_TCM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Target Gear Display Request / Request Display Destination */
enum class TCM_DISP_RQ_Gr_Target_Disp_Rq_EGS53 : uint16_t {
	BLANK = 32, // blank ("")
	G1 = 49, // Gear "1"
	G2 = 50, // Gear "2"
	G3 = 51, // Gear "3"
	G4 = 52, // Gear "4"
	G5 = 53, // Gear "5"
	G6 = 54, // Gear "6"
	G7 = 55, // Gear "7"
	F = 70, // Fault Label "F"
	SNA = 255, // Signal Not Available
};

/** Race Start Mode Display Request / Display Race Start Mode */
enum class TCM_DISP_RQ_RaceStMd_Disp_Rq_AMG_EGS53 : uint16_t {
	IDLE = 0, // Race Start Fashion Off OR Passive
	AVL = 1, // Race Start Fashion Available
	ACTV = 2, // Race Start Mode Active
	ON = 3, // Race Start Fashion On
	CANCEL = 4, // Race Start Fashion Cancel
	NPOSBL = 5, // Race Start Fashion Not Possible
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Network Management Mode / Network Management Mode */
enum class NM_TCM_NM_Mode_EGS53 : uint16_t {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_TCM_NM_Ud_Launch_EGS53 : uint16_t {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_TCM_NM_Ud_Srv_EGS53 : uint16_t {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_TCM_WakeupRsn_TCM_EGS53 : uint16_t {
	NETWORK = 0, // Wakeup by Network
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_TCM_Nw_Id_EGS53 : uint16_t {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING1__: 16;
		/** Absolute Value of the Transmission Overall Drive Shaft Torque For Driveaway / Amount of Total Point Torque In The Startup Area **/
		uint16_t TxDrvTrqAbsVal: 16;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 7;
		/** Brake During Start Request / Create brake when switched on **/
		bool StBrk_Rq_TCM: 1;
		/** Actual Vehicle Driving Program (ie Sent During Txdrvprogman_Activ = 1) / Driving Program Transmission (is also sent to TXDRVPROGMAN_ACTV = 1) **/
		TCM_A1_VehDrvProg_TCM_V2_EGS53 VehDrvProg_TCM_V2: 3;
		/** Transmission Driving Program "Manual" Active / Driving Program "Manual" active **/
		bool TxDrvProgMan_Actv: 1;
		/** Transmission Selector Lever Position / Transmission Logging **/
		TCM_A1_TSL_Posn_TCM_EGS53 TSL_Posn_TCM: 3;
		/** Transmission off-road active / terrain active **/
		bool TxOffRd_Actv: 1;
		/** Excessive Transmission Temperature / Overtemperature Transmission **/
		bool TxTemp_Excess: 1;
		/** Drive Resistance High / driving resistance high **/
		bool DrvRst_Hi: 1;
		/** Basic Shifting Program OK / Basic Switching Program O.K. **/
		bool BasShftProg_Ok: 1;
		/** Transmission Control in Limp-Home Operation Fashion / transmission control in emergency **/
		bool TCM_LHOM: 1;
		/** State (Torque Converter Lockup) Clutch / Status (Converter Bridging) Clutch **/
		TCM_A1_Clutch_Stat_EGS53 Clutch_Stat: 3;
		/** Torque Converter Lockup Clutch No Load / Converter Bridging Clutch Load **/
		bool TCC_NoLoad: 1;
		/** Transmission Oil Temperature / Gear Oil Temperature **/
		uint8_t TxOilTemp: 8;
	} __attribute__((packed));
	/** Gets CAN ID of TCM_A1_EGS53 **/
	uint32_t get_canid(){ return TCM_A1_EGS53_CAN_ID; }
} TCM_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Error Number or Counter for Calid / CVN Transmission / Error Number or Counter for Calid / CVN Transfer **/
		uint8_t TCM_CALID_CVN_ErrNum: 5;
		/** CALID / CVN Transmission Active / Calid / CVN transmission active **/
		bool TCM_CALID_CVN_Actv: 1;
		/** Error Check State / Status Error Check **/
		TCM_A2_TCM_ErrChk_Stat_EGS53 TCM_ErrChk_Stat: 2;
		/** Calid / CVN Data Byte / Calid / CVN DataByte **/
		uint8_t TCM_Data: 8;
		/** Desired Transmission Slip RPM / Slip Speed should **/
		uint16_t TxSlpRPM_Dsr: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Malfunction Indicator Lamp on Request (OBD II) / Diagnosis Control Lamp (OBD II) **/
		bool MIL_On_Rq_TCM: 1;
		/** Actual Transmission Turbine RPM / Current turbine speed **/
		uint16_t TxTurbineRPM: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING2__: 10;
		/** Requested Current Duty Cycle / Soll Current (duty cycle) **/
		uint8_t CurrDtyCyc_Rq: 8;
	} __attribute__((packed));
	/** Gets CAN ID of TCM_A2_EGS53 **/
	uint32_t get_canid(){ return TCM_A2_EGS53_CAN_ID; }
} TCM_A2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RQ1_TCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** JUMP START ACTIVE / BARMSTART **/
		bool JmpSt_Actv: 1;
		/** Engine Emergency Off Request / Engine Emergency Off **/
		bool EngEmgOff_Rq: 1;
		/** Enable Engine Start Request / Using Release Transmission **/
		bool EngSt_Enbl_Rq_TCM: 1;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RQ1_TCM: 4;
		/** Engine RPM Request / Target Speed ââEngine **/
		uint16_t EngRPM_Rq_TCM: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** ENABLE STOP / START AUTOMATIC REQUEST / ASS ENABLE **/
		bool SSA_Enbl_Rq_TCM: 1;
		/** Engine RPM Synchronization Time Request / Synchronization Time for Target Speed ââEngine **/
		uint8_t EngRPM_SyncTm_Rq_TCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 3;
		/** Transmission Downshift Mode / Rewish Mode Transmission **/
		ENG_RQ1_TCM_TxDnShiftMd_EGS53 TxDnShiftMd: 3;
		/** Intervention fashion / intervention mode **/
		ENG_RQ1_TCM_IntrvntnMd_TCM_EGS53 IntrvntnMd_TCM: 2;
		/** Engine Torque Request / Ford. Engine torque **/
		uint16_t EngTrq_Rq_TCM: 13;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING4__: 1;
		/** Engine Torque Request Maximum / Engine Motor Toment Request Max **/
		bool EngTrqMax_Rq_TCM: 1;
		/** Engine Torque Request Minimum / Motor Moment Request Min **/
		bool EngTrqMin_Rq_TCM: 1;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RQ1_TCM_EGS53 **/
	uint32_t get_canid(){ return ENG_RQ1_TCM_EGS53_CAN_ID; }
} ENG_RQ1_TCM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RQ2_TCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RQ2_TCM: 4;
		/** Transmission Shifting Style / Transmission Circuit Variant **/
		ENG_RQ2_TCM_TxShiftStyle_EGS53 TxShiftStyle: 2;
		/** Transmission Mechanics Style / Gear Mechanic Variant **/
		ENG_RQ2_TCM_TxMechStyle_EGS53 TxMechStyle: 2;
		/** Transmission Variant / Gear Variant **/
		ENG_RQ2_TCM_TxStyle_EGS53 TxStyle: 2;
		/** Vehicle Drive Style / Drive Variant **/
		ENG_RQ2_TCM_VehDrvStyle_EGS53 VehDrvStyle: 2;
		/** Transmission Crankly Torque Loss / Loss Torque **/
		uint8_t TxTrqLoss: 8;
		/** Crackish Torque to Wheel Torque ratio / factor crankshaft torque to wheel torque **/
		uint16_t EngWhlTrqRatio_TCM: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
		/** Actual Transmission Ratio (CVT) / Translation Translation (CVT) **/
		uint8_t TxRatio: 8;
		/** Actual Gear / Actual Gang **/
		ENG_RQ2_TCM_Gr_EGS53 Gr: 4;
		/** Target Gear / Target Gear **/
		ENG_RQ2_TCM_Gr_Target_EGS53 Gr_Target: 4;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RQ2_TCM_EGS53 **/
	uint32_t get_canid(){ return ENG_RQ2_TCM_EGS53_CAN_ID; }
} ENG_RQ2_TCM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RQ3_TCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RQ3_TCM: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING2__: 32;
		/** Actual Wet Driveaway Clutch Torque (0h = passive) / current torque wet starting coupling (0h = passive) **/
		uint16_t WetDrvClutchTrq: 13;
		/** Driveaway with Maximum Acceleration State / Status Attachment With Maximum Acceleration **/
		ENG_RQ3_TCM_DrvAccelMax_Stat_EGS53 DrvAccelMax_Stat: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING3__: 1;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RQ3_TCM_EGS53 **/
	uint32_t get_canid(){ return ENG_RQ3_TCM_EGS53_CAN_ID; }
} ENG_RQ3_TCM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_SBW_RS_TCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_SBW_RS_TCM: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING2__: 24;
		/** Transmission selector sensor position / value WÃ¤hlbereichssensor **/
		uint8_t TxSelSensPosn: 8;
		/** transmission selector lever position request / requirement gear selector lever position **/
		SBW_RS_TCM_TSL_Posn_Rq_EGS53 TSL_Posn_Rq: 4;
		/** Actual position transmission selector valve / Actual position WÃ¤hlbereichsschieber in gear **/
		SBW_RS_TCM_TxSelVlvPosn_EGS53 TxSelVlvPosn: 4;
		/** Starter lockout switch (only EGS52) / Inhibitor contact (only EGS52) **/
		bool StartLkSw: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 5;
		/** Shift by wire message transmitter identification / shift-by-wire transmitter identification **/
		SBW_RS_TCM_SBW_MsgTxmtId_EGS53 SBW_MsgTxmtId: 2;
	} __attribute__((packed));
	/** Gets CAN ID of SBW_RS_TCM_EGS53 **/
	uint32_t get_canid(){ return SBW_RS_TCM_EGS53_CAN_ID; }
} SBW_RS_TCM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING1__: 13;
		/** Race Start Mode Display Request / Display Race Start Mode **/
		TCM_DISP_RQ_RaceStMd_Disp_Rq_AMG_EGS53 RaceStMd_Disp_Rq_AMG: 3;
		/** Target Gear Display Request / Request Display Destination **/
		TCM_DISP_RQ_Gr_Target_Disp_Rq_EGS53 Gr_Target_Disp_Rq: 8;
		/** Transmission Selector Lever Motion Lock 3 Display Request / Request Transmission Lock Lock 3 Display **/
		TCM_DISP_RQ_TSL_MtnLk3_Disp_Rq_TCM_EGS53 TSL_MtnLk3_Disp_Rq_TCM: 4;
		/** Transmission Selector Lever Motion Lock 4 Display Request / Request Transmission Lock Lock 4 Display **/
		TCM_DISP_RQ_TSL_MtnLk4_Disp_Rq_TCM_EGS53 TSL_MtnLk4_Disp_Rq_TCM: 4;
		/** Transmission Selector Lever Motion Lock 1 Display Request / Request Transmission Lock Lock 1 Display **/
		TCM_DISP_RQ_TSL_MtnLk1_Disp_Rq_TCM_EGS53 TSL_MtnLk1_Disp_Rq_TCM: 4;
		/** Transmission Selector Lever Motion Lock 2 Display Request / Request Transmission Lock Lock 2 Display **/
		TCM_DISP_RQ_TSL_MtnLk2_Disp_Rq_TCM_EGS53 TSL_MtnLk2_Disp_Rq_TCM: 4;
		/** Shift by Wire Message Display Request / Request Shift by Wire Show message **/
		TCM_DISP_RQ_SBW_Msg_Disp_Rq_TCM_EGS53 SBW_Msg_Disp_Rq_TCM: 3;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
		/** Transmission Shift Recommendation Display Request / Request Display Transmission Description **/
		TCM_DISP_RQ_TxShiftRcmmnd_Disp_Rq_TCM_EGS53 TxShiftRcmmnd_Disp_Rq_TCM: 2;
		/** Shift by Wire Beep Request / Request Shift by Wire Warnington **/
		bool SBW_Beep_Rq_TCM: 1;
		/** Transmission Driving Program Display Request / Request Display Gearbox Program **/
		TCM_DISP_RQ_TxDrvProg_Disp_Rq_TCM_EGS53 TxDrvProg_Disp_Rq_TCM: 8;
		/** Transmission Driving Position Display Request / Request Display Gearbox **/
		TCM_DISP_RQ_TxDrvPosn_Disp_Rq_TCM_EGS53 TxDrvPosn_Disp_Rq_TCM: 8;
	} __attribute__((packed));
	/** Gets CAN ID of TCM_DISP_RQ_EGS53 **/
	uint32_t get_canid(){ return TCM_DISP_RQ_EGS53_CAN_ID; }
} TCM_DISP_RQ_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Network Identification No./netzwerk-id **/
		NM_TCM_Nw_Id_EGS53 Nw_Id: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal WachzustÃ¤ustÃ¤nde during bus rest **/
		uint8_t WakeupCnt: 8;
		/** Wakeup Reason / Wake-up **/
		NM_TCM_WakeupRsn_TCM_EGS53 WakeupRsn_TCM: 8;
		/** Network Management UserData Service No./netzmanagement UserData service **/
		NM_TCM_NM_Ud_Srv_EGS53 NM_Ud_Srv: 8;
		/** Network Management UserData Launch Type / Network Management UserData Sendart **/
		NM_TCM_NM_Ud_Launch_EGS53 NM_Ud_Launch: 6;
		/** Network Management Sleep Acknowledge / Network Management Sleep Acknowledge **/
		bool NM_Sleep_Ack: 1;
		/** Network Management Sleep Indication / Network Management Sleep Indication **/
		bool NM_Sleep_Ind: 1;
		/** Network Management Logical Successor / Network Management Logical Successor **/
		uint8_t NM_Successor: 8;
		/** Network Management Mode / Network Management Mode **/
		NM_TCM_NM_Mode_EGS53 NM_Mode: 8;
	} __attribute__((packed));
	/** Gets CAN ID of NM_TCM_EGS53 **/
	uint32_t get_canid(){ return NM_TCM_EGS53_CAN_ID; }
} NM_TCM_EGS53;



class ECU_TCM {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case TCM_A1_EGS53_CAN_ID:
                    idx = 0;
                    break;
                case TCM_A2_EGS53_CAN_ID:
                    idx = 1;
                    break;
                case ENG_RQ1_TCM_EGS53_CAN_ID:
                    idx = 2;
                    break;
                case ENG_RQ2_TCM_EGS53_CAN_ID:
                    idx = 3;
                    break;
                case ENG_RQ3_TCM_EGS53_CAN_ID:
                    idx = 4;
                    break;
                case SBW_RS_TCM_EGS53_CAN_ID:
                    idx = 5;
                    break;
                case TCM_DISP_RQ_EGS53_CAN_ID:
                    idx = 6;
                    break;
                case NM_TCM_EGS53_CAN_ID:
                    idx = 7;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to TCM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCM_A1(uint64_t now, uint64_t max_expire_time, TCM_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to TCM_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCM_A2(uint64_t now, uint64_t max_expire_time, TCM_A2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[1] <= now && now - LAST_FRAME_TIMES[1] < max_expire_time) {
                dest->raw = FRAME_DATA[1];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RQ1_TCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RQ1_TCM(uint64_t now, uint64_t max_expire_time, ENG_RQ1_TCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[2] <= now && now - LAST_FRAME_TIMES[2] < max_expire_time) {
                dest->raw = FRAME_DATA[2];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RQ2_TCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RQ2_TCM(uint64_t now, uint64_t max_expire_time, ENG_RQ2_TCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[3] <= now && now - LAST_FRAME_TIMES[3] < max_expire_time) {
                dest->raw = FRAME_DATA[3];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RQ3_TCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RQ3_TCM(uint64_t now, uint64_t max_expire_time, ENG_RQ3_TCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[4] <= now && now - LAST_FRAME_TIMES[4] < max_expire_time) {
                dest->raw = FRAME_DATA[4];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to SBW_RS_TCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SBW_RS_TCM(uint64_t now, uint64_t max_expire_time, SBW_RS_TCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[5] <= now && now - LAST_FRAME_TIMES[5] < max_expire_time) {
                dest->raw = FRAME_DATA[5];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to TCM_DISP_RQ
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TCM_DISP_RQ(uint64_t now, uint64_t max_expire_time, TCM_DISP_RQ_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[6] <= now && now - LAST_FRAME_TIMES[6] < max_expire_time) {
                dest->raw = FRAME_DATA[6];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to NM_TCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_TCM(uint64_t now, uint64_t max_expire_time, NM_TCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[7] <= now && now - LAST_FRAME_TIMES[7] < max_expire_time) {
                dest->raw = FRAME_DATA[7];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[8];
		uint64_t LAST_FRAME_TIMES[8];
};
#endif // __ECU_TCM_H_

/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'ANY_ECU'
*/

#ifndef __ECU_ANY_ECU_H_
#define __ECU_ANY_ECU_H_

#include <stdint.h>
    
#define SG_A1_EGS53_CAN_ID 0x02F7
#define ISM_DISP_RQ_EGS53_CAN_ID 0x02F5
#define SSP_RS_SSP_EGS53_CAN_ID 0x0381
#define NM_FSCM2_EGS53_CAN_ID 0x0435
#define NM_ISM_EGS53_CAN_ID 0x041D
#define NM_SSP_EGS53_CAN_ID 0x041E

/** Electric Machine # 1 Diagnostics State / Diagnostic Status E-Machine 1 */
enum class SG_A1_EM1_Diag_Stat_EGS53 : uint16_t {
	IDLE = 0, // No Reaction
	AUTOEPSOFF_ENBL = 1, // carpsof_enable
	LHOM = 2, // LIMP Home
	TRQ_RED = 3, // Torque Reduce
	SPD_RED = 4, // Speed Reduce
	ASC_ACTV = 5, // ASC Active
	TPC_ACTV = 6, // TPC Active
	PREVENT = 7, // Prevent Operation
	SNA = 255, // Signal Not Available
};

/** Error Check State / Status Error Check */
enum class SG_A1_SG_ErrChk_Stat_EGS53 : uint16_t {
	WAIT = 0, // Error Test Not Yet Finished
	OK = 1, // Error Test Finished, result is ok
	ERROR = 2, // Error Detected, Record Actual Data
	NDEF3 = 3, // Not Defined
};

/** Transmission Driving Position Display Request / Request Display Gearbox */
enum class ISM_DISP_RQ_TxDrvPosn_Disp_Rq_ISM_EGS53 : uint16_t {
	M1 = 1, // Driving position "M1"
	M2 = 2, // Driving position "M2"
	M3 = 3, // Driving position "M3"
	M4 = 4, // driving position "M4"
	M5 = 5, // Driving position "M5"
	M6 = 6, // Driving position "M6"
	M7 = 7, // Driving position "M7"
	BLANK = 32, // blank ("")
	D1 = 49, // driving position "D1"
	D2 = 50, // Driving position "D2"
	D3 = 51, // Driving position "D3"
	D4 = 52, // Driving position "D4"
	D5 = 53, // Driving position "D5"
	D6 = 54, // Driving position "D6"
	D7 = 55, // Driving position "D7"
	A = 65, // Driving position "A"
	D = 68, // Driving position "D"
	F = 70, // Fault Label "F"
	N = 78, // Driving position "N"
	P = 80, // driving position "P"
	R = 82, // Driving position "R"
	SNA = 255, // Signal Not Available
};

/** Shift by Wire Message Display Request / Request Shift by Wire Show message */
enum class ISM_DISP_RQ_SBW_Msg_Disp_Rq_ISM_EGS53 : uint16_t {
	IDLE = 0, // No Message
	M1 = 1, // Message 1
	M2 = 2, // Message 2
	M3 = 3, // Message 3
	M4 = 4, // Message 4
	M5 = 5, // Message 5
	M6 = 6, // Message 6
	NDEF7 = 7, // Not Defined
};

/** Transmission Selector Lever Motion Lock 2 Display Request / Request Transmission Lock Lock 2 Display */
enum class ISM_DISP_RQ_TSL_MtnLk2_Disp_Rq_ISM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 1 Display Request / Request Transmission Lock Lock 1 Display */
enum class ISM_DISP_RQ_TSL_MtnLk1_Disp_Rq_ISM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 4 Display Request / Request Transmission Lock Lock 4 Display */
enum class ISM_DISP_RQ_TSL_MtnLk4_Disp_Rq_ISM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** Transmission Selector Lever Motion Lock 3 Display Request / Request Transmission Lock Lock 3 Display */
enum class ISM_DISP_RQ_TSL_MtnLk3_Disp_Rq_ISM_EGS53 : uint16_t {
	IDLE = 0, // No Lock icon display
	ARR_UP = 1, // Lock icon arrow up
	ARR_DN = 2, // Lock Symbol Arrow Down
	ARR_LT = 3, // Lock Symbol Arrow Left
	ARR_UP_DN = 4, // Lock Symbol Arrow Up and Down
	ARR_UP_HLGT = 9, // Lock icon arrow up highlighted
	ARR_DN_HLGT = 10, // Lock Symbol Arrow Down Highlighted
	ARR_LT_HLGT = 11, // Lock Symbol Arrow Left Highlighted
	ARR_UP_DN_HLGT = 12, // Lock Symbol Arrow Up and Down Highlighted
};

/** SSP Diagnostics State / SSP Diagnostic Status */
enum class SSP_RS_SSP_SSP_Diag_Stat_EGS53 : uint16_t {
	OK = 0, // No Fault
	CURR = 1, // Nominal Current Not Obtained
	VOLT = 2, // Voltage
	TEMP = 3, // Temperature
	DEBOUNCE_CNT = 4, // Debounce Counter
	TIMEOUT = 5, // Timeout
	LK = 128, // locking
	IDLE = 129, // idle
	SHRT = 130, // Short Circuit
	SEMI = 131, // Semiconductor Fault
	CAN = 132, // CAN SPECIFIC FAULT
};

/** Network Management Mode / Network Management Mode */
enum class NM_FSCM2_NM_Mode_EGS53 : uint16_t {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_FSCM2_NM_Ud_Launch_EGS53 : uint16_t {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_FSCM2_NM_Ud_Srv_EGS53 : uint16_t {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_FSCM2_WakeupRsn_FSCM2_EGS53 : uint16_t {
	NETWORK = 0, // Wakeup by Network
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_FSCM2_Nw_Id_EGS53 : uint16_t {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};

/** Network Management Mode / Network Management Mode */
enum class NM_ISM_NM_Mode_EGS53 : uint16_t {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_ISM_NM_Ud_Launch_EGS53 : uint16_t {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_ISM_NM_Ud_Srv_EGS53 : uint16_t {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_ISM_WakeupRsn_ISM_EGS53 : uint16_t {
	NETWORK = 0, // Wakeup by Network
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_ISM_Nw_Id_EGS53 : uint16_t {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};

/** Network Management Mode / Network Management Mode */
enum class NM_SSP_NM_Mode_EGS53 : uint16_t {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_SSP_NM_Ud_Launch_EGS53 : uint16_t {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_SSP_NM_Ud_Srv_EGS53 : uint16_t {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_SSP_WakeupRsn_SSP_EGS53 : uint16_t {
	NETWORK = 0, // Wakeup by Network
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_SSP_Nw_Id_EGS53 : uint16_t {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Error Number / Error Number **/
		uint8_t EM1_ErrNum: 5;
		/** Electric Machine # 1 Enhanced Cooling Request / Request Advanced Cooling of the E-Machine 1 **/
		bool EM1_EnhCool_Rq: 1;
		/** Error Check State / Status Error Check **/
		SG_A1_SG_ErrChk_Stat_EGS53 SG_ErrChk_Stat: 2;
		/** Electric Machine # 1 Diagnostics State / Diagnostic Status E-Machine 1 **/
		SG_A1_EM1_Diag_Stat_EGS53 EM1_Diag_Stat: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING1__: 16;
		/** Starter / Generator Output DC Voltage / DC Voltage **/
		uint16_t SG_OutDC_Volt: 16;
		/** Starter / Generator Output DC Current / DC Current **/
		uint16_t SG_OutDC_Curr: 16;
	} __attribute__((packed));
	/** Gets CAN ID of SG_A1_EGS53 **/
	uint32_t get_canid(){ return SG_A1_EGS53_CAN_ID; }
} SG_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING1__: 24;
		/** Transmission Selector Lever Motion Lock 3 Display Request / Request Transmission Lock Lock 3 Display **/
		ISM_DISP_RQ_TSL_MtnLk3_Disp_Rq_ISM_EGS53 TSL_MtnLk3_Disp_Rq_ISM: 4;
		/** Transmission Selector Lever Motion Lock 4 Display Request / Request Transmission Lock Lock 4 Display **/
		ISM_DISP_RQ_TSL_MtnLk4_Disp_Rq_ISM_EGS53 TSL_MtnLk4_Disp_Rq_ISM: 4;
		/** Transmission Selector Lever Motion Lock 1 Display Request / Request Transmission Lock Lock 1 Display **/
		ISM_DISP_RQ_TSL_MtnLk1_Disp_Rq_ISM_EGS53 TSL_MtnLk1_Disp_Rq_ISM: 4;
		/** Transmission Selector Lever Motion Lock 2 Display Request / Request Transmission Lock Lock 2 Display **/
		ISM_DISP_RQ_TSL_MtnLk2_Disp_Rq_ISM_EGS53 TSL_MtnLk2_Disp_Rq_ISM: 4;
		/** Shift by Wire Message Display Request / Request Shift by Wire Show message **/
		ISM_DISP_RQ_SBW_Msg_Disp_Rq_ISM_EGS53 SBW_Msg_Disp_Rq_ISM: 3;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 4;
		/** Shift by Wire Beep Request / Request Shift by Wire Warnington **/
		bool SBW_Beep_Rq_ISM: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 8;
		/** Transmission Driving Position Display Request / Request Display Gearbox **/
		ISM_DISP_RQ_TxDrvPosn_Disp_Rq_ISM_EGS53 TxDrvPosn_Disp_Rq_ISM: 8;
	} __attribute__((packed));
	/** Gets CAN ID of ISM_DISP_RQ_EGS53 **/
	uint32_t get_canid(){ return ISM_DISP_RQ_EGS53_CAN_ID; }
} ISM_DISP_RQ_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_SSP_RS_SSP: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_SSP_RS_SSP: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** ACTUAL RPM SSP / Current SSP speed **/
		uint16_t SSP_RPM: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING3__: 10;
		/** SSP Diagnostics State / SSP Diagnostic Status **/
		SSP_RS_SSP_SSP_Diag_Stat_EGS53 SSP_Diag_Stat: 8;
		/** Actual Current Duty Cycle / Actual Electricity (duty cycle) **/
		uint8_t CurrDtyCyc_Actl: 8;
	} __attribute__((packed));
	/** Gets CAN ID of SSP_RS_SSP_EGS53 **/
	uint32_t get_canid(){ return SSP_RS_SSP_EGS53_CAN_ID; }
} SSP_RS_SSP_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Network Identification No./netzwerk-id **/
		NM_FSCM2_Nw_Id_EGS53 Nw_Id: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest **/
		uint8_t WakeupCnt: 8;
		/** Wakeup Reason / Wake-up **/
		NM_FSCM2_WakeupRsn_FSCM2_EGS53 WakeupRsn_FSCM2: 8;
		/** Network Management UserData Service No./netzmanagement UserData service **/
		NM_FSCM2_NM_Ud_Srv_EGS53 NM_Ud_Srv: 8;
		/** Network Management UserData Launch Type / Network Management UserData Sendart **/
		NM_FSCM2_NM_Ud_Launch_EGS53 NM_Ud_Launch: 6;
		/** Network Management Sleep Acknowledge / Network Management Sleep Acknowledge **/
		bool NM_Sleep_Ack: 1;
		/** Network Management Sleep Indication / Network Management Sleep Indication **/
		bool NM_Sleep_Ind: 1;
		/** Network Management Logical Successor / Network Management Logical Successor **/
		uint8_t NM_Successor: 8;
		/** Network Management Mode / Network Management Mode **/
		NM_FSCM2_NM_Mode_EGS53 NM_Mode: 8;
	} __attribute__((packed));
	/** Gets CAN ID of NM_FSCM2_EGS53 **/
	uint32_t get_canid(){ return NM_FSCM2_EGS53_CAN_ID; }
} NM_FSCM2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Network Identification No./netzwerk-id **/
		NM_ISM_Nw_Id_EGS53 Nw_Id: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest **/
		uint8_t WakeupCnt: 8;
		/** Wakeup Reason / Wake-up **/
		NM_ISM_WakeupRsn_ISM_EGS53 WakeupRsn_ISM: 8;
		/** Network Management UserData Service No./netzmanagement UserData service **/
		NM_ISM_NM_Ud_Srv_EGS53 NM_Ud_Srv: 8;
		/** Network Management UserData Launch Type / Network Management UserData Sendart **/
		NM_ISM_NM_Ud_Launch_EGS53 NM_Ud_Launch: 6;
		/** Network Management Sleep Acknowledge / Network Management Sleep Acknowledge **/
		bool NM_Sleep_Ack: 1;
		/** Network Management Sleep Indication / Network Management Sleep Indication **/
		bool NM_Sleep_Ind: 1;
		/** Network Management Logical Successor / Network Management Logical Successor **/
		uint8_t NM_Successor: 8;
		/** Network Management Mode / Network Management Mode **/
		NM_ISM_NM_Mode_EGS53 NM_Mode: 8;
	} __attribute__((packed));
	/** Gets CAN ID of NM_ISM_EGS53 **/
	uint32_t get_canid(){ return NM_ISM_EGS53_CAN_ID; }
} NM_ISM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Network Identification No./netzwerk-id **/
		NM_SSP_Nw_Id_EGS53 Nw_Id: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest **/
		uint8_t WakeupCnt: 8;
		/** Wakeup Reason / Wake-up **/
		NM_SSP_WakeupRsn_SSP_EGS53 WakeupRsn_SSP: 8;
		/** Network Management UserData Service No./netzmanagement UserData service **/
		NM_SSP_NM_Ud_Srv_EGS53 NM_Ud_Srv: 8;
		/** Network Management UserData Launch Type / Network Management UserData Sendart **/
		NM_SSP_NM_Ud_Launch_EGS53 NM_Ud_Launch: 6;
		/** Network Management Sleep Acknowledge / Network Management Sleep Acknowledge **/
		bool NM_Sleep_Ack: 1;
		/** Network Management Sleep Indication / Network Management Sleep Indication **/
		bool NM_Sleep_Ind: 1;
		/** Network Management Logical Successor / Network Management Logical Successor **/
		uint8_t NM_Successor: 8;
		/** Network Management Mode / Network Management Mode **/
		NM_SSP_NM_Mode_EGS53 NM_Mode: 8;
	} __attribute__((packed));
	/** Gets CAN ID of NM_SSP_EGS53 **/
	uint32_t get_canid(){ return NM_SSP_EGS53_CAN_ID; }
} NM_SSP_EGS53;



class ECU_ANY_ECU {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case SG_A1_EGS53_CAN_ID:
                    idx = 0;
                    break;
                case ISM_DISP_RQ_EGS53_CAN_ID:
                    idx = 1;
                    break;
                case SSP_RS_SSP_EGS53_CAN_ID:
                    idx = 2;
                    break;
                case NM_FSCM2_EGS53_CAN_ID:
                    idx = 3;
                    break;
                case NM_ISM_EGS53_CAN_ID:
                    idx = 4;
                    break;
                case NM_SSP_EGS53_CAN_ID:
                    idx = 5;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to SG_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SG_A1(uint64_t now, uint64_t max_expire_time, SG_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ISM_DISP_RQ
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ISM_DISP_RQ(uint64_t now, uint64_t max_expire_time, ISM_DISP_RQ_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[1] <= now && now - LAST_FRAME_TIMES[1] < max_expire_time) {
                dest->raw = FRAME_DATA[1];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to SSP_RS_SSP
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SSP_RS_SSP(uint64_t now, uint64_t max_expire_time, SSP_RS_SSP_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[2] <= now && now - LAST_FRAME_TIMES[2] < max_expire_time) {
                dest->raw = FRAME_DATA[2];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to NM_FSCM2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_FSCM2(uint64_t now, uint64_t max_expire_time, NM_FSCM2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[3] <= now && now - LAST_FRAME_TIMES[3] < max_expire_time) {
                dest->raw = FRAME_DATA[3];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to NM_ISM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_ISM(uint64_t now, uint64_t max_expire_time, NM_ISM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[4] <= now && now - LAST_FRAME_TIMES[4] < max_expire_time) {
                dest->raw = FRAME_DATA[4];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to NM_SSP
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_SSP(uint64_t now, uint64_t max_expire_time, NM_SSP_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[5] <= now && now - LAST_FRAME_TIMES[5] < max_expire_time) {
                dest->raw = FRAME_DATA[5];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[6];
		uint64_t LAST_FRAME_TIMES[6];
};
#endif // __ECU_ANY_ECU_H_
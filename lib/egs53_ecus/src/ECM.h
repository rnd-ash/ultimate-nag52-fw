
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'ECM'
*/

#ifndef __ECU_ECM_H_
#define __ECU_ECM_H_

#include <stdint.h>
    
#define CTRL_U_A2_EGS53_CAN_ID 0x0015
#define ECM_A1_EGS53_CAN_ID 0x030D
#define ECM_A2_EGS53_CAN_ID 0x0349
#define EIS_A1_EGS53_CAN_ID 0x0001
#define IC_A1_EGS53_CAN_ID 0x019F
#define IC_A3_EGS53_CAN_ID 0x03E1
#define LM_A1_EGS53_CAN_ID 0x0069
#define SPC_A3_EGS53_CAN_ID 0x0379
#define STW_ANGL_STAT_EGS53_CAN_ID 0x0003
#define BRK_STAT_EGS53_CAN_ID 0x0005
#define CGW_STAT_EGS53_CAN_ID 0x000F
#define BRK_STAT2_EGS53_CAN_ID 0x005F
#define SBW_RQ_SCCM_EGS53_CAN_ID 0x006D
#define EPKB_STAT_EGS53_CAN_ID 0x00DD
#define HVAC_RS1_EGS53_CAN_ID 0x00F9
#define TX_RQ_SBC_EGS53_CAN_ID 0x0104
#define ENG_RS3_PT_EGS53_CAN_ID 0x0105
#define ENG_RS2_PT_EGS53_CAN_ID 0x014B
#define TX_RQ_ECM_EGS53_CAN_ID 0x017D
#define ENG_RS1_PT_EGS53_CAN_ID 0x01CD
#define DPM_STAT_EGS53_CAN_ID 0x0200
#define WHL_STAT1_EGS53_CAN_ID 0x0201
#define WHL_STAT2_EGS53_CAN_ID 0x0203
#define PN14_STAT_EGS53_CAN_ID 0x0205
#define CVI_EGS53_CAN_ID 0x0207
#define VEH_DYN_STAT_EGS53_CAN_ID 0x0245
#define BODY_R1_EGS53_CAN_ID 0x0283
#define BODY_R2_EGS53_CAN_ID 0x03C5
#define ECM_OBD_EGS53_CAN_ID 0x03D0
#define NM_ECM_EGS53_CAN_ID 0x0429

/** Heating Power State / Status Heating power */
enum class ECM_A2_HtPwr_Stat_EGS53 : uint16_t {
	CLS = 0, // Heating Cutoff Valve is closed
	OPN = 1, // Heating Cutoff Valve is open
	CYC = 2, // Heating Cutoff Valve is Cyclic Clocked
	SNA = 3, // Signal Not Available
};

/** Ignition Switch State / Terminal Status */
enum class EIS_A1_ISw_Stat_EGS53 : uint16_t {
	IGN_LOCK = 0, // Ignition Lock (0)
	IGN_OFF = 1, // Ignition Off (15c)
	IGN_ACC = 2, // Ignition Accessory (15R)
	IGN_ON = 4, // Ignition on (15)
	IGN_START = 5, // Ignition Start (50)
	SNA = 7, // Signal Not Available
};

/** Automatic Door Lock Request Source / Source of the requirement Automatic door lock */
enum class EIS_A1_AutoDrLk_Rq_Src_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLKS_INSD_SW = 1, // Source IS Central Locking System Inside Switch
	MENU = 2, // Source Is Settings Menu
	SNA = 3, // Signal Not Available
};

/** Profile Mode State / Profile Mode Actual value */
enum class EIS_A1_ProfMd_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	ON = 1, // profiles on
	OFF = 2, // Profiles Off
	SNA = 3, // Signal Not Available
};

/** Automatic Door Lock State / Status Automatic door lock */
enum class EIS_A1_AutoDrLk_Stat_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Actual Profile / News Profile */
enum class EIS_A1_Prof_Stat_EGS53 : uint16_t {
	P1 = 0, // Profile 1
	P2 = 1, // Profile 2
	P3 = 2, // Profile 3
	P4 = 3, // Profile 4
	DEFAULT1 = 4, // Default Profiles
	DEFAULT2 = 5, // Default Profiles
	DEFAULT3 = 6, // Default Profiles
	DEFAULT4 = 7, // Default Profiles
	DEFAULT5 = 8, // Default Profiles
	DEFAULT6 = 9, // Default Profiles
	DEFAULT7 = 10, // Default Profiles
	DEFAULT8 = 11, // Default Profiles
	DEFAULT9 = 12, // Default Profiles
	DEFAULT10 = 13, // Default Profiles
	DEFAULT11 = 14, // Default Profiles
	DEFAULT12 = 15, // Default Profiles
};

/** Central Locking System Gas Door State / ZV Status Tank Flap */
enum class EIS_A1_CLkS_Gas_Dr_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Deck Lid State / ZV Status Tail Cover */
enum class EIS_A1_CLkS_DL_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Lock State / Condition Central Locking */
enum class EIS_A1_CLkS_Lk_Stat_EGS53 : uint16_t {
	UNLK = 0, // Vehicle Unlocked
	INT_LK = 1, // Vehicle Internal Locked
	EXT_LK = 2, // Vehicle External Locked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Rear Right State / ZV Status Door Rear Right */
enum class EIS_A1_CLkS_Dr_RR_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Rear Left State / ZV Status Door Rear Left */
enum class EIS_A1_CLkS_Dr_RL_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Front Right State / ZV Status Door Front Right */
enum class EIS_A1_CLkS_Dr_FR_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Front Left State / ZV Status Door Front Left */
enum class EIS_A1_CLkS_Dr_FL_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Lock State / Condition Central Locking */
enum class EIS_A1_CLkS_Lk_Stat3_EGS53 : uint16_t {
	UNLK = 0, // Vehicle Unlocked
	INT_LK = 1, // Vehicle Internal Locked
	EXT_LK = 2, // Vehicle External Locked
	SEL_UNLK = 3, // Vehicle Selective Unlocked
	SNA = 7, // Signal Not Available
};

/** PTS DISPLAY STATE FROM IC / PTS Display state */
enum class IC_A1_PTS_Disp_Stat_IC_EGS53 : uint16_t {
	OK = 0, // No Error
	TIMEOUT = 1, // Timeout
	FATAL = 2, // Fatal Error
	SNA = 3, // Signal Not Available
};

/** HIGH BEAM ENABLE / TRANSPORT LIGHT */
enum class IC_A1_HiBm_Enbl_EGS53 : uint16_t {
	DSABL = 0, // Disable
	ENBL = 1, // Enable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Radar Sensor Mode Request / Request Radar Sensoric Mode */
enum class IC_A3_RadarSensMd_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Daytime Running Lamps on Request / Request Turn on daytime running light */
enum class IC_A3_DRLt_On_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Tire Pressure Module Activate Request / Request Tire Pressure Control Activate */
enum class IC_A3_TPM_Actv_Rq_V2_EGS53 : uint16_t {
	IDLE = 0, // No Request
	ACTIVATE = 1, // Activate
	SNA = 3, // Signal Not Available
};

/** Flat Tire Warning On Request / Request PlatRollwarner */
enum class IC_A3_FTW_On_Rq_EGS53 : uint16_t {
	IDLE = 0, // No Request
	OFF = 1, // FTW OFF
	ON = 2, // FTW RE-ACTIVATE
	SNA = 3, // Signal Not Available
};

/** Taxi Tone Fashion Request / Request Taxiton Mode */
enum class IC_A3_TaxiToneMd_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taxi Roof Lamps Fashion Request / Request Roof Sign Mode */
enum class IC_A3_TaxiRoofLmpMd_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taxi Fashion Request / Request Taximodus */
enum class IC_A3_TaxiMd_Rq_EGS53 : uint16_t {
	PRIVATE = 0, // Private
	BUSINESS = 1, // on business
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Data Radio Menu State / Status Data Feature Menu */
enum class IC_A3_DataRadioMenu_Stat_EGS53 : uint16_t {
	NA = 0, // NOT AVAILABLE
	AVL = 1, // Available
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Temperature Unit / Temperature Unit */
enum class IC_A3_UnitTemp_Rq_EGS53 : uint16_t {
	CELSIUS = 0, // Celsius
	FAHRENHEIT = 1, // Fahrenheit
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** DRVM Audio Mode Request / Request DRVM Audiomodus */
enum class IC_A3_DRVM_AudioMd_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** DRVM System Mode Request / Request DRVM System Mode */
enum class IC_A3_DRVM_SysMd_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taximeter Request / Request Taximeter */
enum class IC_A3_TAX_Rq_EGS53 : uint16_t {
	NO_RQ = 0, // No Request
	TAX_RQ = 1, // Tax Request
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** IHC Mode Request / Request IHC Mode */
enum class IC_A3_IHC_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Eco Mode Request / Request ECO Mode */
enum class IC_A3_ECO_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** AFS Mode Request / Request AFS Mode */
enum class IC_A3_AFS_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Pressure Unit / Pressure Unit */
enum class IC_A3_UnitPress_Rq_EGS53 : uint16_t {
	BAR = 0, // bar
	PSI = 1, // PSI
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Speed ​​Limit Assist Warning Level Request / Warning Spring Request Speed ​​Limitation Assistant */
enum class IC_A3_SLA_WarnLvl_Rq_EGS53 : uint16_t {
	IDLE = 0, // No Warning
	LVL1 = 1, // Warning Level 1
	LVL2 = 2, // Warning Level 2
	LVL3 = 3, // Warning Level 3
	LVL4 = 4, // Warning Level 4
	LVL5 = 5, // Warning Level 5
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** SPEED LIMIT ASSIST MODE REQUEST / MODE DESCRIPTION SPEED LIMITATION WATER */
enum class IC_A3_SLA_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // Speed ​​Limit Assist Off
	ON_NO_WARN = 1, // Speed ​​Limit Assist on Without Warning
	ON_WARN = 2, // Speed ​​Limit Assist on with Warning
	SNA = 3, // Signal Not Available
};

/** ALDW Fashion Request / Request ALDW mode */
enum class IC_A3_ALDW_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // ALDW OFF
	EARLY = 1, // Aldw on, Warning Level Early
	MID = 2, // Aldw on, Warning Level Mid
	LATE = 3, // Aldw on, Warning Level Late
	SNA = 7, // Signal Not Available
};

/** BSM Mode Request / Request BSM Mode */
enum class IC_A3_BSM_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	PERM = 1, // System Active (permanently)
	AUTO = 2, // System Active (Automatically)
	SNA = 3, // Signal Not Available
};

/** BSM Acoustical Warning Enable / BSM Acoustic Warning allowed */
enum class IC_A3_BSM_AcustWarn_Enbl_EGS53 : uint16_t {
	DSABL = 0, // Disable
	ENBL = 1, // Enable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Parktronic Mode Request / Parktronic Mode Set */
enum class IC_A3_PTS_Md_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Parktronic Acoustic Warning Enable / PTS acoustic warning released */
enum class IC_A3_PTS_AcustWarn_Enbl_EGS53 : uint16_t {
	ENBL = 0, // Enable
	DSABL = 1, // Disable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Steering / Driving Program for Steering */
enum class IC_A3_VehDrvProgSys4_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Drive / Drive Program for powertrain */
enum class IC_A3_VehDrvProgSys3_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Brake / Driving program for brake */
enum class IC_A3_VehDrvProgSys2_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Suspension / Driving Program for Suspension */
enum class IC_A3_VehDrvProgSys1_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request / Driving Program for */
enum class IC_A3_VehDrvProgSys8_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request / Driving Program for */
enum class IC_A3_VehDrvProgSys7_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - DTR / Driving program for DISTRONIC */
enum class IC_A3_VehDrvProgSys6_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - ESP / Driving Program for ESP */
enum class IC_A3_VehDrvProgSys5_Md_Rq_EGS53 : uint16_t {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Intelligent Headlight Control State / State Intelligent Headlight Control */
enum class LM_A1_IHC_Stat_EGS53 : uint16_t {
	IHC_ACTV = 0, // IHC Activated
	IHC_FLT = 1, // IHC Fault
	TEMP_NAVL = 2, // IHC Temporarily Not Available
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch LED Request / Request LED Button Active Damping Control */
enum class SPC_A3_ADC_SwLED_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	CONT = 1, // Continuous Light
	BLINK = 2, // Blinking Light
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch LED Request / Request LED Vehicle Level Button */
enum class SPC_A3_SuspLvlAdjSwLED_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	CONT = 1, // Continuous Light
	BLINK = 2, // Blinking Light
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Angle Sensor Identification / Identification Steering wheel angle sensor */
enum class STW_ANGL_STAT_StW_AnglSens_Id_EGS53 : uint16_t {
	INIT_PSBL = 0, // Steering Wheel Angle Sensor Can Be Initialized
	INIT_SELF = 1, // Steering Wheel Angle Sensor is self-initializing
	INIT_MUST = 2, // (Steering Wheel Angle Sensor Must Initialized)
};

/** Steering Wheel Angle Sensor State / Status Steering wheel angle sensor */
enum class STW_ANGL_STAT_StW_AnglSens_Stat_EGS53 : uint16_t {
	OK = 0, // Steering Wheel Angle Sensor OK
	INI = 1, // Steering Wheel Angle Sensor Not Initialized
	ERR = 2, // Steering Wheel Angle Sensor Fault
	ERR_INI = 3, // Steering Wheel Angle Sensor Fault and Not Initialized
};

/** Parking Brake Request / parking brake request */
enum class BRK_STAT_PkBrk_Rq_SBC_EGS53 : uint16_t {
	IDLE = 0, // No Request
	ENGG = 1, // Engage Request
	RELS = 2, // Release Request
	SNA = 3, // Signal Not Available
};

/** Brake Pedal State / Status Brake Pedal */
enum class BRK_STAT_BrkPdl_Stat_EGS53 : uint16_t {
	UPSTOP = 0, // Pedal upstopped
	PSD = 1, // Pedal Pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Stop Coordinator Stop State / Status Standstill */
enum class BRK_STAT_SPCR_Sp_Stat_EGS53 : uint16_t {
	IDLE = 0, // Vehicle Not Stoped, Or Not Held by Assistance System
	STOP = 1, // Vehicle Stopped and Held by Assistance System (Using Service Brake)
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Brake State / Status Brake */
enum class BRK_STAT_Brk_Stat_EGS53 : uint16_t {
	IDLE = 0, // No Braking
	BRAKING = 1, // Braking
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Stop Coordinator Mode / Mode Standstill Coordinator */
enum class BRK_STAT_SPCR_Md_V3_EGS53 : uint16_t {
	IDLE = 0, // normal surgery
	HOLD = 1, // HOLD MODE ACTIVE
	GO = 2, // Go Mode Active
	SLP = 4, // Vehicle Slips
	SPCR_ACTV = 8, // Stop Coordinator Active
	SPCR_ACTV_HOLD = 9, // SPCR in Activity and Hold Mode Active
	SPCR_ACTV_GO = 10, // SPCR in Activity and Go Mode Active
	SPCR_ACTV_SLP = 12, // SPCR in Activity and Vehicle Slips
	SPCR_PSV = 15, // SPCR Passive
};

/** Stop Coordinator Exception Request / Standstill Coordinator Exception Request */
enum class BRK_STAT_SPCR_Excpt_Rq_EGS53 : uint16_t {
	IDLE = 0, // No Request
	SPDCTRLLVR_DSABL = 1, // Disable Speed ​​Control Lever Request (Driver Door Open)
	AS_DSABL = 2, // Disable Assistance System Request (Engine Hood / Deck Lid Open)
	SPDCTRLLVR_AS_DSABLE = 3, // Disable Speed ​​Control Lever and Assistance System Request
};

/** Starting Torque State (to Release Parking Brake) / Status Tracking Torque (for loosening parking brake) */
enum class BRK_STAT_StTrq_Stat_EGS53 : uint16_t {
	HOLD = 0, // NOT ENOUGH STARTING TORQUE AVAILABLE
	RELS = 1, // Enough Starting Torque Available
	UNDET = 2, // Starting Torque undetermined
	SNA = 3, // Signal Not Available
};

/** ESP System State / ESP system condition */
enum class BRK_STAT_ESP_Sys_Stat_EGS53 : uint16_t {
	ERR = 0, // System Error
	NORM = 1, // normal surgery
	DIAG = 2, // Diagnostics
	EMT = 3, // Exhaust Emission Test
};

/** Assistance System Off Request / Request Assistance System */
enum class BRK_STAT_SPCR_AS_Off_Rq_EGS53 : uint16_t {
	IDLE = 0, // No Request
	AS_TMP_OFF = 1, // Assistance System Temporary Off, Enabling Not Allowed
	AS_CNTS_OFF = 2, // Assistance System Continously Off, Enabling Not Allowed
	SPCR_NA = 3, // Stop Coordinator Not Available, Enabling Not Allowed
};

/** Disable Assistance System / Shutdown Assistance System */
enum class BRK_STAT_SPCR_AS_Dsabl_EGS53 : uint16_t {
	IDLE = 0, // No Request
	AS_NOT_ENBL = 1, // Enabling Assistance System Not Allowed (Temperature)
	AS_DSABL = 2, // Disable Assistance System Request (Temperature)
	SNA = 3, // Signal Not Available
};

/** CGW Routing Status / CGW Routing Status */
enum class CGW_STAT_CGW_Rout_Stat_EGS53 : uint16_t {
	ACTIVE = 0, // Source Can Active
	DSABL_TO_MON = 1, // Source Can Inactive, Disable Timeout Monitoring
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
};

/** Message Transmitter Identification / Transmitter ID */
enum class SBW_RQ_SCCM_MsgTxmtId_EGS53 : uint16_t {
	EWM = 0, // EWM
	SCCM = 1, // SCCM
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
};

/** State Steering Wheel Switch ("+", "-") / steering wheel keys "+", "-" actuated */
enum class SBW_RQ_SCCM_StW_Sw_Stat3_EGS53 : uint16_t {
	NPSD = 0, // Nothing pressed
	PLUS = 1, // "+" pressed
	MINUS = 2, // "-" pressed
	PLUS_MINUS = 3, // "+" and "-" pressed
	NDEF4 = 4, // Not Defined
	NDEF5 = 5, // Not Defined
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Transmission Selector Lever Signal Identification (Steering Wheel) / Gear Select Lever Signal ID (steering wheel) */
enum class SBW_RQ_SCCM_TSL_Sgnl_Id_StW_EGS53 : uint16_t {
	OLD = 0, // OLD signal "TSL_POSN_STW"
	NDEF1 = 1, // Not Defined
	OLD_ERR_RES = 2, // Reserved for Old Signal: Errors in SCCM
	NEW = 3, // New Signals "TSL_P_PSD_STW" AND "TSL_RND_POSN_STW"
};

/** Transmission Selector Lever "P" Switch Actuated (Steering Wheel) / Gear Select Lever "P" */
enum class SBW_RQ_SCCM_TSL_P_Psd_StW_EGS53 : uint16_t {
	IDLE = 0, // Transmission Selector Lever "P" Not Pressed
	PSD = 1, // Transmission Selector Lever "P" pressed
	INI = 2, // Transmission Selector Lever "P" Switch Not Initialized
	SNA = 3, // Signal Not Available
};

/** Transmission Selector Lever RND Position (Steering Wheel) / Gear Selection Lever RND position (steering wheel) */
enum class SBW_RQ_SCCM_TSL_RND_Posn_StW_EGS53 : uint16_t {
	IDLE = 0, // Transmission Selector Lever in idle position
	R = 1, // Transmission Selector Lever in position "R"
	N_UP = 2, // Transmission Selector Lever in position "N UP"
	N_DOWN = 4, // Transmission Selector Lever in position "N Down"
	INI = 6, // Transmission Selector Lever Not Initialized
	D = 8, // Transmission Selector Lever in position "D"
	SNA = 15, // Signal Not Available
};

/** Parking brake switch state / parking brake switch status */
enum class EPKB_STAT_PkBrkSw_Stat_EGS53 : uint16_t {
	IDLE = 0, // Not pressed
	ENGG = 1, // Apply (Engage Pushed)
	RELS = 2, // Release (Release Pulled)
	SNA = 3, // Signal Not Available
};

/** Electrical Parking Brake System State / Status EPKB */
enum class EPKB_STAT_EPkBrk_Stat_EGS53 : uint16_t {
	ERR = 0, // Fatal System Error
	NORM = 1, // normal surgery
	DIAG = 2, // Diagnostics
	INIT = 3, // Initialization
	PART = 4, // Partial surgery
	NO_ENGG = 5, // Partial Operation, Engaging Not Possible
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Parking brake state / status parking brake */
enum class EPKB_STAT_PkBrk_Stat_EGS53 : uint16_t {
	NO_END_POSN = 0, // No end position
	INC = 1, // InCreasing Tensioning Force
	DEC = 2, // Decreasing Tensioning Force
	ENGG = 3, // Parking Brake is engaged
	RELS = 4, // Parking brake is released
	NDEF5 = 5, // Not Defined
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Dynamic Braking Fashion / Mode Dynamic Brakes */
enum class EPKB_STAT_DynBrkMd_EGS53 : uint16_t {
	IDLE = 0, // No Dynamic Braking
	SBC = 1, // Dynamic Braking Via SBC
	EPKB = 2, // Dynamic Braking Via EPKB
	SNA = 3, // Signal Not Available
};

/** Battery Coupling Switch Request / Request Battery Coupling Switch */
enum class EPKB_STAT_BatCplSw_Rq_EPKB_EGS53 : uint16_t {
	IDLE = 0, // No Request
	CLOSE = 1, // Close Battery Coupling Switch
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Transmission Parking Position Request / EPKB request: "P" */
enum class EPKB_STAT_TxPkPosn_Rq_EPKB_EGS53 : uint16_t {
	IDLE = 0, // No Request
	P_ENGG = 1, // Engage transmission parking position
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Turn on Brake Light on Request / Brake light */
enum class EPKB_STAT_BrkLgt_On_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Requested gear, upper limit / target gear, upper limit */
enum class TX_RQ_SBC_GrMax_Rq_SBC_EGS53 : uint16_t {
	PASSIVE = 0, // Passive value
	G1 = 1, // Requested gear, upper limit = 1
	G2 = 2, // Requested gear, upper limit = 2
	G3 = 3, // Requested gear, upper limit = 3
	G4 = 4, // Requested gear, upper limit = 4
	G5 = 5, // Requested gear, upper limit = 5
	G6 = 6, // Requested gear, upper limit = 6
	G7 = 7, // Requested gear, upper limit = 7
};

/** Requested gear, lower limit / target gear, lower limit */
enum class TX_RQ_SBC_GrMin_Rq_SBC_EGS53 : uint16_t {
	PASSIVE = 0, // Passive value
	G1 = 1, // Requested gear, lower limit = 1
	G2 = 2, // Requested gear, lower limit = 2
	G3 = 3, // Requested gear, lower limit = 3
	G4 = 4, // Requested gear, lower limit = 4
	G5 = 5, // Requested gear, lower limit = 5
	G6 = 6, // Requested gear, lower limit = 6
	G7 = 7, // Requested gear, lower limit = 7
};

/** Shift characteristic displacement request / demand shift line shift */
enum class TX_RQ_SBC_ShftChrDsp_Rq_SBC_EGS53 : uint16_t {
	SKL0 = 0, // Shift characteristic displacement "0"
	SKL1 = 1, // Shift characteristic displacement "1"
	SKL2 = 2, // Shift characteristic displacement "2"
	SKL3 = 3, // Shift characteristic displacement "3"
	SKL4 = 4, // Shift characteristic displacement "4"
	SKL5 = 5, // Shift characteristic displacement "5"
	SKL6 = 6, // Shift characteristic displacement "6"
	SKL7 = 7, // Shift characteristic displacement "7"
	SKL8 = 8, // Shift characteristic displacement "8"
	SKL9 = 9, // Shift characteristic displacement "9"
	SKL10 = 10, // Shift characteristic displacement "10"
};

/** Request neutral gear by SBC / SBC request: "Neutral" */
enum class TX_RQ_SBC_GrN_Rq_SBC_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	RQ_N = 1, // Request "Neutral"
	IDLE = 2, // No Request
	SNA = 3, // Signal Not Available
};

/** Engine Running State / Status Engine Circulation */
enum class ENG_RS3_PT_EngRun_Stat_EGS53 : uint16_t {
	STOP = 0, // Engine is stopped
	START = 1, // Engine starting
	IDLE_UNSTBL = 2, // Engine Idling, Unstable
	IDLE_STBL = 3, // Engine Idling, Stable
	UNLIMITED = 4, // Engine Running, Unlimited RPM
	LIMITED = 5, // Engine Running, Limited RPM
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Requested Gear, Upper Limit / Sprocket, Upper Border */
enum class TX_RQ_ECM_GrMax_Rq_ECM_EGS53 : uint16_t {
	PASSIVE = 0, // Passive Value
	G1 = 1, // Requested Gear, Upper Limit = 1
	G2 = 2, // Requested Gear, Upper Limit = 2
	G3 = 3, // Requested Gear, Upper Limit = 3
	G4 = 4, // Requested Gear, Upper Limit = 4
	G5 = 5, // Requested Gear, Upper Limit = 5
	G6 = 6, // Requested Gear, Upper Limit = 6
	G7 = 7, // Requested Gear, Upper Limit = 7
};

/** Requested Gear, Lower Limit / Sprocket, Lower Border */
enum class TX_RQ_ECM_GrMin_Rq_ECM_EGS53 : uint16_t {
	PASSIVE = 0, // Passive Value
	G1 = 1, // Requested Gear, Lower Limit = 1
	G2 = 2, // Requested Gear, Lower Limit = 2
	G3 = 3, // Requested Gear, Lower Limit = 3
	G4 = 4, // Requested Gear, Lower Limit = 4
	G5 = 5, // Requested Gear, Lower Limit = 5
	G6 = 6, // Requested Gear, Lower Limit = 6
	G7 = 7, // Requested Gear, Lower Limit = 7
};

/** Shift Characteristic Displacement Request / Request Switching Shift */
enum class TX_RQ_ECM_ShftChrDsp_Rq_EGS53 : uint16_t {
	SKL0 = 0, // Shift Characteristic Displacement "0"
	SKL1 = 1, // Shift Characteristic Displacement "1"
	SKL2 = 2, // Shift Characteristic Displacement "2"
	SKL3 = 3, // Shift Characteristic Displacement "3"
	SKL4 = 4, // Shift Characteristic Displacement "4"
	SKL5 = 5, // Shift Characteristic Displacement "5"
	SKL6 = 6, // Shift Characteristic Displacement "6"
	SKL7 = 7, // Shift Characteristic Displacement "7"
	SKL8 = 8, // Shift Characteristic Displacement "8"
	SKL9 = 9, // Shift Characteristic Displacement "9"
	SKL10 = 10, // Shift Characteristic Displacement "10"
};

/** Torque Converter Lockup Clutch Request / Kueb setpoint open / slipping */
enum class TX_RQ_ECM_TCC_Rq_EGS53 : uint16_t {
	IDLE = 0, // No Request
	DISENGG = 1, // Lockup Clutch Disengage
	ENGG = 2, // Lockup Clutch Engage
	SNA = 3, // Signal Not Available
};

/** Decentral Power Management External Fashion Enable Request / Release External Fashion by Decentralized Power Management */
enum class DPM_STAT_DPM_ExtMd_Enbl_Rq_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	NO_EXT = 1, // DPM External Fashion Not Allowed
	EXT = 2, // DPM External Fashion Allowed
	SNA = 3, // Signal Not Available
};

/** Decentral Power Management Fashion Limit Request / Mode Handle Decentralized Power Management */
enum class DPM_STAT_DPM_MdLmt_Rq_EGS53 : uint16_t {
	SLEEP = 0, // DPM LIMIT SLEEP MODE
	LOCAL = 1, // DPM LIMIT Local Mode
	EXT = 2, // DPM Limit External Mode
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF FRONT LEFT Wheel / direction of rotation Wheel front left */
enum class WHL_STAT2_WhlDir_FL_Stat_EGS53 : uint16_t {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF FRONT RIGHT Wheel / direction of rotation Wheel front right */
enum class WHL_STAT2_WhlDir_FR_Stat_EGS53 : uint16_t {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF REAR LEFT Wheel / direction of rotation Wheel rear left */
enum class WHL_STAT2_WhlDir_RL_Stat_EGS53 : uint16_t {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF REAR RIGHT Wheel / direction of rotation Wheel rear right */
enum class WHL_STAT2_WhlDir_RR_Stat_EGS53 : uint16_t {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** Battery Coupling Switch State / State Battery Coupling Switch */
enum class PN14_STAT_PN14_BatCplSw_Stat_EGS53 : uint16_t {
	CLS = 0, // Battery Coupling Switch Closed
	PREOPN = 1, // Battery Coupling Switch Open in 2 sec
	OPN = 2, // Battery Coupling Switch Open
	SNA = 3, // Signal Not Available
};

/** Supply Battery Cutoff Switch State / Status Battery Separation Switch */
enum class PN14_STAT_PN14_SupBatCutSw_Stat_EGS53 : uint16_t {
	CLS = 0, // Battery Cutoff Switch is closed
	PREOPN = 1, // Battery Cutoff Switch Opens in 300 sec
	OPN = 2, // Battery Cutoff Switch is open
	SNA = 3, // Signal Not Available
};

/** Country code / country code */
enum class CVI_Country_EGS53 : uint16_t {
	ROW = 0, // Remain of the world
	USA = 1, // United States
	CAN = 2, // Canada
	JAP = 3, // Japan
	SWI = 4, // Switzerland
	AUS = 5, // Australia
	GULF = 6, // Gulf states
	UK = 7, // United Kingdom (not 221/216)
	SNA = 15, // Signal Not Available
};

/** DC group / DC group */
enum class CVI_Group_EGS53 : uint16_t {
	MB = 0, // Mercedes Benz, Maybach
	SMART = 1, // smart
	CG = 2, // Chrysler Group
	MMC = 3, // Mitsubishi
	SNA = 15, // Signal Not Available
};

/** Guard level / Guard Level */
enum class CVI_Guard_EGS53 : uint16_t {
	NO = 0, // No armoring
	B4 = 1, // Armoring class B4
	B6 = 2, // Armoring class B6 / B7
	SNA = 3, // Signal Not Available
};

/** Vehicle line / Series */
enum class CVI_VehLine_EGS53 : uint16_t {
	BR221 = 0, // BR 221
	BR231 = 1, // BR 231
	BR212 = 2, // BR 212
	BR204 = 3, // BR 204
	BR207 = 9, // BR 207
	BR251 = 17, // BR 251
	BR164 = 19, // BR 164
	BR216 = 22, // BR 216
	SNA = 63, // Signal Not Available
};

/** Vehicle line version: year / year change: Year */
enum class CVI_VehLineYear_EGS53 : uint16_t {
	NDEF30 = 30, // Not Defined
	START = 31, // Start of vehicle line
};

/** Vehicle line version: package / change Year: Package */
enum class CVI_VehLinePack_EGS53 : uint16_t {
	PACK0 = 0, // Package "/ 0"
	PACK1 = 1, // Package "/ 1"
	PACK2 = 2, // Package "/ 2"
	PACKX = 3, // Package "/ X" or start of vehicle line
};

/** Steering variant / Steering variant */
enum class CVI_StStyle_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	LHD = 1, // Left hand drive
	RHD = 2, // Right hand drive
	SNA = 3, // Signal Not Available
};

/** Vehicle body style / body variant */
enum class CVI_BodyStyle_EGS53 : uint16_t {
	W = 0, // W - Sedan
	V = 1, // V - Stretched limo
	C = 2, // C - Coupe
	S = 3, // S - wagon station
	A = 4, // A - Convertible
	R = 5, // R - Roadster
	CL = 6, // CL - Sports coupe
	VV = 7, // VV - Extra streched limousine
	VF = 8, // VF - Stretched chassis
	F = 9, // F - Chassis
	G = 10, // G - Off-road vehicle
	GV = 11, // GV - Stretched off-road vehicle
	T = 12, // T - Multi Sports Tourer
	X = 13, // X - sports utility Tourer
	SNA = 31, // Signal Not Available
};

/** Engine (Bit 7: Otto-engine => 0, diesel engine => 1) / motor (Bit 7: gasoline => 0, Diesel => 1) */
enum class CVI_EngStyle_EGS53 : uint16_t {
	M275E55 = 0, // M275 E55 [ME2.7.2]
	M273E55 = 1, // M273 E55 [ME9.7]
	M273E46 = 2, // M273 E46 [ME9.7]
	M272E35 = 3, // M272 E35 [ME9.7]
	M272E30 = 4, // M272 E30 [ME9.7]
	M272E25 = 5, // M272 E25 [ME9.7]
	M273E55DE = 7, // M273 E55 DE [ME9.7]
	M273E46DE = 8, // M273 E46 DE [ME9.7]
	M272E35DE = 9, // M272 E35 DE [ME9.7]
	M272E30DE = 10, // M272 E30 DE [ME9.7]
	M272E25DE = 11, // M272 E25 DE [ME9.7]
	M271E18ML135ATT = 12, // attrac M271 E18 ML. (135 kW) [SIM271KE]
	M271E18ML115ATT = 13, // attrac M271 E18 ML. (115 kW) [SIM271KE]
	M272E35_221 = 14, // M272 E35 (221 kW) [ME9.7]
	AMGM156E63HP = 123, // AMG M156 E63 HP [ME9.7]
	AMGM275E60LA = 124, // AMG M275 E60 LA [ME2.7.2]
	AMGM157E60LA = 125, // AMG M157 E60 LA [ME9.7]
	AMGM156E63 = 126, // AMG M156 E63 [ME9.7]
	OM642DE30LA160 = 129, // OM642 DE30 LA (155/160 kW) [CR5 / CR6]
	OM629DE40LA = 130, // OM629 DE40 LA [CR5]
	OM642DE30LA140 = 131, // OM642 DE30 LA red. (140 kW) [CR6]
	OM646EVODE22LA125 = 132, // OM646EVO DE22 LA (120/125 kW) [CRD]
	OM646EVODE22LA100 = 133, // OM646EVO DE22 LA red. (100 kW) [CRD]
	OM646EVODE22LA85 = 134, // OM646EVO DE22 LA (85 kW) [CRD]
	OM651DE22LA150 = 135, // OM651 DE22 LA (150 kW) [CRD2]
	OM651DE22LA120 = 136, // OM651 DE22 LA (120 kW) [CRD2]
	OM651DE22LA100 = 137, // OM651 DE22 LA (100 kW) [CRD2]
	OM651DE22LA80 = 138, // OM651 DE22 LA (80 kW) [CRD2]
	SNA = 255, // Signal Not Available
};

/** Vehicle roof style / roof version */
enum class CVI_RoofStyle_EGS53 : uint16_t {
	NORM = 0, // Normal Roof
	TSSR = 1, // tilt / slide sunroof
	EXTRUN_TSSR = 2, // Exterior running tilt / slide sunroof
	TSSR_RCLS = 3, // tilt / slide sunroof with rain closure (not 221/216)
	EXTRUN_TSSR_CLS = 4, // Exterior running tilt / slide sunroof with rain closure
	SNA = 7, // Signal Not Available
};

/** Vehicle options package / vehicle equipment package */
enum class CVI_VehOPTPack_EGS53 : uint16_t {
	CLASSIC = 0, // Classic
	ELEGANCE = 1, // Elegance
	AVANTGARDE = 2, // Avantgarde
	SNA = 3, // Signal Not Available
};

/** HVAC style / KLA variant */
enum class CVI_HVACStyle_EGS53 : uint16_t {
	ONE_ZONE = 0, // One zone HVAC
	TWO_ZONE = 1, // Two zone HVAC
	THREE_ZONE = 2, // Three zone HVAC
	FOUR_ZONE = 3, // Four zone HVAC
};

/** Rotary Latch Door Rear Right State / Status Swivel Fall Door Rear Right */
enum class BODY_R1_DrRLtch_RR_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Rear Left State / Status Swivel Fall Door Rear Left */
enum class BODY_R1_DrRLtch_RL_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Front Right State / Status Swivel Fall Door Front Right */
enum class BODY_R1_DrRLtch_FR_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Front Left State / Status Swivel Fall Door Front Left */
enum class BODY_R1_DrRLtch_FL_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Emergency Flasher on Request / Warning Blink Light */
enum class BODY_R1_EF_On_Rq_EGS53 : uint16_t {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Engine Hood State / Status Bonnet */
enum class BODY_R1_EngHd_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Rotary Latch Closed
	OPN = 2, // Rotary Latch Open
	SNA = 3, // Signal Not Available
};

/** Deck Lid Rotary Latch State / Status Swivel Fall Tail Cover */
enum class BODY_R1_DL_RLtch_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Rotary Latch Closed
	OPN = 2, // Rotary Latch Open
	SNA = 3, // Signal Not Available
};

/** trailer detected / trailer operation detected */
enum class BODY_R1_Trlr_Stat_EGS53 : uint16_t {
	NONE = 0, // Trailer Not Detected
	OK = 1, // trailer detected
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Reverse Gear Engaged / reverse input */
enum class BODY_R1_RevGr_Engg_EGS53 : uint16_t {
	DISENGG = 0, // disengaged
	ENGG = 1, // engaged
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Conditioning State / Status Steering Cool Climatization */
enum class BODY_R1_StW_Cond_Stat_EGS53 : uint16_t {
	OFF = 0, // LED Steering Wheel Conditioning Off
	NDEF1 = 1, // Not Defined
	ON = 2, // LED Steering Wheel Conditioning On
	BLINK = 3, // LED Steering Wheel Conditioning Blinks Cause of Fault
};

/** BUCKLE SWITCH REAR MIDDLE STATE (by SAM_R) / Status Belt Slip Rear Center */
enum class BODY_R1_Bckl_Sw_RM_Stat_SAM_R_EGS53 : uint16_t {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** BUCKLE SWITCH REAR RIGHT STATE (by SAM_R) / status Belt lock right */
enum class BODY_R1_Bckl_Sw_RR_Stat_SAM_R_EGS53 : uint16_t {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** BUCKLE SWITCH REAR LEFT STATE (by SAM_R) / Status Curtle Rear Left */
enum class BODY_R1_Bckl_Sw_RL_Stat_SAM_R_EGS53 : uint16_t {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Switch Pressed / Button Driving Program */
enum class BODY_R2_VehDrvProgSw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Conditioning Active / steering wheel climatization active */
enum class BODY_R2_StW_Cond_Actv_EGS53 : uint16_t {
	OFF = 0, // Stearing Wheel Conditioning Off
	HEAT = 1, // Stearing Wheel Heating Active
	COOL = 2, // Stearing Wheel Cooling Active
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
enum class BODY_R2_SuspLvlAdjSw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Switch Parktronic / City Assistant Pressed / Button Parktronic / CAS Actuated */
enum class BODY_R2_PTS_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** NightView Switch Pressed / NightView Button */
enum class BODY_R2_NV_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Electronic Stability Program Switch Pressed / ESP Button */
enum class BODY_R2_ESP_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Parking Assistance Switch Pressed / Parking Assist Taster */
enum class BODY_R2_PKAS_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** BSM War Unit Right State / Status BSM Warning Unit right */
enum class BODY_R2_BSM_WarnUnit_Rt_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	OK = 1, // BSM Warnunit OK
	ERROR = 2, // BSM Warnunit Error
	SNA = 3, // Signal Not Available
};

/** BSM Warn Unit Left State / Status BSM Warning Unit Links */
enum class BODY_R2_BSM_WarnUnit_Lt_Stat_EGS53 : uint16_t {
	NDEF0 = 0, // Not Defined
	OK = 1, // BSM Warnunit OK
	ERROR = 2, // BSM Warnunit Error
	SNA = 3, // Signal Not Available
};

/** Downhill Speed ​​Regulation Switch Pressed / Downhave Speed ​​Control Button */
enum class BODY_R2_DSR_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Telematics Switches pressed / telematics switch operated */
enum class BODY_R2_Tlm_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Phone Call OR Speech Dialogue System Active / Telephone Disconnection or Language Conditioning System */
enum class BODY_R2_Phonecall_SDS_Actv_EGS53 : uint16_t {
	INACT = 0, // Inactive
	ACTV = 1, // Phone Call OR SDS Active
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch Pressed / Button Active Damping Control */
enum class BODY_R2_ADC_Sw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
enum class BODY_R2_SuspLvlAdjSw_Psd_CTRL_L_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch Pressed / Button Active Damping Control */
enum class BODY_R2_ADC_Sw_Psd_CTRL_L_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Off Road Switch Pressed / Off Road Button */
enum class BODY_R2_OffRoadSw_Psd_EGS53 : uint16_t {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Conditions for Ignition Cycle Counter (RBM) State / Status Conditions for Ignition Cycle Counter (RBM) */
enum class ECM_OBD_OBD_IgnCycCntCond_Stat_EGS53 : uint16_t {
	INACT = 0, // Conditions Not Fulfilled
	ACTV = 1, // Conditions Fulfilled
	FLT = 2, // Fault
	NDEF3 = 3, // Not Defined
};

/** Conditions for General Denominator (RBM) State / Status Conditions for General Denominator (RBM) */
enum class ECM_OBD_OBD_GnrlDenCond_Stat_EGS53 : uint16_t {
	INACT = 0, // Conditions Not Fulfilled
	ACTV = 1, // Conditions Fulfilled
	FLT = 2, // Fault
	NDEF3 = 3, // Not Defined
};

/** Network Management Mode / Network Management Mode */
enum class NM_ECM_NM_Mode_EGS53 : uint16_t {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_ECM_NM_Ud_Launch_EGS53 : uint16_t {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_ECM_NM_Ud_Srv_EGS53 : uint16_t {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_ECM_WakeupRsn_ECM_EGS53 : uint16_t {
	NETWORK = 0, // Wakeup by Network
	CHASSIS = 11, // Wakeup by Chassis Can
	POWERTRAIN = 13, // Wakeup by Powertrain Can
	TERM_15 = 130, // Wakeup by Discrete Terminal 15 Signal
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_ECM_Nw_Id_EGS53 : uint16_t {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING1__: 32;
		/** Display Brightness Night View / Display Brightness Night View **/
		uint8_t DispBrt_NV: 8;
		/** Display Brightness Headunit / Display Brightness Headunit **/
		uint8_t DispBrt_HU_V2: 8;
		/** Display Brightness Instrument Cluster / Display Brightness Combination Strument **/
		uint8_t DispBrt_IC: 8;
		/** Switch Illumination Level (Term 58D) / Search Lighting (class 58D) **/
		uint8_t SwIllLvl: 8;
	} __attribute__((packed));
	/** Gets CAN ID of CTRL_U_A2_EGS53 **/
	uint32_t get_canid(){ return CTRL_U_A2_EGS53_CAN_ID; }
} CTRL_U_A2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Outside Air Pressure / outdoor air pressure **/
		uint8_t AirPress_Outsd: 8;
		/** Fuel Consumption / Consumption **/
		uint16_t FuelCons: 16;
		/** Engine Oil Quality / Engine Oil Quality **/
		uint8_t EngOilQual: 8;
		/** Engine Oil Level / Engine Oil Level **/
		uint8_t EngOilLvl: 8;
		/** Engine OIL Temperature / Engine Oil Temperature **/
		uint8_t EngOilTemp: 8;
		/** Intake Air Temperature / intake air temperature **/
		uint8_t IntkAirTemp: 8;
		/** Engine Coolant Temperature / Motor Coolant Temperature **/
		uint8_t EngCoolTemp: 8;
	} __attribute__((packed));
	/** Gets CAN ID of ECM_A1_EGS53 **/
	uint32_t get_canid(){ return ECM_A1_EGS53_CAN_ID; }
} ECM_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Fuel Pressure Request / Request Fuel Pressure **/
		uint8_t FuelPress_Rq: 8;
		/** Particle Filter Correction Offset on EngtrqMaxCorrfCTR / Particle FilterCorrection value **/
		uint8_t ParticleFltrCorrOffset: 4;
		/** Engine Torque Increase Plausibility Check Available / Plausibility Check for Engine Torque Increase available **/
		bool EngTrqIncChk_Avl: 1;
		/** Enable Engine Torque Increase Request / Enable Engine Torque Increase TCM **/
		bool EngTrqInc_Enbl_TCM: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Fuel System Control Module Alive / FSCM Life Sign **/
		bool FSCM_Alive: 1;
		/** Actual Engine Efficiency / Efficiency Combustion Engine **/
		uint8_t EngEff: 8;
		/** Desired Engine Idle Speed / Motorle Read Rate **/
		uint16_t EngIdleRPM_Dsr: 14;
		/** Fuel Pump on Request / Switch-on request Fuel pump **/
		bool FuelPmp_On_Rq: 1;
		/** Clutch is disengaged / clutch **/
		bool Clutch_Disengg: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** Maximum Aircon Compressor Crackish Torque / Limit Momper (Crankshaft) Climate Compressor **/
		uint8_t HVAC_CompTrq_Max: 8;
		/** Heating Power State / Status Heating power **/
		ECM_A2_HtPwr_Stat_EGS53 HtPwr_Stat: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 5;
		/** Additional Water Pump on Request (by Engine Control Module) / Turn on auxiliary water pump **/
		bool AddWtrPmp_On_Rq_ECM: 1;
	} __attribute__((packed));
	/** Gets CAN ID of ECM_A2_EGS53 **/
	uint32_t get_canid(){ return ECM_A2_EGS53_CAN_ID; }
} ECM_A2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_EIS_A1: 8;
		/** Central Locking System Lock State / Condition Central Locking **/
		EIS_A1_CLkS_Lk_Stat3_EGS53 CLkS_Lk_Stat3: 3;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Message Counter / Message Counter **/
		uint8_t MC_EIS_A1: 4;
		/** Keyline 1 Approved for Keyless Go / Keyline 1 released for kg **/
		bool KeyLine1_Appr: 1;
		/** Keyline 2 Approved for Keyless Go / Keyline 2 Released for kg **/
		bool KeyLine2_Appr: 1;
		/** Keyline 3 Approved for Keyless Go / Keyline 3 Released for kg **/
		bool KeyLine3_Appr: 1;
		/** Keyline 4 Approved for Keyless Go / Keyline 4 released for kg **/
		bool KeyLine4_Appr: 1;
		/** Keyline 5 Approved for Keyless Go / Keyline 5 released for kg **/
		bool KeyLine5_Appr: 1;
		/** Keyline 6 Approved for Keyless Go / Keyline 6 Released for kg **/
		bool KeyLine6_Appr: 1;
		/** Keyline 7 Approved for Keyless GO / Keyline 7 released for kg **/
		bool KeyLine7_Appr: 1;
		/** Keyline 8 Approved for Keyless Go / Keyline 8 Released for kg **/
		bool KeyLine8_Appr: 1;
		/** Central Locking System Door Front Left State / ZV Status Door Front Left **/
		EIS_A1_CLkS_Dr_FL_Stat_EGS53 CLkS_Dr_FL_Stat: 2;
		/** Central Locking System Door Front Right State / ZV Status Door Front Right **/
		EIS_A1_CLkS_Dr_FR_Stat_EGS53 CLkS_Dr_FR_Stat: 2;
		/** Central Locking System Door Rear Left State / ZV Status Door Rear Left **/
		EIS_A1_CLkS_Dr_RL_Stat_EGS53 CLkS_Dr_RL_Stat: 2;
		/** Central Locking System Door Rear Right State / ZV Status Door Rear Right **/
		EIS_A1_CLkS_Dr_RR_Stat_EGS53 CLkS_Dr_RR_Stat: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
		/** Central Locking System Lock State / Condition Central Locking **/
		EIS_A1_CLkS_Lk_Stat_EGS53 CLkS_Lk_Stat: 2;
		/** Central Locking System Deck Lid State / ZV Status Tail Cover **/
		EIS_A1_CLkS_DL_Stat_EGS53 CLkS_DL_Stat: 2;
		/** Central Locking System Gas Door State / ZV Status Tank Flap **/
		EIS_A1_CLkS_Gas_Dr_Stat_EGS53 CLkS_Gas_Dr_Stat: 2;
		/** Actual Profile / News Profile **/
		EIS_A1_Prof_Stat_EGS53 Prof_Stat: 4;
		/** Automatic Door Lock State / Status Automatic door lock **/
		EIS_A1_AutoDrLk_Stat_EGS53 AutoDrLk_Stat: 2;
		/** Profile Mode State / Profile Mode Actual value **/
		EIS_A1_ProfMd_Stat_EGS53 ProfMd_Stat: 2;
		/** Keyless Go Ignition Control Active / Keyless Go Terminal Control Active **/
		bool KG_IgnCtrl_Actv: 1;
		/** Enable Engine Start Request / Keyles Go Ready Conditions **/
		bool EngSt_Enbl_Rq_KG: 1;
		/** Keyless Go Start Switch Pressed / Keyless Go Start Button **/
		bool KG_StSw_Psd: 1;
		/** Several keys detected / multiple keys detected **/
		bool KG_SevKeysDet: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 2;
		/** Automatic Door Lock Request Source / Source of the requirement Automatic door lock **/
		EIS_A1_AutoDrLk_Rq_Src_EGS53 AutoDrLk_Rq_Src: 2;
		/** Ignition Switch State / Terminal Status **/
		EIS_A1_ISw_Stat_EGS53 ISw_Stat: 3;
		/** Ignition is on and starting procedure IS INACTIVE (15x) / Ignition AN / motor start **/
		bool Ign_On_StProc_Inact: 1;
		/** Transmission Parking Position Request / Ice Wish: "P" **/
		bool TxPkPosn_Rq: 1;
		/** Transmission Parking Position Emergency Request / Request Not- "P" **/
		bool TxPkPosn_Emg_Rq: 1;
		/** Transmission Parking Position Auto Enable / Auto- "P" Enabled **/
		bool TxPkPosnAuto_Enbl: 1;
		/** Transmission Parking Position Request Enable / SBC request: "P" allowed **/
		bool TxPkPosn_Rq_SBC_Enbl: 1;
	} __attribute__((packed));
	/** Gets CAN ID of EIS_A1_EGS53 **/
	uint32_t get_canid(){ return EIS_A1_EGS53_CAN_ID; }
} EIS_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Odometer (for Everyone, Fffffeh: Signal Invalid) / Mileage (for all, Fffffeheh: signal invalid) **/
		uint32_t Odo: 24;
		/** Engine Shut-Off Time / Motor Storage Time **/
		uint16_t EngShutOffTm: 12;
		/** HIGH BEAM ENABLE / TRANSPORT LIGHT **/
		IC_A1_HiBm_Enbl_EGS53 HiBm_Enbl: 2;
		/** PTS DISPLAY STATE FROM IC / PTS Display state **/
		IC_A1_PTS_Disp_Stat_IC_EGS53 PTS_Disp_Stat_IC: 2;
		/** Displayed Outside Air Temperature / Displayed Outdoor Air Temperature **/
		uint8_t AirTemp_Outsd_Disp: 8;
		/** Displayed Vehicle Speed (Without Attenuation) / Displayed Speed (without pointer attenuation) **/
		uint16_t VehSpd_Disp: 12;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
	} __attribute__((packed));
	/** Gets CAN ID of IC_A1_EGS53 **/
	uint32_t get_canid(){ return IC_A1_EGS53_CAN_ID; }
} IC_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Vehicle Driving Program Fashion Request - ESP / Driving Program for ESP **/
		IC_A3_VehDrvProgSys5_Md_Rq_EGS53 VehDrvProgSys5_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request - DTR / Driving program for DISTRONIC **/
		IC_A3_VehDrvProgSys6_Md_Rq_EGS53 VehDrvProgSys6_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request / Driving Program for **/
		IC_A3_VehDrvProgSys7_Md_Rq_EGS53 VehDrvProgSys7_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request / Driving Program for **/
		IC_A3_VehDrvProgSys8_Md_Rq_EGS53 VehDrvProgSys8_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request - Suspension / Driving Program for Suspension **/
		IC_A3_VehDrvProgSys1_Md_Rq_EGS53 VehDrvProgSys1_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request - Brake / Driving program for brake **/
		IC_A3_VehDrvProgSys2_Md_Rq_EGS53 VehDrvProgSys2_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request - Drive / Drive Program for powertrain **/
		IC_A3_VehDrvProgSys3_Md_Rq_EGS53 VehDrvProgSys3_Md_Rq: 2;
		/** Vehicle Driving Program Fashion Request - Steering / Driving Program for Steering **/
		IC_A3_VehDrvProgSys4_Md_Rq_EGS53 VehDrvProgSys4_Md_Rq: 2;
		/** Parktronic Acoustic Warning Enable / PTS acoustic warning released **/
		IC_A3_PTS_AcustWarn_Enbl_EGS53 PTS_AcustWarn_Enbl: 2;
		/** Parktronic Mode Request / Parktronic Mode Set **/
		IC_A3_PTS_Md_Rq_EGS53 PTS_Md_Rq: 2;
		/** BSM Acoustical Warning Enable / BSM Acoustic Warning allowed **/
		IC_A3_BSM_AcustWarn_Enbl_EGS53 BSM_AcustWarn_Enbl: 2;
		/** BSM Mode Request / Request BSM Mode **/
		IC_A3_BSM_Md_Rq_EGS53 BSM_Md_Rq: 2;
		/** ALDW Fashion Request / Request ALDW mode **/
		IC_A3_ALDW_Md_Rq_EGS53 ALDW_Md_Rq: 3;
		/** SPEED LIMIT ASSIST MODE REQUEST / MODE DESCRIPTION SPEED LIMITATION WATER **/
		IC_A3_SLA_Md_Rq_EGS53 SLA_Md_Rq: 2;
		/** Speed ​​Limit Assist Warning Level Request / Warning Spring Request Speed ​​Limitation Assistant **/
		IC_A3_SLA_WarnLvl_Rq_EGS53 SLA_WarnLvl_Rq: 3;
		/** Pressure Unit / Pressure Unit **/
		IC_A3_UnitPress_Rq_EGS53 UnitPress_Rq: 2;
		/** AFS Mode Request / Request AFS Mode **/
		IC_A3_AFS_Md_Rq_EGS53 AFS_Md_Rq: 2;
		/** Eco Mode Request / Request ECO Mode **/
		IC_A3_ECO_Md_Rq_EGS53 ECO_Md_Rq: 2;
		/** IHC Mode Request / Request IHC Mode **/
		IC_A3_IHC_Md_Rq_EGS53 IHC_Md_Rq: 2;
		/** Taximeter Request / Request Taximeter **/
		IC_A3_TAX_Rq_EGS53 TAX_Rq: 2;
		/** DRVM System Mode Request / Request DRVM System Mode **/
		IC_A3_DRVM_SysMd_Rq_EGS53 DRVM_SysMd_Rq: 2;
		/** DRVM Audio Mode Request / Request DRVM Audiomodus **/
		IC_A3_DRVM_AudioMd_Rq_EGS53 DRVM_AudioMd_Rq: 2;
		/** Temperature Unit / Temperature Unit **/
		IC_A3_UnitTemp_Rq_EGS53 UnitTemp_Rq: 2;
		/** Data Radio Menu State / Status Data Feature Menu **/
		IC_A3_DataRadioMenu_Stat_EGS53 DataRadioMenu_Stat: 2;
		/** Taxi Fashion Request / Request Taximodus **/
		IC_A3_TaxiMd_Rq_EGS53 TaxiMd_Rq: 2;
		/** Taxi Roof Lamps Fashion Request / Request Roof Sign Mode **/
		IC_A3_TaxiRoofLmpMd_Rq_EGS53 TaxiRoofLmpMd_Rq: 2;
		/** Taxi Tone Fashion Request / Request Taxiton Mode **/
		IC_A3_TaxiToneMd_Rq_EGS53 TaxiToneMd_Rq: 2;
		/** Flat Tire Warning On Request / Request PlatRollwarner **/
		IC_A3_FTW_On_Rq_EGS53 FTW_On_Rq: 2;
		/** Tire Pressure Module Activate Request / Request Tire Pressure Control Activate **/
		IC_A3_TPM_Actv_Rq_V2_EGS53 TPM_Actv_Rq_V2: 2;
		/** Daytime Running Lamps on Request / Request Turn on daytime running light **/
		IC_A3_DRLt_On_Rq_EGS53 DRLt_On_Rq: 2;
		/** Radar Sensor Mode Request / Request Radar Sensoric Mode **/
		IC_A3_RadarSensMd_Rq_EGS53 RadarSensMd_Rq: 2;
	} __attribute__((packed));
	/** Gets CAN ID of IC_A3_EGS53 **/
	uint32_t get_canid(){ return IC_A3_EGS53_CAN_ID; }
} IC_A3_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint64_t __PADDING1__: 48;
		/** Switch Illumination Off Request / Request Search Lighting **/
		bool SwIll_Off_Rq: 1;
		/** Fog Lamps Front Indication Lamp On Request / Fog Light Control Lamp **/
		bool FogLmp_Ft_IndLmp_On_Rq: 1;
		/** Low Beam Indication Lamp On Request / Switch on Control Lamp **/
		bool LoBm_IndLmp_On_Rq: 1;
		/** Intelligent Headlight Control State / State Intelligent Headlight Control **/
		LM_A1_IHC_Stat_EGS53 IHC_Stat: 2;
		/** Fog Lamps Rear Indication Lamp On Request / Nebula Ficklets Turn on Control Lamp **/
		bool FogLmp_R_IndLmp_On_Rq: 1;
		/** Position LAMP Indication Lamp On Request / Landlight Turn on Control Lamp **/
		bool PosnLmp_IndLmp_On_Rq: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** Parking LAMPS LEFT SIDE ON REQUEST / PARK LIGHT Turn on the left **/
		bool PkLmp_Lt_On_Rq: 1;
		/** Parking Lamps Right Side On Request / Parking Light On the right **/
		bool PkLmp_Rt_On_Rq: 1;
		/** Position Lamps on Request / Power Land **/
		bool PosnLmp_On_Rq: 1;
		/** Switch on Low Beam On Request / Low Light **/
		bool LoBm_On_Rq: 1;
		/** Turn on Fog Lamps Front On Request / Fog Light **/
		bool FogLmp_Ft_On_Rq: 1;
		/** FOG LAMPS REAR ON REQUEST / NUTLE FLIGHT LIGHT **/
		bool FogLmp_R_On_Rq: 1;
		/** Automatic Driving Light Activated by Light Sensor / AFL activated by light sensor **/
		bool ADL_Actv: 1;
		/** Night Security Illumination Active / Headlight Cable **/
		bool NS_Ill_Actv: 1;
	} __attribute__((packed));
	/** Gets CAN ID of LM_A1_EGS53 **/
	uint32_t get_canid(){ return LM_A1_EGS53_CAN_ID; }
} LM_A1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint64_t __PADDING1__: 48;
		/** Suspension Level Adjustment Switch LED Request / Request LED Vehicle Level Button **/
		SPC_A3_SuspLvlAdjSwLED_Rq_EGS53 SuspLvlAdjSwLED_Rq: 2;
		/** Active Damping Control Switch LED Request / Request LED Button Active Damping Control **/
		SPC_A3_ADC_SwLED_Rq_EGS53 ADC_SwLED_Rq: 2;
		/** Active Damping Control State / Status Active Damping Control **/
		bool ADC_Stat: 1;
		/** Vehicle Level Control State / Status Level Regulation **/
		bool VehLvlCtrl_Stat: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
		/** Display Error Message # 1: "Stop, Vehicle to Low" / Error 1: "Stop, car too deep" **/
		bool SPC_ErrMsg1_Disp_Rq: 1;
		/** Display Error Message # 2: "Please wait, Vehicle lifts up" (ASP), "Steering Oil" (ABC) / Error 2: "Please wait, vehicle lifts" (ASP), "Steering Oil" (ABC) **/
		bool SPC_ErrMsg2_Disp_Rq: 1;
		/** Display Error Message # 3: "Seek Service Soon" / Error 3: "Check the workshop" **/
		bool SPC_ErrMsg3_Disp_Rq: 1;
		/** Display Error Message # 4: "Shut Down Vehicle" / Error 4: "Stopping vehicle" **/
		bool SPC_ErrMsg4_Disp_Rq: 1;
		/** Display Message # 1: "Vehicle Lifts Up" / Message 1: "Vehicle Lifts" **/
		bool SPC_Msg1_Disp_Rq: 1;
		/** Display Message # 2: "Level Selection Cleared" / Message 2: "Level selection deleted" **/
		bool SPC_Msg2_Disp_Rq: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 2;
	} __attribute__((packed));
	/** Gets CAN ID of SPC_A3_EGS53 **/
	uint32_t get_canid(){ return SPC_A3_EGS53_CAN_ID; }
} SPC_A3_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_STW_ANGL_STAT: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_STW_ANGL_STAT: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** Steering Wheel Angle Sensor State / Status Steering wheel angle sensor **/
		STW_ANGL_STAT_StW_AnglSens_Stat_EGS53 StW_AnglSens_Stat: 2;
		/** Steering Wheel Angle Sensor Identification / Identification Steering wheel angle sensor **/
		STW_ANGL_STAT_StW_AnglSens_Id_EGS53 StW_AnglSens_Id: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 4;
		/** Steering Wheel Angle Speed / Steering Wheel Speed **/
		uint16_t StW_AnglSpd: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 2;
		/** Steering Wheel Angle / steering wheel angle **/
		uint16_t StW_Angl: 14;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING5__: 2;
	} __attribute__((packed));
	/** Gets CAN ID of STW_ANGL_STAT_EGS53 **/
	uint32_t get_canid(){ return STW_ANGL_STAT_EGS53_CAN_ID; }
} STW_ANGL_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_BRK_STAT: 8;
		/** Disable Assistance System / Shutdown Assistance System **/
		BRK_STAT_SPCR_AS_Dsabl_EGS53 SPCR_AS_Dsabl: 2;
		/** Assistance System Off Request / Request Assistance System **/
		BRK_STAT_SPCR_AS_Off_Rq_EGS53 SPCR_AS_Off_Rq: 2;
		/** Message Counter / Message Counter **/
		uint8_t MC_BRK_STAT: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** ESP System State / ESP system condition **/
		BRK_STAT_ESP_Sys_Stat_EGS53 ESP_Sys_Stat: 2;
		/** Starting Torque State (to Release Parking Brake) / Status Tracking Torque (for loosening parking brake) **/
		BRK_STAT_StTrq_Stat_EGS53 StTrq_Stat: 2;
		/** Stop Coordinator Exception Request / Standstill Coordinator Exception Request **/
		BRK_STAT_SPCR_Excpt_Rq_EGS53 SPCR_Excpt_Rq: 2;
		/** Vehicle Immobilized by Stop Coordinator / Standstill Coordinator has secured vehicle **/
		bool SPCR_Veh_Immo: 1;
		/** Transmission Parking Position Request / SBC request: "P" **/
		bool TxPkPosn_Rq_SBC: 1;
		/** Actual Brake Torque / set braking torque **/
		uint16_t BrkTrq: 12;
		/** Stop Coordinator Mode / Mode Standstill Coordinator **/
		BRK_STAT_SPCR_Md_V3_EGS53 SPCR_Md_V3: 4;
		/** Brake Intervention by ESP Active / ESP brake intervention active **/
		bool BrkIntrvntn_Actv_ESP: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** Brake Intervention by Assistance System Active / Assistance System Brake Intervention **/
		bool BrkIntrvntn_Actv_AS: 1;
		/** Brake Intervention by EPKB Active / EPKB brake intervention active **/
		bool BrkIntrvntn_Actv_EPKB: 1;
		/** Brake Intervention enabled / brake intervention allowed **/
		bool BrkIntrvntn_Enbl: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING3__: 1;
		/** Emergency Braking / Emergency Braking **/
		bool EmgBrk_Actv: 1;
		/** Full Braking (ABS Regulates All Wheels) / Full Braking (ABS regulates all 4 wheels) **/
		bool FullBrk_Actv: 1;
		/** Brake State / Status Brake **/
		BRK_STAT_Brk_Stat_EGS53 Brk_Stat: 2;
		/** Stop Coordinator Stop State / Status Standstill **/
		BRK_STAT_SPCR_Sp_Stat_EGS53 SPCR_Sp_Stat: 2;
		/** Brake Pedal State / Status Brake Pedal **/
		BRK_STAT_BrkPdl_Stat_EGS53 BrkPdl_Stat: 2;
		/** Parking Brake Request / parking brake request **/
		BRK_STAT_PkBrk_Rq_SBC_EGS53 PkBrk_Rq_SBC: 2;
	} __attribute__((packed));
	/** Gets CAN ID of BRK_STAT_EGS53 **/
	uint32_t get_canid(){ return BRK_STAT_EGS53_CAN_ID; }
} BRK_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint64_t __PADDING1__: 56;
		/** CGW Routing Status / CGW Routing Status **/
		CGW_STAT_CGW_Rout_Stat_EGS53 CGW_Rout_Stat: 2;
		/** Bus Faulty, permanent active / bus faulty, permanent active **/
		bool BusFlt_PrmntActv: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 5;
	} __attribute__((packed));
	/** Gets CAN ID of CGW_STAT_EGS53 **/
	uint32_t get_canid(){ return CGW_STAT_EGS53_CAN_ID; }
} CGW_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_BRK_STAT2: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_BRK_STAT2: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING2__: 16;
		/** Brake Torque Gradient Requested by Driver / Driver requested braking torque gradient **/
		uint16_t BrkTrqGrdnt_D: 12;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 4;
		/** Brake Torque Requested by Driver / Driver requested braking torque **/
		uint16_t BrkTrq_D: 12;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 4;
	} __attribute__((packed));
	/** Gets CAN ID of BRK_STAT2_EGS53 **/
	uint32_t get_canid(){ return BRK_STAT2_EGS53_CAN_ID; }
} BRK_STAT2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING1__: 32;
		/** CRC Checksum Byte 1 to 3 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 3 to SAE J1850 **/
		uint8_t CRC_SBW_RQ_SCCM: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_SBW_RQ_SCCM: 4;
		/** Transmission Selector Lever RND Position (Steering Wheel) / Gear Selection Lever RND position (steering wheel) **/
		SBW_RQ_SCCM_TSL_RND_Posn_StW_EGS53 TSL_RND_Posn_StW: 4;
		/** Transmission Selector Lever "P" Switch Actuated (Steering Wheel) / Gear Select Lever "P" **/
		SBW_RQ_SCCM_TSL_P_Psd_StW_EGS53 TSL_P_Psd_StW: 2;
		/** Transmission Selector Lever Signal Identification (Steering Wheel) / Gear Select Lever Signal ID (steering wheel) **/
		SBW_RQ_SCCM_TSL_Sgnl_Id_StW_EGS53 TSL_Sgnl_Id_StW: 2;
		/** State Steering Wheel Switch ("+", "-") / steering wheel keys "+", "-" actuated **/
		SBW_RQ_SCCM_StW_Sw_Stat3_EGS53 StW_Sw_Stat3: 3;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 3;
		/** Message Transmitter Identification / Transmitter ID **/
		SBW_RQ_SCCM_MsgTxmtId_EGS53 MsgTxmtId: 2;
	} __attribute__((packed));
	/** Gets CAN ID of SBW_RQ_SCCM_EGS53 **/
	uint32_t get_canid(){ return SBW_RQ_SCCM_EGS53_CAN_ID; }
} SBW_RQ_SCCM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_EPKB_STAT: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_EPKB_STAT: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING2__: 16;
		/** Turn on Brake Light on Request / Brake light **/
		EPKB_STAT_BrkLgt_On_Rq_EGS53 BrkLgt_On_Rq: 2;
		/** Transmission Parking Position Request / EPKB request: "P" **/
		EPKB_STAT_TxPkPosn_Rq_EPKB_EGS53 TxPkPosn_Rq_EPKB: 2;
		/** Battery Coupling Switch Request / Request Battery Coupling Switch **/
		EPKB_STAT_BatCplSw_Rq_EPKB_EGS53 BatCplSw_Rq_EPKB: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 2;
		/** Brake torque request / requested by EPKB braking torque **/
		uint16_t BrkTrq_Rq_EPKB: 12;
		/** Dynamic Braking Fashion / Mode Dynamic Brakes **/
		EPKB_STAT_DynBrkMd_EGS53 DynBrkMd: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING4__: 1;
		/** Enable SBC Request / SBC request allowed **/
		bool SBC_Enbl_Rq_EPKB: 1;
		/** Parking brake state / status parking brake **/
		EPKB_STAT_PkBrk_Stat_EGS53 PkBrk_Stat: 3;
		/** Electrical Parking Brake System State / Status EPKB **/
		EPKB_STAT_EPkBrk_Stat_EGS53 EPkBrk_Stat: 3;
		/** Parking brake switch state / parking brake switch status **/
		EPKB_STAT_PkBrkSw_Stat_EGS53 PkBrkSw_Stat: 2;
	} __attribute__((packed));
	/** Gets CAN ID of EPKB_STAT_EGS53 **/
	uint32_t get_canid(){ return EPKB_STAT_EGS53_CAN_ID; }
} EPKB_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_HVAC_RS1: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_HVAC_RS1: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** Heating Power Front Request / Request Heating Power Front **/
		uint8_t HtPwr_Ft_Rq: 8;
		/** Outside Air Temperature for Heating Management / Outdoor air temperature for thermal management **/
		uint8_t AirTemp_Outsd_HtMgt: 8;
		/** Engine Fan RPM Request / Motor Heater Setpoint Speed **/
		uint8_t EngFanRPM_Rq_HVAC: 8;
		/** Actual Front Aircon Compressor Crackish Torque / Climate Compressor Tour For Front **/
		uint8_t HVAC_CompTrq_Ft: 8;
		/** Transmission Shift Point Increase Request for Thermal Comfort (Cooling) / Raising of the gear switching point for climate domestic enhancement (cooling) **/
		bool HVAC_TxShftPoint_Inc_Rq: 1;
		/** Transmission Shift Point Increase Request for Thermal Comfort (Heating) / Raise of the gear switching point for climate summary increase (heating) **/
		bool HVAC_TxShftPointHt_Inc_Rq: 1;
		/** STOP / START AUTOMATIC Engine Start Request / ASS Motorstart Request **/
		bool SSA_EngSt_Rq_HVAC: 1;
		/** ENABLE STOP / START AUTOMATIC REQUEST / ASS ENABLE **/
		bool SSA_Enbl_Rq_HVAC: 1;
		/** HVAC Enable Recuperation Request / Recuperation enable **/
		bool HVAC_Recup_Enbl_Rq: 1;
		/** Engine Idle Speed ​​Increase Request / Idle Speed ​​Lifting to Cooling Elevation **/
		bool HVAC_EngIdleRPM_Inc_Rq: 1;
		/** Auxiliary Heater Enabled / Switch on **/
		bool HVAC_AuxHt_Enbl: 1;
		/** Aircon Compressor Front On / Climate Compressor for Front On **/
		bool HVAC_Comp_Ft_On: 1;
	} __attribute__((packed));
	/** Gets CAN ID of HVAC_RS1_EGS53 **/
	uint32_t get_canid(){ return HVAC_RS1_EGS53_CAN_ID; }
} HVAC_RS1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_TX_RQ_SBC: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_TX_RQ_SBC: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** Requested maximum transmission ratio (CVT) / target gear, upper limit (CVT) **/
		uint8_t TxRatioMax_Rq_SBC: 8;
		/** Requested minimum transmission ratio (CVT) / target speed, lower limit (CVT) **/
		uint8_t TxRatioMin_Rq_SBC: 8;
		/** Request neutral gear by SBC / SBC request: "Neutral" **/
		TX_RQ_SBC_GrN_Rq_SBC_EGS53 GrN_Rq_SBC: 2;
		/** No gear "N" request (only for AMT during SBC additional value active) / SBC-S / H active ASG must not switch to "N" **/
		bool NoGrN_Rq: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 5;
		/** Shift characteristic displacement request / demand shift line shift **/
		TX_RQ_SBC_ShftChrDsp_Rq_SBC_EGS53 ShftChrDsp_Rq_SBC: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 2;
		/** Active downshift / Active downshift **/
		bool ActvDnShift_Rq_SBC: 1;
		/** Suppression of dynamic full load downshift request / suppression dynamic Vollastrückschaltung **/
		bool DynFLDS_Supp_Rq_SBC: 1;
		/** Requested gear, lower limit / target gear, lower limit **/
		TX_RQ_SBC_GrMin_Rq_SBC_EGS53 GrMin_Rq_SBC: 3;
		/** Requested gear, upper limit / target gear, upper limit **/
		TX_RQ_SBC_GrMax_Rq_SBC_EGS53 GrMax_Rq_SBC: 3;
		/** Gear limit request from DTR / nominal gear requirement of DTR **/
		bool GrMinMax_Rq_DTR: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING5__: 1;
	} __attribute__((packed));
	/** Gets CAN ID of TX_RQ_SBC_EGS53 **/
	uint32_t get_canid(){ return TX_RQ_SBC_EGS53_CAN_ID; }
} TX_RQ_SBC_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RS3_PT: 8;
		/** Engine Running State / Status Engine Circulation **/
		ENG_RS3_PT_EngRun_Stat_EGS53 EngRun_Stat: 3;
		/** Accelerator Pedal Position Sensor Fault / Error pedal value transmitter **/
		bool AccelPdlPosnSens_Flt: 1;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RS3_PT: 4;
		/** Actual Generator Load / Generator utilization **/
		uint8_t GenLoad: 6;
		/** Additional Power Consumers on Request / Request Additional power consumers **/
		bool AddPwrCnsmr_On_Rq: 1;
		/** Terminal 61 Active / Clamp 61 active **/
		bool Term61_Actv: 1;
		/** Accelerator Pedal Position Raw Value / Pedal Value Driver **/
		uint8_t AccelPdlPosn_Raw: 8;
		/** Accelerator Pedal Position / Pedal Value **/
		uint8_t AccelPdlPosn: 8;
		/** Correction Factor of Maximum Engine Torque Depending On Falling Atmospheric Pressure / Factor for Abwert.d.Max. Mom. At Aufneh.A.Print **/
		uint8_t EngTrqMaxCorrFctr: 8;
		/** Actual Engine RPM / engine speed **/
		uint16_t EngRPM: 14;
		/** Proheating State / Preheating Status **/
		bool PreHt_Stat: 1;
		/** KICKDOWN SWITCH PRESSED / KICKDOWN OPERATED **/
		bool KickDnSw_Psd: 1;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RS3_PT_EGS53 **/
	uint32_t get_canid(){ return ENG_RS3_PT_EGS53_CAN_ID; }
} ENG_RS3_PT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RS2_PT: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RS2_PT: 4;
		/** Actual Mimimum Engine Torque Including Trailing Throttle Component / Motor Torque Minimal including thrust **/
		uint16_t EngTrqMinTTC: 13;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** Partly Overrun Fuel Cutoff Active / Part Number Shutdown **/
		bool PartOFC_Actv: 1;
		/** Fully Overrun Fuel Cutoff Active / push shutdown full **/
		bool FullOFC_Actv: 1;
		/** ACTUAL Maximum Engine Torque Including Dynamic Exhaust Turbocharger Torque / Maximum Moment Burner with Exhaust Turbocharger **/
		uint16_t EngTrqMaxETC: 13;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 3;
		/** Actual Static Engine Torque / Motor Tour Static **/
		uint16_t EngTrqStatic: 13;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 3;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RS2_PT_EGS53 **/
	uint32_t get_canid(){ return ENG_RS2_PT_EGS53_CAN_ID; }
} ENG_RS2_PT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_TX_RQ_ECM: 8;
		/** Engine RPM Sensor in LIMP-Home Operation Fashion / engine speed sensor in emergency operation **/
		bool EngRPM_Sens_LHOM: 1;
		/** Engine Exhaust-Gas Aftertreatment Active (Diesel) / Engine Exhaust Aftertreatment Active (Diesel) **/
		bool EngExhstAfterTreat_Actv: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Engine Control Modules in Limp-Home Operation Fashion / ECM in emergency operation **/
		bool ECM_LHOM: 1;
		/** Message Counter / Message Counter **/
		uint8_t MC_TX_RQ_ECM: 4;
		/** Transmission Slip RPM Request / Request Slip speed. **/
		uint16_t TxSlpRPM_Rq_ECM: 14;
		/** Torque Converter Lockup Clutch Request / Kueb setpoint open / slipping **/
		TX_RQ_ECM_TCC_Rq_EGS53 TCC_Rq: 2;
		/** Requested Maximum Transmission Ratio (CVT) / Target Translation, Upper Border (CVT) **/
		uint8_t TxRatioMax_Rq_ECM: 8;
		/** Requested Minimum Transmission Ratio (CVT) / Target Translation, Lower Border (CVT) **/
		uint8_t TxRatioMin_Rq_ECM: 8;
		/** Shift Characteristic Displacement Request / Request Switching Shift **/
		TX_RQ_ECM_ShftChrDsp_Rq_EGS53 ShftChrDsp_Rq: 4;
		/** Request Driveaway with 1st Gear by ECM / MS-Wish: "Attraction 1st gear" **/
		bool Gr1_Rq_ECM: 1;
		/** Creep Mode Off Request / Crawl Off **/
		bool Creep_Off_Rq: 1;
		/** STOP / START AUTOMATIC PRE-WARNING ENGINE STOP / ASS Pre-warning engine stop **/
		bool SSA_Sp_Warn: 1;
		/** STOP / START AUTOMATIC HAS Engine Stopped / ass MotorStop, 1 = Stop, 0 = normal operation **/
		bool SSA_EngSp: 1;
		/** Requested Gear, Lower Limit / Sprocket, Lower Border **/
		TX_RQ_ECM_GrMin_Rq_ECM_EGS53 GrMin_Rq_ECM: 3;
		/** Requested Gear, Upper Limit / Sprocket, Upper Border **/
		TX_RQ_ECM_GrMax_Rq_ECM_EGS53 GrMax_Rq_ECM: 3;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
	} __attribute__((packed));
	/** Gets CAN ID of TX_RQ_ECM_EGS53 **/
	uint32_t get_canid(){ return TX_RQ_ECM_EGS53_CAN_ID; }
} TX_RQ_ECM_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_ENG_RS1_PT: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_ENG_RS1_PT: 4;
		/** Selected Torque by SBC Including Trailing Throttle Component / Preset Tame SBC including thrust **/
		uint16_t EngTrqSel_SBC_TTC: 13;
		/** Enable Engine Torque Request / Enable Tomentic Request TCM **/
		bool EngTrq_Enbl_Rq_TCM: 1;
		/** Engine Torque Request AcknowledgeGement / acknowledgment Torque requirement **/
		bool EngTrq_Ack_ECM: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** Selected Torque By AS Including Trailing Throttle Component / Property Toment AS including thrust **/
		uint16_t EngTrqSel_AS_TTC: 13;
		/** Enable Engine Torque Request / Enable Torque Requirement SBC **/
		bool EngTrq_Enbl_Rq_SBC: 1;
		/** Enable Fast Engine Torque Adjustment / Enable Fast torque setting **/
		bool EngTrqAdjFast_Enbl: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING3__: 1;
		/** Selected Torque by Driver Including Trailing Throttle Component / Preset Tame Driver including Schubrank **/
		uint16_t EngTrqSel_D_TTC: 13;
		/** Enable Engine Torque Request / Enable Torque Request AS **/
		bool EngTrq_Enbl_Rq_AS: 1;
		/** Engine Control Module Has Cruise Control Encoded / SerentemPomat is Variant Coded **/
		bool CC_Encode_ECM: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING4__: 1;
	} __attribute__((packed));
	/** Gets CAN ID of ENG_RS1_PT_EGS53 **/
	uint32_t get_canid(){ return ENG_RS1_PT_EGS53_CAN_ID; }
} ENG_RS1_PT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint64_t __PADDING1__: 56;
		/** Decentral Power Management Fashion Limit Request / Mode Handle Decentralized Power Management **/
		DPM_STAT_DPM_MdLmt_Rq_EGS53 DPM_MdLmt_Rq: 2;
		/** Decentral Power Management External Fashion Enable Request / Release External Fashion by Decentralized Power Management **/
		DPM_STAT_DPM_ExtMd_Enbl_Rq_EGS53 DPM_ExtMd_Enbl_Rq: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 4;
	} __attribute__((packed));
	/** Gets CAN ID of DPM_STAT_EGS53 **/
	uint32_t get_canid(){ return DPM_STAT_EGS53_CAN_ID; }
} DPM_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_WHL_STAT1: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_WHL_STAT1: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING2__: 16;
		/** Wheel Pulse Counter Rear Right (96 by rotation) / pulse ring counter wheel rear right (96 per revolution) **/
		uint8_t WhlPlsCnt_RR: 8;
		/** Wheel Pulse Counter Rear Left (96 by rotation) / pulse ring counter wheel rear left (96 per revolution) **/
		uint8_t WhlPlsCnt_RL: 8;
		/** Wheel Pulse Counter Front Right (96 Per Rotation) / Pulse Ring Counter Wheel Front Right (96 per Revolution) **/
		uint8_t WhlPlsCnt_FR: 8;
		/** Wheel Pulse Counter Front Left (96 by rotation) / pulse ring counter wheel front left (96 per revolution) **/
		uint8_t WhlPlsCnt_FL: 8;
	} __attribute__((packed));
	/** Gets CAN ID of WHL_STAT1_EGS53 **/
	uint32_t get_canid(){ return WHL_STAT1_EGS53_CAN_ID; }
} WHL_STAT1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Wheel RPM Rear Right / Rear Rear Right Right **/
		uint16_t WhlRPM_RR: 14;
		/** DIRECTION OF ROTATION OF REAR RIGHT Wheel / direction of rotation Wheel rear right **/
		WHL_STAT2_WhlDir_RR_Stat_EGS53 WhlDir_RR_Stat: 2;
		/** Wheel RPM REAR Left / wheel speed rear left **/
		uint16_t WhlRPM_RL: 14;
		/** DIRECTION OF ROTATION OF REAR LEFT Wheel / direction of rotation Wheel rear left **/
		WHL_STAT2_WhlDir_RL_Stat_EGS53 WhlDir_RL_Stat: 2;
		/** Wheel RPM Front Right / wheel speed front right **/
		uint16_t WhlRPM_FR: 14;
		/** DIRECTION OF ROTATION OF FRONT RIGHT Wheel / direction of rotation Wheel front right **/
		WHL_STAT2_WhlDir_FR_Stat_EGS53 WhlDir_FR_Stat: 2;
		/** Wheel RPM Front Left / Wheel Speed Front Left **/
		uint16_t WhlRPM_FL: 14;
		/** DIRECTION OF ROTATION OF FRONT LEFT Wheel / direction of rotation Wheel front left **/
		WHL_STAT2_WhlDir_FL_Stat_EGS53 WhlDir_FL_Stat: 2;
	} __attribute__((packed));
	/** Gets CAN ID of WHL_STAT2_EGS53 **/
	uint32_t get_canid(){ return WHL_STAT2_EGS53_CAN_ID; }
} WHL_STAT2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** LIMP-HOME Cutoff Trunk Socket / Cigarette Lighter Request / Emergency Shot Coffee Socket / Cigar Lighter **/
		bool LHC_TrkSock_Rq: 1;
		/** LIMP-Home Cutoff Comfort Lamps Request / Notification for Comfort Lamps **/
		bool LHC_ComfLmp_Rq: 1;
		/** LIMP-Home Cutoff Residual Heat Utilization Request / Notification Residual heat use **/
		bool LHC_RHU_Rq: 1;
		/** LIMP-HOME Cutoff Independant Car Heater Request / Emergency shutdown **/
		bool LHC_ICH_Rq: 1;
		/** LIMP-Home Cutoff Taxi RoofSign / Printer Request / Emergency Shot TaxidAchach **/
		bool PN14_LHC_Taxi_Rq: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 3;
		/** LIMP-HOME Cutoff Wiper Park Position Heater Request / Emergency Shuttle Wiper Dashing **/
		bool LHC_WprPkHt_Rq: 1;
		/** LIMP-Home Cutoff Electric Backlite Heater Request / Emergency Shot Rear Disc Heating **/
		bool LHC_EBL_Rq: 1;
		/** LIMP-HOME Cutoff Steering Wheel Heater Request / Emergency Shot Steering Wheeling **/
		bool LHC_StW_Ht_Rq: 1;
		/** LIMP-Home Cutoff Windshield Heater Request / Emergency Shutters Windscreen Heating **/
		bool LHC_WShHt_Rq: 1;
		/** LIMP-Home Cutoff Mirror Heater Request / emergency shutdown Exterior mirror heating **/
		bool LHC_MirrHt_Rq: 1;
		/** LIMP-Home Cutoff Rear Cooler Box Request / Emergency Shot Fund Cooler **/
		bool LHC_CoolBox_R_Rq: 1;
		/** LIMP-Home Cutoff Engine Fan to 50% Request / Emergency Shot Engineer Fan to 50% **/
		bool LHC_EngFan_50_Rq: 1;
		/** LIMP-Home Cutoff Fog Lamps Front Request / Emergency Shot Fog Light **/
		bool LHC_FogLmp_Ft_Rq: 1;
		/** LIMP-Home Cutoff Door Surface Heating Stage 2 Request / Emergency Shot Door surface heating Level 2 **/
		bool LHC_DSH_Stg2_Rq: 1;
		/** LIMP-Home Cutoff Door Surface Heating Stage 1 Request / Emergency Shot Door surface heating Level 1 **/
		bool LHC_DSH_Stg1_Rq: 1;
		/** LIMP-Home Cutoff Seat Heating Stage 3 Request / Emergency Shot Seat Heating Level 3 **/
		bool LHC_SeatHtStg3_Rq: 1;
		/** LIMP-Home Cutoff Seat Heating Stage 2 Request / Emergency Shot Seat Heating Level 2 **/
		bool LHC_SeatHtStg2_Rq: 1;
		/** LIMP-Home Cutoff Seat Heating Stage 1 Request / Emergency Shot Seat Heating Level 1 **/
		bool LHC_SeatHtStg1_Rq: 1;
		/** LIMP-Home Cutoff Seat Ventilation Request / Emergency Shot Seat Ventilation **/
		bool LHC_SeatVn_Rq: 1;
		/** LIMP-Home Cutoff Telematics / Audio / Phone / GPS Request / Notification Telematics / Audio / Phone / GPS **/
		bool LHC_Tlm_Rq: 1;
		/** LIMP-Home Cutoff Trailer Socket Request / Emergency Shot Towers **/
		bool LHC_TrlrSock_Rq: 1;
		/** LIMP-Home Cutoff PTC 6th Branch Request / Notification PTC 6. Branch **/
		bool LHC_PTC6_Rq: 1;
		/** LIMP-Home Cutoff PTC 5th Branch Request / Notification PTC 5. Branch **/
		bool LHC_PTC5_Rq: 1;
		/** LIMP-Home Cutoff PTC 4th Branch Request / Notification PTC 4. Branch **/
		bool LHC_PTC4_Rq: 1;
		/** LIMP-Home Cutoff PTC 3rd Branch Request / Notification PTC 3. Branch **/
		bool LHC_PTC3_Rq: 1;
		/** LIMP-Home Cutoff PTC 2nd Branch Request / Notification PTC 2. Branch **/
		bool LHC_PTC2_Rq: 1;
		/** LIMP-HOME Cutoff PTC 1st Branch Request / Notification PTC 1. Branch **/
		bool LHC_PTC1_Rq: 1;
		/** LIMP-HOME Cutoff Rear Interior Fan to 50% Request / Emergency Shot Inner fan back to 50% **/
		bool LHC_IntFan_R_50_Rq: 1;
		/** LIMP-HOME Cutoff Front Interior Fan to 50% Request / Emergency Shot In front to 50% **/
		bool LHC_IntFan_F_50_Rq: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 7;
		/** 14 V PowerNet Limp-Home Cutoff Active / 14V-BN emergency shutdown active **/
		bool PN14_LHC_Actv: 1;
		/** Supply Battery Cutoff Switch State / Status Battery Separation Switch **/
		PN14_STAT_PN14_SupBatCutSw_Stat_EGS53 PN14_SupBatCutSw_Stat: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 6;
		/** Supply Battery Voltage / Supply Battery IST voltage **/
		uint8_t PN14_SupBat_Volt: 8;
		/** Battery Coupling Switch State / State Battery Coupling Switch **/
		PN14_STAT_PN14_BatCplSw_Stat_EGS53 PN14_BatCplSw_Stat: 2;
		/** Backup Battery Fault / Backup Battery faulty **/
		bool PN14_BackupBat_Flt: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING4__: 1;
		/** Remote Functions Permission / Remote Control Functions allowed **/
		bool PN14_RemPerm: 1;
		/** Reversible Belt Tensioner Off Request / GurtStraffer Turn off **/
		bool PN14_RevBltTns_Off_Rq: 1;
		/** SBC Additional Value Off Request / SBC Added value **/
		bool PN14_SBC_Add_Off_Rq: 1;
		/** Stop Coordinator Afterrun Function Available / Navail Function Standstill Coordinator available **/
		bool PN14_SPCR_AfterRun_Avl: 1;
	} __attribute__((packed));
	/** Gets CAN ID of PN14_STAT_EGS53 **/
	uint32_t get_canid(){ return PN14_STAT_EGS53_CAN_ID; }
} PN14_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850 **/
		uint8_t CRC_CVI: 8;
		/** HVAC style / KLA variant **/
		CVI_HVACStyle_EGS53 HVACStyle: 2;
		/** Vehicle options package / vehicle equipment package **/
		CVI_VehOPTPack_EGS53 VehOPTPack: 2;
		/** Complete substitution lights enabled / Complete replacement light allowed **/
		bool Cplt_SL_Enbl: 1;
		/** Vehicle roof style / roof version **/
		CVI_RoofStyle_EGS53 RoofStyle: 3;
		/** Transmission Control available / transmission control available **/
		bool TCM_Avl: 1;
		/** Air Condition available / KLA available **/
		bool HVAC_Avl: 1;
		/** Trailer Hitch available / trailer coupling available **/
		bool TrlrHtch_Avl: 1;
		/** Vehicle theft alarm available / EDW available **/
		bool VTA_Avl: 1;
		/** Passenger compartment detection available / interior protection available **/
		bool PCD_Avl: 1;
		/** Independent car heater available / heater available **/
		bool ICH_Avl: 1;
		/** Light sensor available / light sensor available **/
		bool LgtSens_Avl: 1;
		/** Rain sensor available / rain sensor available **/
		bool RainSens_Avl: 1;
		/** Engine (Bit 7: Otto-engine => 0, diesel engine => 1) / motor (Bit 7: gasoline => 0, Diesel => 1) **/
		CVI_EngStyle_EGS53 EngStyle: 8;
		/** Vehicle body style / body variant **/
		CVI_BodyStyle_EGS53 BodyStyle: 5;
		/** Steering variant / Steering variant **/
		CVI_StStyle_EGS53 StStyle: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Vehicle line version: package / change Year: Package **/
		CVI_VehLinePack_EGS53 VehLinePack: 2;
		/** Vehicle line version: year / year change: Year **/
		CVI_VehLineYear_EGS53 VehLineYear: 5;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING2__: 1;
		/** Vehicle line / Series **/
		CVI_VehLine_EGS53 VehLine: 6;
		/** Guard level / Guard Level **/
		CVI_Guard_EGS53 Guard: 2;
		/** DC group / DC group **/
		CVI_Group_EGS53 Group: 4;
		/** Country code / country code **/
		CVI_Country_EGS53 Country: 4;
	} __attribute__((packed));
	/** Gets CAN ID of CVI_EGS53 **/
	uint32_t get_canid(){ return CVI_EGS53_CAN_ID; }
} CVI_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Offset of Vehicle Lateral Acceleration (+ Means Left) / Offset of vehicle cross-acceleration in focus (+ = left) **/
		uint8_t VehAccel_Y_Offset: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 4;
		/** Message Counter / Message Counter **/
		uint8_t MC_VEH_DYN_STAT: 4;
		/** Vehicle Lateral Acceleration (+ Means LEFT, Specific to Center of Gravity, Offset Corrected) / Vehicle Cross Acceleration in Focus (+ = Left, Focus-related, Offset Corrected) **/
		uint8_t VehAccel_Y: 8;
		/** Vehicle Longitudinal Acceleration (+ Means Forward) / vehicle longitudinal acceleration (+ = forward) **/
		uint8_t VehAccel_X: 8;
		/** Offset of Vehicle Longitudinal Acceleration (+ Means Forward) / Offset of vehicle longitudinal acceleration (+ = forward) **/
		uint8_t VehAccel_X_Offset: 8;
		/** Offset of Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means LEFT) / Offset of the Raw Signal Greeding rate without reconciliation / filtering (+ = left) **/
		uint8_t VehYawRateOffset: 8;
		/** Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means Left) / Rohsignal Gierrate Without Calculation / Filtering (+ = Left) **/
		uint16_t VehYawRate_Raw: 16;
	} __attribute__((packed));
	/** Gets CAN ID of VEH_DYN_STAT_EGS53 **/
	uint32_t get_canid(){ return VEH_DYN_STAT_EGS53_CAN_ID; }
} VEH_DYN_STAT_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Outside Air Temperature / Outdoor Air Temperature **/
		uint8_t AirTemp_Outsd: 8;
		/** BUCKLE SWITCH REAR LEFT STATE (by SAM_R) / Status Curtle Rear Left **/
		BODY_R1_Bckl_Sw_RL_Stat_SAM_R_EGS53 Bckl_Sw_RL_Stat_SAM_R: 2;
		/** BUCKLE SWITCH REAR RIGHT STATE (by SAM_R) / status Belt lock right **/
		BODY_R1_Bckl_Sw_RR_Stat_SAM_R_EGS53 Bckl_Sw_RR_Stat_SAM_R: 2;
		/** BUCKLE SWITCH REAR MIDDLE STATE (by SAM_R) / Status Belt Slip Rear Center **/
		BODY_R1_Bckl_Sw_RM_Stat_SAM_R_EGS53 Bckl_Sw_RM_Stat_SAM_R: 2;
		/** Steering Wheel Conditioning State / Status Steering Cool Climatization **/
		BODY_R1_StW_Cond_Stat_EGS53 StW_Cond_Stat: 2;
		/** Inside Air Temperature / Inn temperature **/
		uint8_t AirTemp_Insd: 8;
		/** Switch on Low Beam On Request / Low Light **/
		bool LoBm_On_Rq: 1;
		/** High beam is on / high beam is switched on **/
		bool HiBm_On: 1;
		/** Infrared Lamp Driver Side Or Right (Depending On Vehicle Line) Fault / IR headlight driver's side or left (depending on the series) defective **/
		bool IrLmp_D_Lt_Flt: 1;
		/** Infrared Lamp Passenger Side Or Right (Depending On Vehicle Line) Fault / IR headlight passenger side or right (depending on the series) defective **/
		bool IrLmp_P_Rt_Flt: 1;
		/** Low Beam Driver Side Or Left (Depending On Vehicle Line) Fault / Dimensioned Driver's side or left (depending on the series) defective **/
		bool LoBm_D_Lt_Flt: 1;
		/** Low Beam Passenger Side Or Right (Depending On Vehicle Line) Fault / Downlight passenger side or right (depending on the series) defective **/
		bool LoBm_P_Rt_Flt: 1;
		/** Reverse Gear Engaged / reverse input **/
		BODY_R1_RevGr_Engg_EGS53 RevGr_Engg: 2;
		/** trailer detected / trailer operation detected **/
		BODY_R1_Trlr_Stat_EGS53 Trlr_Stat: 2;
		/** Horn is on / signal horn is switched on **/
		bool Hrn_On: 1;
		/** Terminal 54 (Brake Light) Active (FROM SAM_R) / Terminal 54 (Brake light) Feedback from SAM_R **/
		bool Term54_Actv: 1;
		/** Mech. Parking Brake State / Status Mech. Parking brake **/
		bool MPkBrk_Stat: 1;
		/** Wiper Outside Park Position / Wiper Outside Parking **/
		bool WprOutsdPkPosn: 1;
		/** Tire in Limp-Home Operation Fashion / Mature Need **/
		bool Tire_LHOM: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING1__: 1;
		/** Twilight State Light Sensor / Twilight Light Sensor **/
		uint8_t LgtSens_Twlgt: 3;
		/** Light Sensor Information Not available / Values ​​of light sensor not available **/
		bool LgtSens_SNA: 1;
		/** Light sensor "Tunnel" Detected / Light Sensor: Tunnel detected **/
		bool LgtSens_Tunnel: 1;
		/** Light Sensor Fault / Light Sensor Defective **/
		bool LgtSens_Flt: 1;
		/** Light Sensor Detect's Night Fashion / Light Sensor Actual value **/
		bool LgtSens_Night: 1;
		/** Low Beam On Request by Automatic Driving Light / AFL Request: Switch on low beam **/
		bool ADL_LoBm_On_Rq: 1;
		/** Deck Lid Rotary Latch State / Status Swivel Fall Tail Cover **/
		BODY_R1_DL_RLtch_Stat_EGS53 DL_RLtch_Stat: 2;
		/** Engine Hood State / Status Bonnet **/
		BODY_R1_EngHd_Stat_EGS53 EngHd_Stat: 2;
		/** Independent Car Heater / Ventilation Active / Stand heater / ventilation active **/
		bool ICH_HtVn_Actv: 1;
		/** Alarm Activated by Vehicle Theft Alarm / EDW alarm triggered **/
		bool VTA_Alm_Actv: 1;
		/** Emergency Flasher on Request / Warning Blink Light **/
		BODY_R1_EF_On_Rq_EGS53 EF_On_Rq: 2;
		/** Rotary Latch Door Front Left State / Status Swivel Fall Door Front Left **/
		BODY_R1_DrRLtch_FL_Stat_EGS53 DrRLtch_FL_Stat: 2;
		/** Rotary Latch Door Front Right State / Status Swivel Fall Door Front Right **/
		BODY_R1_DrRLtch_FR_Stat_EGS53 DrRLtch_FR_Stat: 2;
		/** Rotary Latch Door Rear Left State / Status Swivel Fall Door Rear Left **/
		BODY_R1_DrRLtch_RL_Stat_EGS53 DrRLtch_RL_Stat: 2;
		/** Rotary Latch Door Rear Right State / Status Swivel Fall Door Rear Right **/
		BODY_R1_DrRLtch_RR_Stat_EGS53 DrRLtch_RR_Stat: 2;
	} __attribute__((packed));
	/** Gets CAN ID of BODY_R1_EGS53 **/
	uint32_t get_canid(){ return BODY_R1_EGS53_CAN_ID; }
} BODY_R1_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Off Road Switch Pressed / Off Road Button **/
		BODY_R2_OffRoadSw_Psd_EGS53 OffRoadSw_Psd: 2;
		/** Active Damping Control Switch Pressed / Button Active Damping Control **/
		BODY_R2_ADC_Sw_Psd_CTRL_L_EGS53 ADC_Sw_Psd_CTRL_L: 2;
		/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock **/
		BODY_R2_SuspLvlAdjSw_Psd_CTRL_L_EGS53 SuspLvlAdjSw_Psd_CTRL_L: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 2;
		/** Active Damping Control Switch Pressed / Button Active Damping Control **/
		BODY_R2_ADC_Sw_Psd_EGS53 ADC_Sw_Psd: 2;
		/** Phone Call OR Speech Dialogue System Active / Telephone Disconnection or Language Conditioning System **/
		BODY_R2_Phonecall_SDS_Actv_EGS53 Phonecall_SDS_Actv: 2;
		/** Telematics Switches pressed / telematics switch operated **/
		BODY_R2_Tlm_Sw_Psd_EGS53 Tlm_Sw_Psd: 2;
		/** Downhill Speed ​​Regulation Switch Pressed / Downhave Speed ​​Control Button **/
		BODY_R2_DSR_Sw_Psd_EGS53 DSR_Sw_Psd: 2;
		/** Rotary Light Switch Initialization Avive / LDS Initialization **/
		bool RLS_Init_Actv: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 3;
		/** BSM Warn Unit Left State / Status BSM Warning Unit Links **/
		BODY_R2_BSM_WarnUnit_Lt_Stat_EGS53 BSM_WarnUnit_Lt_Stat: 2;
		/** BSM War Unit Right State / Status BSM Warning Unit right **/
		BODY_R2_BSM_WarnUnit_Rt_Stat_EGS53 BSM_WarnUnit_Rt_Stat: 2;
		/** Rotary Light Switch on "Automatic" position / LDS contact autom.speed light **/
		bool RLS_AutoPosn: 1;
		/** Rotary Light Switch on "Parking Lamps Right" position / LDS contact parking light right **/
		bool RLS_PkLmp_Posn_Rt: 1;
		/** Rotary Light Switch On "Parking Lamps Left" Position / LDS Contact Parking Left **/
		bool RLS_PkLmp_Posn_Lt: 1;
		/** Rotary Light Switch On "Low Beam" Position / LDS Contact Driving Light **/
		bool RLS_LoBm_Posn: 1;
		/** Rotary Light Switch Redundancy / LDS Contact Redundancy **/
		bool RLS_Red: 1;
		/** Rotary Light Switch On "Fog Lamps Front" Position / LDS Contact Fog Light **/
		bool RLS_FogLmp_Ft_Posn: 1;
		/** Rotary Light Switch On "Fog Lamps Rear" Position / LDS Contact Fog Light Light **/
		bool RLS_FogLmp_R_Posn: 1;
		/** Rotary Light Switch On "Position LAMPS" position / LDS contact parking light **/
		bool RLS_PosnLmp_Posn: 1;
		/** Parking Assistance Switch Pressed / Parking Assist Taster **/
		BODY_R2_PKAS_Sw_Psd_EGS53 PKAS_Sw_Psd: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 3;
		/** Transmission Active (Data / Voice) / Transmission Active (Data / Language) **/
		bool TX_Actv: 1;
		/** Deck Lid Switch Pushed / Tail Cover Button **/
		bool DL_Sw_Psd: 1;
		/** Indication Lamp On Request, Coolant Level Too Low / Cooler Spring To Switch on to low control lamp **/
		bool CoolIndLmp_On_Rq: 1;
		/** Electronic Stability Program Switch Pressed / ESP Button **/
		BODY_R2_ESP_Sw_Psd_EGS53 ESP_Sw_Psd: 2;
		/** NightView Switch Pressed / NightView Button **/
		BODY_R2_NV_Sw_Psd_EGS53 NV_Sw_Psd: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING5__: 2;
		/** Switch Parktronic / City Assistant Pressed / Button Parktronic / CAS Actuated **/
		BODY_R2_PTS_Sw_Psd_EGS53 PTS_Sw_Psd: 2;
		/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock **/
		BODY_R2_SuspLvlAdjSw_Psd_EGS53 SuspLvlAdjSw_Psd: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING6__: 2;
		/** Steering Wheel Conditioning Active / steering wheel climatization active **/
		BODY_R2_StW_Cond_Actv_EGS53 StW_Cond_Actv: 2;
		/** Vehicle Driving Program Switch Pressed / Button Driving Program **/
		BODY_R2_VehDrvProgSw_Psd_EGS53 VehDrvProgSw_Psd: 2;
	} __attribute__((packed));
	/** Gets CAN ID of BODY_R2_EGS53 **/
	uint32_t get_canid(){ return BODY_R2_EGS53_CAN_ID; }
} BODY_R2_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING1__: 32;
		/** Conditions for warm-up fulfilled / conditions for warm-up fulfilled **/
		bool OBD_WarmupCond_Actv: 1;
		/** Conditions for General Denominator (RBM) State / Status Conditions for General Denominator (RBM) **/
		ECM_OBD_OBD_GnrlDenCond_Stat_EGS53 OBD_GnrlDenCond_Stat: 2;
		/** Conditions for Ignition Cycle Counter (RBM) State / Status Conditions for Ignition Cycle Counter (RBM) **/
		ECM_OBD_OBD_IgnCycCntCond_Stat_EGS53 OBD_IgnCycCntCond_Stat: 2;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 3;
		/** Outside Air Temperature Sensor Fault / Error Outdoor Air Temperature Sensor **/
		bool AirTemp_Outsd_Sens_Flt: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING3__: 7;
		/** Engine Load / Motorload **/
		uint8_t EngLoad_OBD: 8;
		/** Accelerator Pedal Position / Pedal Value **/
		uint8_t AccelPdlPosn_OBD: 8;
	} __attribute__((packed));
	/** Gets CAN ID of ECM_OBD_EGS53 **/
	uint32_t get_canid(){ return ECM_OBD_EGS53_CAN_ID; }
} ECM_OBD_EGS53;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Network Identification No./netzwerk-id **/
		NM_ECM_Nw_Id_EGS53 Nw_Id: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING1__: 8;
		/** Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest **/
		uint8_t WakeupCnt: 8;
		/** Wakeup Reason / Wake-up **/
		NM_ECM_WakeupRsn_ECM_EGS53 WakeupRsn_ECM: 8;
		/** Network Management UserData Service No./netzmanagement UserData service **/
		NM_ECM_NM_Ud_Srv_EGS53 NM_Ud_Srv: 8;
		/** Network Management UserData Launch Type / Network Management UserData Sendart **/
		NM_ECM_NM_Ud_Launch_EGS53 NM_Ud_Launch: 6;
		/** Network Management Sleep Acknowledge / Network Management Sleep Acknowledge **/
		bool NM_Sleep_Ack: 1;
		/** Network Management Sleep Indication / Network Management Sleep Indication **/
		bool NM_Sleep_Ind: 1;
		/** Network Management Logical Successor / Network Management Logical Successor **/
		uint8_t NM_Successor: 8;
		/** Network Management Mode / Network Management Mode **/
		NM_ECM_NM_Mode_EGS53 NM_Mode: 8;
	} __attribute__((packed));
	/** Gets CAN ID of NM_ECM_EGS53 **/
	uint32_t get_canid(){ return NM_ECM_EGS53_CAN_ID; }
} NM_ECM_EGS53;



class ECU_ECM {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case CTRL_U_A2_EGS53_CAN_ID:
                    idx = 0;
                    break;
                case ECM_A1_EGS53_CAN_ID:
                    idx = 1;
                    break;
                case ECM_A2_EGS53_CAN_ID:
                    idx = 2;
                    break;
                case EIS_A1_EGS53_CAN_ID:
                    idx = 3;
                    break;
                case IC_A1_EGS53_CAN_ID:
                    idx = 4;
                    break;
                case IC_A3_EGS53_CAN_ID:
                    idx = 5;
                    break;
                case LM_A1_EGS53_CAN_ID:
                    idx = 6;
                    break;
                case SPC_A3_EGS53_CAN_ID:
                    idx = 7;
                    break;
                case STW_ANGL_STAT_EGS53_CAN_ID:
                    idx = 8;
                    break;
                case BRK_STAT_EGS53_CAN_ID:
                    idx = 9;
                    break;
                case CGW_STAT_EGS53_CAN_ID:
                    idx = 10;
                    break;
                case BRK_STAT2_EGS53_CAN_ID:
                    idx = 11;
                    break;
                case SBW_RQ_SCCM_EGS53_CAN_ID:
                    idx = 12;
                    break;
                case EPKB_STAT_EGS53_CAN_ID:
                    idx = 13;
                    break;
                case HVAC_RS1_EGS53_CAN_ID:
                    idx = 14;
                    break;
                case TX_RQ_SBC_EGS53_CAN_ID:
                    idx = 15;
                    break;
                case ENG_RS3_PT_EGS53_CAN_ID:
                    idx = 16;
                    break;
                case ENG_RS2_PT_EGS53_CAN_ID:
                    idx = 17;
                    break;
                case TX_RQ_ECM_EGS53_CAN_ID:
                    idx = 18;
                    break;
                case ENG_RS1_PT_EGS53_CAN_ID:
                    idx = 19;
                    break;
                case DPM_STAT_EGS53_CAN_ID:
                    idx = 20;
                    break;
                case WHL_STAT1_EGS53_CAN_ID:
                    idx = 21;
                    break;
                case WHL_STAT2_EGS53_CAN_ID:
                    idx = 22;
                    break;
                case PN14_STAT_EGS53_CAN_ID:
                    idx = 23;
                    break;
                case CVI_EGS53_CAN_ID:
                    idx = 24;
                    break;
                case VEH_DYN_STAT_EGS53_CAN_ID:
                    idx = 25;
                    break;
                case BODY_R1_EGS53_CAN_ID:
                    idx = 26;
                    break;
                case BODY_R2_EGS53_CAN_ID:
                    idx = 27;
                    break;
                case ECM_OBD_EGS53_CAN_ID:
                    idx = 28;
                    break;
                case NM_ECM_EGS53_CAN_ID:
                    idx = 29;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to CTRL_U_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CTRL_U_A2(uint64_t now, uint64_t max_expire_time, CTRL_U_A2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ECM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_A1(uint64_t now, uint64_t max_expire_time, ECM_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[1] <= now && now - LAST_FRAME_TIMES[1] < max_expire_time) {
                dest->raw = FRAME_DATA[1];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ECM_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_A2(uint64_t now, uint64_t max_expire_time, ECM_A2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[2] <= now && now - LAST_FRAME_TIMES[2] < max_expire_time) {
                dest->raw = FRAME_DATA[2];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to EIS_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EIS_A1(uint64_t now, uint64_t max_expire_time, EIS_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[3] <= now && now - LAST_FRAME_TIMES[3] < max_expire_time) {
                dest->raw = FRAME_DATA[3];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to IC_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_IC_A1(uint64_t now, uint64_t max_expire_time, IC_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[4] <= now && now - LAST_FRAME_TIMES[4] < max_expire_time) {
                dest->raw = FRAME_DATA[4];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to IC_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_IC_A3(uint64_t now, uint64_t max_expire_time, IC_A3_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[5] <= now && now - LAST_FRAME_TIMES[5] < max_expire_time) {
                dest->raw = FRAME_DATA[5];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to LM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_LM_A1(uint64_t now, uint64_t max_expire_time, LM_A1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[6] <= now && now - LAST_FRAME_TIMES[6] < max_expire_time) {
                dest->raw = FRAME_DATA[6];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to SPC_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SPC_A3(uint64_t now, uint64_t max_expire_time, SPC_A3_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[7] <= now && now - LAST_FRAME_TIMES[7] < max_expire_time) {
                dest->raw = FRAME_DATA[7];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to STW_ANGL_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_STW_ANGL_STAT(uint64_t now, uint64_t max_expire_time, STW_ANGL_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[8] <= now && now - LAST_FRAME_TIMES[8] < max_expire_time) {
                dest->raw = FRAME_DATA[8];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to BRK_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BRK_STAT(uint64_t now, uint64_t max_expire_time, BRK_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[9] <= now && now - LAST_FRAME_TIMES[9] < max_expire_time) {
                dest->raw = FRAME_DATA[9];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to CGW_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CGW_STAT(uint64_t now, uint64_t max_expire_time, CGW_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[10] <= now && now - LAST_FRAME_TIMES[10] < max_expire_time) {
                dest->raw = FRAME_DATA[10];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to BRK_STAT2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BRK_STAT2(uint64_t now, uint64_t max_expire_time, BRK_STAT2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[11] <= now && now - LAST_FRAME_TIMES[11] < max_expire_time) {
                dest->raw = FRAME_DATA[11];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to SBW_RQ_SCCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SBW_RQ_SCCM(uint64_t now, uint64_t max_expire_time, SBW_RQ_SCCM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[12] <= now && now - LAST_FRAME_TIMES[12] < max_expire_time) {
                dest->raw = FRAME_DATA[12];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to EPKB_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EPKB_STAT(uint64_t now, uint64_t max_expire_time, EPKB_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[13] <= now && now - LAST_FRAME_TIMES[13] < max_expire_time) {
                dest->raw = FRAME_DATA[13];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to HVAC_RS1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_HVAC_RS1(uint64_t now, uint64_t max_expire_time, HVAC_RS1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[14] <= now && now - LAST_FRAME_TIMES[14] < max_expire_time) {
                dest->raw = FRAME_DATA[14];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to TX_RQ_SBC
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TX_RQ_SBC(uint64_t now, uint64_t max_expire_time, TX_RQ_SBC_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[15] <= now && now - LAST_FRAME_TIMES[15] < max_expire_time) {
                dest->raw = FRAME_DATA[15];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RS3_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS3_PT(uint64_t now, uint64_t max_expire_time, ENG_RS3_PT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[16] <= now && now - LAST_FRAME_TIMES[16] < max_expire_time) {
                dest->raw = FRAME_DATA[16];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RS2_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS2_PT(uint64_t now, uint64_t max_expire_time, ENG_RS2_PT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[17] <= now && now - LAST_FRAME_TIMES[17] < max_expire_time) {
                dest->raw = FRAME_DATA[17];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to TX_RQ_ECM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TX_RQ_ECM(uint64_t now, uint64_t max_expire_time, TX_RQ_ECM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[18] <= now && now - LAST_FRAME_TIMES[18] < max_expire_time) {
                dest->raw = FRAME_DATA[18];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENG_RS1_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS1_PT(uint64_t now, uint64_t max_expire_time, ENG_RS1_PT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[19] <= now && now - LAST_FRAME_TIMES[19] < max_expire_time) {
                dest->raw = FRAME_DATA[19];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to DPM_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_DPM_STAT(uint64_t now, uint64_t max_expire_time, DPM_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[20] <= now && now - LAST_FRAME_TIMES[20] < max_expire_time) {
                dest->raw = FRAME_DATA[20];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to WHL_STAT1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_WHL_STAT1(uint64_t now, uint64_t max_expire_time, WHL_STAT1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[21] <= now && now - LAST_FRAME_TIMES[21] < max_expire_time) {
                dest->raw = FRAME_DATA[21];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to WHL_STAT2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_WHL_STAT2(uint64_t now, uint64_t max_expire_time, WHL_STAT2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[22] <= now && now - LAST_FRAME_TIMES[22] < max_expire_time) {
                dest->raw = FRAME_DATA[22];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to PN14_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_STAT(uint64_t now, uint64_t max_expire_time, PN14_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[23] <= now && now - LAST_FRAME_TIMES[23] < max_expire_time) {
                dest->raw = FRAME_DATA[23];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to CVI
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CVI(uint64_t now, uint64_t max_expire_time, CVI_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[24] <= now && now - LAST_FRAME_TIMES[24] < max_expire_time) {
                dest->raw = FRAME_DATA[24];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to VEH_DYN_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_VEH_DYN_STAT(uint64_t now, uint64_t max_expire_time, VEH_DYN_STAT_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[25] <= now && now - LAST_FRAME_TIMES[25] < max_expire_time) {
                dest->raw = FRAME_DATA[25];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to BODY_R1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BODY_R1(uint64_t now, uint64_t max_expire_time, BODY_R1_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[26] <= now && now - LAST_FRAME_TIMES[26] < max_expire_time) {
                dest->raw = FRAME_DATA[26];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to BODY_R2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BODY_R2(uint64_t now, uint64_t max_expire_time, BODY_R2_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[27] <= now && now - LAST_FRAME_TIMES[27] < max_expire_time) {
                dest->raw = FRAME_DATA[27];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ECM_OBD
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_OBD(uint64_t now, uint64_t max_expire_time, ECM_OBD_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[28] <= now && now - LAST_FRAME_TIMES[28] < max_expire_time) {
                dest->raw = FRAME_DATA[28];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to NM_ECM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_ECM(uint64_t now, uint64_t max_expire_time, NM_ECM_EGS53* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[29] <= now && now - LAST_FRAME_TIMES[29] < max_expire_time) {
                dest->raw = FRAME_DATA[29];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[30];
		uint64_t LAST_FRAME_TIMES[30];
};
#endif // __ECU_ECM_H_
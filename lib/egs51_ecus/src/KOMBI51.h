
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'KOMBI51'
*/

#ifndef __ECU_KOMBI51_H_
#define __ECU_KOMBI51_H_

#include <stdint.h>
    
#define KOMBI_408_EGS51_CAN_ID 0x0408

/** Winter tire maximum speed with 4 bits */
enum class KOMBI_408h_WRC_EGS51 : uint16_t {
	UBG = 0, // Unlimited
	BG210 = 1, // 210 km / h
	BG190 = 2, // 190 km / h
	BG160 = 3, // 160 km / h
	BG240 = 4, // 240 km / h
	BG230 = 5, // 230 km / h
	BG220 = 6, // 220 km / h
	BG200 = 7, // 200 km / h
	BG180 = 128, // 180 km / h
	BG170 = 129, // 170 km / h
	BG150 = 130, // 150 km / h
	BG140 = 131, // 140 km / h
	BG130 = 132, // 130 km / h
	BG120 = 133, // 120 km / h
	BG110 = 134, // 110 km / h
	BG100 = 135, // 100 km / h
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Winter tire maximum speed with 4 bits **/
		KOMBI_408h_WRC_EGS51 WRC: 3;
		/** Switch on Roll Test Mode ESP **/
		bool RT_EIN: 1;
		/** Release Heaters **/
		bool ZH_FREIG: 1;
		/** Segment tacho available **/
		bool SGT_VH: 1;
		/** Speed Limit / Tempomat Display Active **/
		bool V_DSPL_AKT: 1;
		/** Winter Tire Top Speed Bit 3 **/
		bool WRC3: 1;
		/** mileage **/
		uint16_t KM16: 16;
		/** Motor setting time (will be sent from Kl.15) **/
		uint8_t MAZ: 8;
		/** Terminal 58 dimmed **/
		uint8_t KL_58D: 8;
		/** Outdoor air temperature raw value **/
		uint8_t T_AUSSEN: 8;
		/** Clamp 61 decoupled **/
		bool KL_61E: 1;
		/** Tank level minimum **/
		bool TFSM: 1;
		/** pre-glow control lamp defective **/
		bool VGL_KL_DEF: 1;
		/** Air conditioning available **/
		bool KLA_VH: 1;
		/** MPH instead of km / h (variable speed bends) **/
		bool V_MPH: 1;
		/** Tacho oak **/
		bool TACHO_SYM: 1;
		/** Speed Limit / Tempose Display Not possible **/
		bool V_DSPL_AUS: 1;
		/** driver's door **/
		bool TF_AUF: 1;
		/** Tank level **/
		uint8_t TANK_FS: 8;
	} __attribute__((packed));
	/** Gets CAN ID of KOMBI_408_EGS51 **/
	uint32_t get_canid(){ return KOMBI_408_EGS51_CAN_ID; }
} KOMBI_408_EGS51;



class ECU_KOMBI51 {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case KOMBI_408_EGS51_CAN_ID:
                    idx = 0;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to KOMBI_408
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_KOMBI_408(uint64_t now, uint64_t max_expire_time, KOMBI_408_EGS51* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[1];
		uint64_t LAST_FRAME_TIMES[1];
};
#endif // __ECU_KOMBI51_H_
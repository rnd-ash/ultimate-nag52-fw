
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'ECM'
*/

#ifndef __ECU_ECM_H_
#define __ECU_ECM_H_

#include <stdint.h>
    
#define CTRL_U_A2_CAN_ID 0x0015
#define ECM_A1_CAN_ID 0x030D
#define ECM_A2_CAN_ID 0x0349
#define EIS_A1_CAN_ID 0x0001
#define IC_A1_CAN_ID 0x019F
#define IC_A3_CAN_ID 0x03E1
#define LM_A1_CAN_ID 0x0069
#define SPC_A3_CAN_ID 0x0379
#define STW_ANGL_STAT_CAN_ID 0x0003
#define BRK_STAT_CAN_ID 0x0005
#define CGW_STAT_CAN_ID 0x000F
#define BRK_STAT2_CAN_ID 0x005F
#define SBW_RQ_SCCM_CAN_ID 0x006D
#define EPKB_STAT_CAN_ID 0x00DD
#define HVAC_RS1_CAN_ID 0x00F9
#define TX_RQ_SBC_CAN_ID 0x0104
#define ENG_RS3_PT_CAN_ID 0x0105
#define ENG_RS2_PT_CAN_ID 0x014B
#define TX_RQ_ECM_CAN_ID 0x017D
#define ENG_RS1_PT_CAN_ID 0x01CD
#define DPM_STAT_CAN_ID 0x0200
#define WHL_STAT1_CAN_ID 0x0201
#define WHL_STAT2_CAN_ID 0x0203
#define PN14_STAT_CAN_ID 0x0205
#define CVI_CAN_ID 0x0207
#define VEH_DYN_STAT_CAN_ID 0x0245
#define BODY_R1_CAN_ID 0x0283
#define BODY_R2_CAN_ID 0x03C5
#define ECM_OBD_CAN_ID 0x03D0
#define NM_ECM_CAN_ID 0x0429

/** Heating Power State / Status Heating power */
enum class ECM_A2_HtPwr_Stat {
	CLS = 0, // Heating Cutoff Valve is closed
	OPN = 1, // Heating Cutoff Valve is open
	CYC = 2, // Heating Cutoff Valve is Cyclic Clocked
	SNA = 3, // Signal Not Available
};

/** Ignition Switch State / Terminal Status */
enum class EIS_A1_ISw_Stat {
	IGN_LOCK = 0, // Ignition Lock (0)
	IGN_OFF = 1, // Ignition Off (15c)
	IGN_ACC = 2, // Ignition Accessory (15R)
	IGN_ON = 4, // Ignition on (15)
	IGN_START = 5, // Ignition Start (50)
	SNA = 7, // Signal Not Available
};

/** Automatic Door Lock Request Source / Source of the requirement Automatic door lock */
enum class EIS_A1_AutoDrLk_Rq_Src {
	NDEF0 = 0, // Not Defined
	CLKS_INSD_SW = 1, // Source IS Central Locking System Inside Switch
	MENU = 2, // Source Is Settings Menu
	SNA = 3, // Signal Not Available
};

/** Profile Mode State / Profile Mode Actual value */
enum class EIS_A1_ProfMd_Stat {
	NDEF0 = 0, // Not Defined
	ON = 1, // profiles on
	OFF = 2, // Profiles Off
	SNA = 3, // Signal Not Available
};

/** Automatic Door Lock State / Status Automatic door lock */
enum class EIS_A1_AutoDrLk_Stat {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Actual Profile / News Profile */
enum class EIS_A1_Prof_Stat {
	P1 = 0, // Profile 1
	P2 = 1, // Profile 2
	P3 = 2, // Profile 3
	P4 = 3, // Profile 4
	DEFAULT4 = 4, // Default Profiles
	DEFAULT5 = 5, // Default Profiles
	DEFAULT6 = 6, // Default Profiles
	DEFAULT7 = 7, // Default Profiles
	DEFAULT8 = 8, // Default Profiles
	DEFAULT9 = 9, // Default Profiles
	DEFAULT10 = 10, // Default Profiles
	DEFAULT11 = 11, // Default Profiles
	DEFAULT12 = 12, // Default Profiles
	DEFAULT13 = 13, // Default Profiles
	DEFAULT14 = 14, // Default Profiles
	DEFAULT15 = 15, // Default Profiles
};

/** Central Locking System Gas Door State / ZV Status Tank Flap */
enum class EIS_A1_CLkS_Gas_Dr_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Deck Lid State / ZV Status Tail Cover */
enum class EIS_A1_CLkS_DL_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Lock State / Condition Central Locking */
enum class EIS_A1_CLkS_Lk_Stat {
	UNLK = 0, // Vehicle Unlocked
	INT_LK = 1, // Vehicle Internal Locked
	EXT_LK = 2, // Vehicle External Locked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Rear Right State / ZV Status Door Rear Right */
enum class EIS_A1_CLkS_Dr_RR_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Rear Left State / ZV Status Door Rear Left */
enum class EIS_A1_CLkS_Dr_RL_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Front Right State / ZV Status Door Front Right */
enum class EIS_A1_CLkS_Dr_FR_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Door Front Left State / ZV Status Door Front Left */
enum class EIS_A1_CLkS_Dr_FL_Stat {
	NDEF0 = 0, // Not Defined
	LOCK = 1, // Locked
	UNLOCK = 2, // Unlocked
	SNA = 3, // Signal Not Available
};

/** Central Locking System Lock State / Condition Central Locking */
enum class EIS_A1_CLkS_Lk_Stat3 {
	UNLK = 0, // Vehicle Unlocked
	INT_LK = 1, // Vehicle Internal Locked
	EXT_LK = 2, // Vehicle External Locked
	SEL_UNLK = 3, // Vehicle Selective Unlocked
	SNA = 7, // Signal Not Available
};

/** PTS DISPLAY STATE FROM IC / PTS Display state */
enum class IC_A1_PTS_Disp_Stat_IC {
	OK = 0, // No Error
	TIMEOUT = 1, // Timeout
	FATAL = 2, // Fatal Error
	SNA = 3, // Signal Not Available
};

/** HIGH BEAM ENABLE / TRANSPORT LIGHT */
enum class IC_A1_HiBm_Enbl {
	DSABL = 0, // Disable
	ENBL = 1, // Enable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Radar Sensor Mode Request / Request Radar Sensoric Mode */
enum class IC_A3_RadarSensMd_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Daytime Running Lamps on Request / Request Turn on daytime running light */
enum class IC_A3_DRLt_On_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Tire Pressure Module Activate Request / Request Tire Pressure Control Activate */
enum class IC_A3_TPM_Actv_Rq_V2 {
	IDLE = 0, // No Request
	ACTIVATE = 1, // Activate
	SNA = 3, // Signal Not Available
};

/** Flat Tire Warning On Request / Request PlatRollwarner */
enum class IC_A3_FTW_On_Rq {
	IDLE = 0, // No Request
	OFF = 1, // FTW OFF
	ON = 2, // FTW RE-ACTIVATE
	SNA = 3, // Signal Not Available
};

/** Taxi Tone Fashion Request / Request Taxiton Mode */
enum class IC_A3_TaxiToneMd_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taxi Roof Lamps Fashion Request / Request Roof Sign Mode */
enum class IC_A3_TaxiRoofLmpMd_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taxi Fashion Request / Request Taximodus */
enum class IC_A3_TaxiMd_Rq {
	PRIVATE = 0, // Private
	BUSINESS = 1, // on business
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Data Radio Menu State / Status Data Feature Menu */
enum class IC_A3_DataRadioMenu_Stat {
	NA = 0, // NOT AVAILABLE
	AVL = 1, // Available
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Temperature Unit / Temperature Unit */
enum class IC_A3_UnitTemp_Rq {
	CELSIUS = 0, // Celsius
	FAHRENHEIT = 1, // Fahrenheit
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** DRVM Audio Mode Request / Request DRVM Audiomodus */
enum class IC_A3_DRVM_AudioMd_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** DRVM System Mode Request / Request DRVM System Mode */
enum class IC_A3_DRVM_SysMd_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Taximeter Request / Request Taximeter */
enum class IC_A3_TAX_Rq {
	NO_RQ = 0, // No Request
	TAX_RQ = 1, // Tax Request
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** IHC Mode Request / Request IHC Mode */
enum class IC_A3_IHC_Md_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Eco Mode Request / Request ECO Mode */
enum class IC_A3_ECO_Md_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** AFS Mode Request / Request AFS Mode */
enum class IC_A3_AFS_Md_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Pressure Unit / Pressure Unit */
enum class IC_A3_UnitPress_Rq {
	BAR = 0, // bar
	PSI = 1, // PSI
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Speed ​​Limit Assist Warning Level Request / Warning Spring Request Speed ​​Limitation Assistant */
enum class IC_A3_SLA_WarnLvl_Rq {
	IDLE = 0, // No Warning
	LVL1 = 1, // Warning Level 1
	LVL2 = 2, // Warning Level 2
	LVL3 = 3, // Warning Level 3
	LVL4 = 4, // Warning Level 4
	LVL5 = 5, // Warning Level 5
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** SPEED LIMIT ASSIST MODE REQUEST / MODE DESCRIPTION SPEED LIMITATION WATER */
enum class IC_A3_SLA_Md_Rq {
	OFF = 0, // Speed ​​Limit Assist Off
	ON_NO_WARN = 1, // Speed ​​Limit Assist on Without Warning
	ON_WARN = 2, // Speed ​​Limit Assist on with Warning
	SNA = 3, // Signal Not Available
};

/** ALDW Fashion Request / Request ALDW mode */
enum class IC_A3_ALDW_Md_Rq {
	OFF = 0, // ALDW OFF
	EARLY = 1, // Aldw on, Warning Level Early
	MID = 2, // Aldw on, Warning Level Mid
	LATE = 3, // Aldw on, Warning Level Late
	SNA = 7, // Signal Not Available
};

/** BSM Mode Request / Request BSM Mode */
enum class IC_A3_BSM_Md_Rq {
	OFF = 0, // OFF
	PERM = 1, // System Active (permanently)
	AUTO = 2, // System Active (Automatically)
	SNA = 3, // Signal Not Available
};

/** BSM Acoustical Warning Enable / BSM Acoustic Warning allowed */
enum class IC_A3_BSM_AcustWarn_Enbl {
	DSABL = 0, // Disable
	ENBL = 1, // Enable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Parktronic Mode Request / Parktronic Mode Set */
enum class IC_A3_PTS_Md_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Parktronic Acoustic Warning Enable / PTS acoustic warning released */
enum class IC_A3_PTS_AcustWarn_Enbl {
	ENBL = 0, // Enable
	DSABL = 1, // Disable
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Steering / Driving Program for Steering */
enum class IC_A3_VehDrvProgSys4_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Drive / Drive Program for powertrain */
enum class IC_A3_VehDrvProgSys3_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Brake / Driving program for brake */
enum class IC_A3_VehDrvProgSys2_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - Suspension / Driving Program for Suspension */
enum class IC_A3_VehDrvProgSys1_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request / Driving Program for */
enum class IC_A3_VehDrvProgSys8_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request / Driving Program for */
enum class IC_A3_VehDrvProgSys7_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - DTR / Driving program for DISTRONIC */
enum class IC_A3_VehDrvProgSys6_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Fashion Request - ESP / Driving Program for ESP */
enum class IC_A3_VehDrvProgSys5_Md_Rq {
	COMFORT = 0, // Comfort Fashion
	SPORT = 1, // Sport Fashion
	MANUAL = 2, // Manual fashion
	SNA = 3, // Signal Not Available
};

/** Intelligent Headlight Control State / State Intelligent Headlight Control */
enum class LM_A1_IHC_Stat {
	IHC_ACTV = 0, // IHC Activated
	IHC_FLT = 1, // IHC Fault
	TEMP_NAVL = 2, // IHC Temporarily Not Available
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch LED Request / Request LED Button Active Damping Control */
enum class SPC_A3_ADC_SwLED_Rq {
	OFF = 0, // OFF
	CONT = 1, // Continuous Light
	BLINK = 2, // Blinking Light
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch LED Request / Request LED Vehicle Level Button */
enum class SPC_A3_SuspLvlAdjSwLED_Rq {
	OFF = 0, // OFF
	CONT = 1, // Continuous Light
	BLINK = 2, // Blinking Light
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Angle Sensor Identification / Identification Steering wheel angle sensor */
enum class STW_ANGL_STAT_StW_AnglSens_Id {
	INIT_PSBL = 0, // Steering Wheel Angle Sensor Can Be Initialized
	INIT_SELF = 1, // Steering Wheel Angle Sensor is self-initializing
	INIT_MUST = 2, // (Steering Wheel Angle Sensor Must Initialized)
};

/** Steering Wheel Angle Sensor State / Status Steering wheel angle sensor */
enum class STW_ANGL_STAT_StW_AnglSens_Stat {
	OK = 0, // Steering Wheel Angle Sensor OK
	INI = 1, // Steering Wheel Angle Sensor Not Initialized
	ERR = 2, // Steering Wheel Angle Sensor Fault
	ERR_INI = 3, // Steering Wheel Angle Sensor Fault and Not Initialized
};

/** Parking Brake Request / parking brake request */
enum class BRK_STAT_PkBrk_Rq_SBC {
	IDLE = 0, // No Request
	ENGG = 1, // Engage Request
	RELS = 2, // Release Request
	SNA = 3, // Signal Not Available
};

/** Brake Pedal State / Status Brake Pedal */
enum class BRK_STAT_BrkPdl_Stat {
	UPSTOP = 0, // Pedal upstopped
	PSD = 1, // Pedal Pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Stop Coordinator Stop State / Status Standstill */
enum class BRK_STAT_SPCR_Sp_Stat {
	IDLE = 0, // Vehicle Not Stoped, Or Not Held by Assistance System
	STOP = 1, // Vehicle Stopped and Held by Assistance System (Using Service Brake)
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Brake State / Status Brake */
enum class BRK_STAT_Brk_Stat {
	IDLE = 0, // No Braking
	BRAKING = 1, // Braking
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Stop Coordinator Mode / Mode Standstill Coordinator */
enum class BRK_STAT_SPCR_Md_V3 {
	IDLE = 0, // normal surgery
	HOLD = 1, // HOLD MODE ACTIVE
	GO = 2, // Go Mode Active
	SLP = 4, // Vehicle Slips
	SPCR_ACTV = 8, // Stop Coordinator Active
	SPCR_ACTV_HOLD = 9, // SPCR in Activity and Hold Mode Active
	SPCR_ACTV_GO = 10, // SPCR in Activity and Go Mode Active
	SPCR_ACTV_SLP = 12, // SPCR in Activity and Vehicle Slips
	SPCR_PSV = 15, // SPCR Passive
};

/** Stop Coordinator Exception Request / Standstill Coordinator Exception Request */
enum class BRK_STAT_SPCR_Excpt_Rq {
	IDLE = 0, // No Request
	SPDCTRLLVR_DSABL = 1, // Disable Speed ​​Control Lever Request (Driver Door Open)
	AS_DSABL = 2, // Disable Assistance System Request (Engine Hood / Deck Lid Open)
	SPDCTRLLVR_AS_DSABLE = 3, // Disable Speed ​​Control Lever and Assistance System Request
};

/** Starting Torque State (to Release Parking Brake) / Status Tracking Torque (for loosening parking brake) */
enum class BRK_STAT_StTrq_Stat {
	HOLD = 0, // NOT ENOUGH STARTING TORQUE AVAILABLE
	RELS = 1, // Enough Starting Torque Available
	UNDET = 2, // Starting Torque undetermined
	SNA = 3, // Signal Not Available
};

/** ESP System State / ESP system condition */
enum class BRK_STAT_ESP_Sys_Stat {
	ERR = 0, // System Error
	NORM = 1, // normal surgery
	DIAG = 2, // Diagnostics
	EMT = 3, // Exhaust Emission Test
};

/** Assistance System Off Request / Request Assistance System */
enum class BRK_STAT_SPCR_AS_Off_Rq {
	IDLE = 0, // No Request
	AS_TMP_OFF = 1, // Assistance System Temporary Off, Enabling Not Allowed
	AS_CNTS_OFF = 2, // Assistance System Continously Off, Enabling Not Allowed
	SPCR_NA = 3, // Stop Coordinator Not Available, Enabling Not Allowed
};

/** Disable Assistance System / Shutdown Assistance System */
enum class BRK_STAT_SPCR_AS_Dsabl {
	IDLE = 0, // No Request
	AS_NOT_ENBL = 1, // Enabling Assistance System Not Allowed (Temperature)
	AS_DSABL = 2, // Disable Assistance System Request (Temperature)
	SNA = 3, // Signal Not Available
};

/** CGW Routing Status / CGW Routing Status */
enum class CGW_STAT_CGW_Rout_Stat {
	ACTIVE = 0, // Source Can Active
	DSABL_TO_MON = 1, // Source Can Inactive, Disable Timeout Monitoring
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
};

/** Message Transmitter Identification / Transmitter ID */
enum class SBW_RQ_SCCM_MsgTxmtId {
	EWM = 0, // EWM
	SCCM = 1, // SCCM
	NDEF2 = 2, // Not Defined
	NDEF3 = 3, // Not Defined
};

/** State Steering Wheel Switch ("+", "-") / steering wheel keys "+", "-" actuated */
enum class SBW_RQ_SCCM_StW_Sw_Stat3 {
	NPSD = 0, // Nothing pressed
	PLUS = 1, // "+" pressed
	MINUS = 2, // "-" pressed
	PLUS_MINUS = 3, // "+" and "-" pressed
	NDEF4 = 4, // Not Defined
	NDEF5 = 5, // Not Defined
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Transmission Selector Lever Signal Identification (Steering Wheel) / Gear Select Lever Signal ID (steering wheel) */
enum class SBW_RQ_SCCM_TSL_Sgnl_Id_StW {
	OLD = 0, // OLD signal "TSL_POSN_STW"
	NDEF1 = 1, // Not Defined
	OLD_ERR_RES = 2, // Reserved for Old Signal: Errors in SCCM
	NEW = 3, // New Signals "TSL_P_PSD_STW" AND "TSL_RND_POSN_STW"
};

/** Transmission Selector Lever "P" Switch Actuated (Steering Wheel) / Gear Select Lever "P" */
enum class SBW_RQ_SCCM_TSL_P_Psd_StW {
	IDLE = 0, // Transmission Selector Lever "P" Not Pressed
	PSD = 1, // Transmission Selector Lever "P" pressed
	INI = 2, // Transmission Selector Lever "P" Switch Not Initialized
	SNA = 3, // Signal Not Available
};

/** Transmission Selector Lever RND Position (Steering Wheel) / Gear Selection Lever RND position (steering wheel) */
enum class SBW_RQ_SCCM_TSL_RND_Posn_StW {
	IDLE = 0, // Transmission Selector Lever in idle position
	R = 1, // Transmission Selector Lever in position "R"
	N_UP = 2, // Transmission Selector Lever in position "N UP"
	N_DOWN = 4, // Transmission Selector Lever in position "N Down"
	INI = 6, // Transmission Selector Lever Not Initialized
	D = 8, // Transmission Selector Lever in position "D"
	SNA = 15, // Signal Not Available
};

/** Parking brake switch state / parking brake switch status */
enum class EPKB_STAT_PkBrkSw_Stat {
	IDLE = 0, // Not pressed
	ENGG = 1, // Apply (Engage Pushed)
	RELS = 2, // Release (Release Pulled)
	SNA = 3, // Signal Not Available
};

/** Electrical Parking Brake System State / Status EPKB */
enum class EPKB_STAT_EPkBrk_Stat {
	ERR = 0, // Fatal System Error
	NORM = 1, // normal surgery
	DIAG = 2, // Diagnostics
	INIT = 3, // Initialization
	PART = 4, // Partial surgery
	NO_ENGG = 5, // Partial Operation, Engaging Not Possible
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Parking brake state / status parking brake */
enum class EPKB_STAT_PkBrk_Stat {
	NO_END_POSN = 0, // No end position
	INC = 1, // InCreasing Tensioning Force
	DEC = 2, // Decreasing Tensioning Force
	ENGG = 3, // Parking Brake is engaged
	RELS = 4, // Parking brake is released
	NDEF5 = 5, // Not Defined
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Dynamic Braking Fashion / Mode Dynamic Brakes */
enum class EPKB_STAT_DynBrkMd {
	IDLE = 0, // No Dynamic Braking
	SBC = 1, // Dynamic Braking Via SBC
	EPKB = 2, // Dynamic Braking Via EPKB
	SNA = 3, // Signal Not Available
};

/** Battery Coupling Switch Request / Request Battery Coupling Switch */
enum class EPKB_STAT_BatCplSw_Rq_EPKB {
	IDLE = 0, // No Request
	CLOSE = 1, // Close Battery Coupling Switch
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Transmission Parking Position Request / EPKB request: "P" */
enum class EPKB_STAT_TxPkPosn_Rq_EPKB {
	IDLE = 0, // No Request
	P_ENGG = 1, // Engage transmission parking position
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Turn on Brake Light on Request / Brake light */
enum class EPKB_STAT_BrkLgt_On_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Requested gear, upper limit / target gear, upper limit */
enum class TX_RQ_SBC_GrMax_Rq_SBC {
	PASSIVE = 0, // Passive value
	G1 = 1, // Requested gear, upper limit = 1
	G2 = 2, // Requested gear, upper limit = 2
	G3 = 3, // Requested gear, upper limit = 3
	G4 = 4, // Requested gear, upper limit = 4
	G5 = 5, // Requested gear, upper limit = 5
	G6 = 6, // Requested gear, upper limit = 6
	G7 = 7, // Requested gear, upper limit = 7
};

/** Requested gear, lower limit / target gear, lower limit */
enum class TX_RQ_SBC_GrMin_Rq_SBC {
	PASSIVE = 0, // Passive value
	G1 = 1, // Requested gear, lower limit = 1
	G2 = 2, // Requested gear, lower limit = 2
	G3 = 3, // Requested gear, lower limit = 3
	G4 = 4, // Requested gear, lower limit = 4
	G5 = 5, // Requested gear, lower limit = 5
	G6 = 6, // Requested gear, lower limit = 6
	G7 = 7, // Requested gear, lower limit = 7
};

/** Shift characteristic displacement request / demand shift line shift */
enum class TX_RQ_SBC_ShftChrDsp_Rq_SBC {
	SKL0 = 0, // Shift characteristic displacement "0"
	SKL1 = 1, // Shift characteristic displacement "1"
	SKL2 = 2, // Shift characteristic displacement "2"
	SKL3 = 3, // Shift characteristic displacement "3"
	SKL4 = 4, // Shift characteristic displacement "4"
	SKL5 = 5, // Shift characteristic displacement "5"
	SKL6 = 6, // Shift characteristic displacement "6"
	SKL7 = 7, // Shift characteristic displacement "7"
	SKL8 = 8, // Shift characteristic displacement "8"
	SKL9 = 9, // Shift characteristic displacement "9"
	SKL10 = 10, // Shift characteristic displacement "10"
};

/** Request neutral gear by SBC / SBC request: "Neutral" */
enum class TX_RQ_SBC_GrN_Rq_SBC {
	NDEF0 = 0, // Not Defined
	RQ_N = 1, // Request "Neutral"
	IDLE = 2, // No Request
	SNA = 3, // Signal Not Available
};

/** Engine Running State / Status Engine Circulation */
enum class ENG_RS3_PT_EngRun_Stat {
	STOP = 0, // Engine is stopped
	START = 1, // Engine starting
	IDLE_UNSTBL = 2, // Engine Idling, Unstable
	IDLE_STBL = 3, // Engine Idling, Stable
	UNLIMITED = 4, // Engine Running, Unlimited RPM
	LIMITED = 5, // Engine Running, Limited RPM
	NDEF6 = 6, // Not Defined
	SNA = 7, // Signal Not Available
};

/** Requested Gear, Upper Limit / Sprocket, Upper Border */
enum class TX_RQ_ECM_GrMax_Rq_ECM {
	PASSIVE = 0, // Passive Value
	G1 = 1, // Requested Gear, Upper Limit = 1
	G2 = 2, // Requested Gear, Upper Limit = 2
	G3 = 3, // Requested Gear, Upper Limit = 3
	G4 = 4, // Requested Gear, Upper Limit = 4
	G5 = 5, // Requested Gear, Upper Limit = 5
	G6 = 6, // Requested Gear, Upper Limit = 6
	G7 = 7, // Requested Gear, Upper Limit = 7
};

/** Requested Gear, Lower Limit / Sprocket, Lower Border */
enum class TX_RQ_ECM_GrMin_Rq_ECM {
	PASSIVE = 0, // Passive Value
	G1 = 1, // Requested Gear, Lower Limit = 1
	G2 = 2, // Requested Gear, Lower Limit = 2
	G3 = 3, // Requested Gear, Lower Limit = 3
	G4 = 4, // Requested Gear, Lower Limit = 4
	G5 = 5, // Requested Gear, Lower Limit = 5
	G6 = 6, // Requested Gear, Lower Limit = 6
	G7 = 7, // Requested Gear, Lower Limit = 7
};

/** Shift Characteristic Displacement Request / Request Switching Shift */
enum class TX_RQ_ECM_ShftChrDsp_Rq {
	SKL0 = 0, // Shift Characteristic Displacement "0"
	SKL1 = 1, // Shift Characteristic Displacement "1"
	SKL2 = 2, // Shift Characteristic Displacement "2"
	SKL3 = 3, // Shift Characteristic Displacement "3"
	SKL4 = 4, // Shift Characteristic Displacement "4"
	SKL5 = 5, // Shift Characteristic Displacement "5"
	SKL6 = 6, // Shift Characteristic Displacement "6"
	SKL7 = 7, // Shift Characteristic Displacement "7"
	SKL8 = 8, // Shift Characteristic Displacement "8"
	SKL9 = 9, // Shift Characteristic Displacement "9"
	SKL10 = 10, // Shift Characteristic Displacement "10"
};

/** Torque Converter Lockup Clutch Request / Kueb setpoint open / slipping */
enum class TX_RQ_ECM_TCC_Rq {
	IDLE = 0, // No Request
	DISENGG = 1, // Lockup Clutch Disengage
	ENGG = 2, // Lockup Clutch Engage
	SNA = 3, // Signal Not Available
};

/** Decentral Power Management External Fashion Enable Request / Release External Fashion by Decentralized Power Management */
enum class DPM_STAT_DPM_ExtMd_Enbl_Rq {
	NDEF0 = 0, // Not Defined
	NO_EXT = 1, // DPM External Fashion Not Allowed
	EXT = 2, // DPM External Fashion Allowed
	SNA = 3, // Signal Not Available
};

/** Decentral Power Management Fashion Limit Request / Mode Handle Decentralized Power Management */
enum class DPM_STAT_DPM_MdLmt_Rq {
	SLEEP = 0, // DPM LIMIT SLEEP MODE
	LOCAL = 1, // DPM LIMIT Local Mode
	EXT = 2, // DPM Limit External Mode
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF FRONT LEFT Wheel / direction of rotation Wheel front left */
enum class WHL_STAT2_WhlDir_FL_Stat {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF FRONT RIGHT Wheel / direction of rotation Wheel front right */
enum class WHL_STAT2_WhlDir_FR_Stat {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF REAR LEFT Wheel / direction of rotation Wheel rear left */
enum class WHL_STAT2_WhlDir_RL_Stat {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** DIRECTION OF ROTATION OF REAR RIGHT Wheel / direction of rotation Wheel rear right */
enum class WHL_STAT2_WhlDir_RR_Stat {
	VOID = 0, // NO DETECTION OF DIRECTION
	FORWARD = 1, // DIRECTION FORWARD
	BACKWARD = 2, // DIRECTION BACKWARD
	SNA = 3, // Signal Not Available
};

/** Battery Coupling Switch State / State Battery Coupling Switch */
enum class PN14_STAT_PN14_BatCplSw_Stat {
	CLS = 0, // Battery Coupling Switch Closed
	PREOPN = 1, // Battery Coupling Switch Open in 2 sec
	OPN = 2, // Battery Coupling Switch Open
	SNA = 3, // Signal Not Available
};

/** Supply Battery Cutoff Switch State / Status Battery Separation Switch */
enum class PN14_STAT_PN14_SupBatCutSw_Stat {
	CLS = 0, // Battery Cutoff Switch is closed
	PREOPN = 1, // Battery Cutoff Switch Opens in 300 sec
	OPN = 2, // Battery Cutoff Switch is open
	SNA = 3, // Signal Not Available
};

/** Country code / country code */
enum class CVI_Country {
	ROW = 0, // Remain of the world
	USA = 1, // United States
	CAN = 2, // Canada
	JAP = 3, // Japan
	SWI = 4, // Switzerland
	AUS = 5, // Australia
	GULF = 6, // Gulf states
	UK = 7, // United Kingdom (not 221/216)
	SNA = 15, // Signal Not Available
};

/** DC group / DC group */
enum class CVI_Group {
	MB = 0, // Mercedes Benz, Maybach
	SMART = 1, // smart
	CG = 2, // Chrysler Group
	MMC = 3, // Mitsubishi
	SNA = 15, // Signal Not Available
};

/** Guard level / Guard Level */
enum class CVI_Guard {
	NO = 0, // No armoring
	B4 = 1, // Armoring class B4
	B6 = 2, // Armoring class B6 / B7
	SNA = 3, // Signal Not Available
};

/** Vehicle line / Series */
enum class CVI_VehLine {
	BR221 = 0, // BR 221
	BR231 = 1, // BR 231
	BR212 = 2, // BR 212
	BR204 = 3, // BR 204
	BR207 = 9, // BR 207
	BR251 = 17, // BR 251
	BR164 = 19, // BR 164
	BR216 = 22, // BR 216
	SNA = 63, // Signal Not Available
};

/** Vehicle line version: year / year change: Year */
enum class CVI_VehLineYear {
	NDEF30 = 30, // Not Defined
	START = 31, // Start of vehicle line
};

/** Vehicle line version: package / change Year: Package */
enum class CVI_VehLinePack {
	PACK0 = 0, // Package "/ 0"
	PACK1 = 1, // Package "/ 1"
	PACK2 = 2, // Package "/ 2"
	PACKX = 3, // Package "/ X" or start of vehicle line
};

/** Steering variant / Steering variant */
enum class CVI_StStyle {
	NDEF0 = 0, // Not Defined
	LHD = 1, // Left hand drive
	RHD = 2, // Right hand drive
	SNA = 3, // Signal Not Available
};

/** Vehicle body style / body variant */
enum class CVI_BodyStyle {
	W = 0, // W - Sedan
	V = 1, // V - Stretched limo
	C = 2, // C - Coupe
	S = 3, // S - wagon station
	A = 4, // A - Convertible
	R = 5, // R - Roadster
	CL = 6, // CL - Sports coupe
	VV = 7, // VV - Extra streched limousine
	VF = 8, // VF - Stretched chassis
	F = 9, // F - Chassis
	G = 10, // G - Off-road vehicle
	GV = 11, // GV - Stretched off-road vehicle
	T = 12, // T - Multi Sports Tourer
	X = 13, // X - sports utility Tourer
	SNA = 31, // Signal Not Available
};

/** Engine (Bit 7: Otto-engine => 0, diesel engine => 1) / motor (Bit 7: gasoline => 0, Diesel => 1) */
enum class CVI_EngStyle {
	M275E55 = 0, // M275 E55 [ME2.7.2]
	M273E55 = 1, // M273 E55 [ME9.7]
	M273E46 = 2, // M273 E46 [ME9.7]
	M272E35 = 3, // M272 E35 [ME9.7]
	M272E30 = 4, // M272 E30 [ME9.7]
	M272E25 = 5, // M272 E25 [ME9.7]
	M273E55DE = 7, // M273 E55 DE [ME9.7]
	M273E46DE = 8, // M273 E46 DE [ME9.7]
	M272E35DE = 9, // M272 E35 DE [ME9.7]
	M272E30DE = 10, // M272 E30 DE [ME9.7]
	M272E25DE = 11, // M272 E25 DE [ME9.7]
	M271E18ML135ATT = 12, // attrac M271 E18 ML. (135 kW) [SIM271KE]
	M271E18ML115ATT = 13, // attrac M271 E18 ML. (115 kW) [SIM271KE]
	M272E35_221 = 14, // M272 E35 (221 kW) [ME9.7]
	AMGM156E63HP = 123, // AMG M156 E63 HP [ME9.7]
	AMGM275E60LA = 124, // AMG M275 E60 LA [ME2.7.2]
	AMGM157E60LA = 125, // AMG M157 E60 LA [ME9.7]
	AMGM156E63 = 126, // AMG M156 E63 [ME9.7]
	OM642DE30LA160 = 129, // OM642 DE30 LA (155/160 kW) [CR5 / CR6]
	OM629DE40LA = 130, // OM629 DE40 LA [CR5]
	OM642DE30LA140 = 131, // OM642 DE30 LA red. (140 kW) [CR6]
	OM646EVODE22LA125 = 132, // OM646EVO DE22 LA (120/125 kW) [CRD]
	OM646EVODE22LA100 = 133, // OM646EVO DE22 LA red. (100 kW) [CRD]
	OM646EVODE22LA85 = 134, // OM646EVO DE22 LA (85 kW) [CRD]
	OM651DE22LA150 = 135, // OM651 DE22 LA (150 kW) [CRD2]
	OM651DE22LA120 = 136, // OM651 DE22 LA (120 kW) [CRD2]
	OM651DE22LA100 = 137, // OM651 DE22 LA (100 kW) [CRD2]
	OM651DE22LA80 = 138, // OM651 DE22 LA (80 kW) [CRD2]
	SNA = 255, // Signal Not Available
};

/** Vehicle roof style / roof version */
enum class CVI_RoofStyle {
	NORM = 0, // Normal Roof
	TSSR = 1, // tilt / slide sunroof
	EXTRUN_TSSR = 2, // Exterior running tilt / slide sunroof
	TSSR_RCLS = 3, // tilt / slide sunroof with rain closure (not 221/216)
	EXTRUN_TSSR_CLS = 4, // Exterior running tilt / slide sunroof with rain closure
	SNA = 7, // Signal Not Available
};

/** Vehicle options package / vehicle equipment package */
enum class CVI_VehOPTPack {
	CLASSIC = 0, // Classic
	ELEGANCE = 1, // Elegance
	AVANTGARDE = 2, // Avantgarde
	SNA = 3, // Signal Not Available
};

/** HVAC style / KLA variant */
enum class CVI_HVACStyle {
	ONE_ZONE = 0, // One zone HVAC
	TWO_ZONE = 1, // Two zone HVAC
	THREE_ZONE = 2, // Three zone HVAC
	FOUR_ZONE = 3, // Four zone HVAC
};

/** Rotary Latch Door Rear Right State / Status Swivel Fall Door Rear Right */
enum class BODY_R1_DrRLtch_RR_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Rear Left State / Status Swivel Fall Door Rear Left */
enum class BODY_R1_DrRLtch_RL_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Front Right State / Status Swivel Fall Door Front Right */
enum class BODY_R1_DrRLtch_FR_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Rotary Latch Door Front Left State / Status Swivel Fall Door Front Left */
enum class BODY_R1_DrRLtch_FL_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Door Closed
	OPN = 2, // Door Open
	SNA = 3, // Signal Not Available
};

/** Emergency Flasher on Request / Warning Blink Light */
enum class BODY_R1_EF_On_Rq {
	OFF = 0, // OFF
	ON = 1, // ON
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Engine Hood State / Status Bonnet */
enum class BODY_R1_EngHd_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Rotary Latch Closed
	OPN = 2, // Rotary Latch Open
	SNA = 3, // Signal Not Available
};

/** Deck Lid Rotary Latch State / Status Swivel Fall Tail Cover */
enum class BODY_R1_DL_RLtch_Stat {
	NDEF0 = 0, // Not Defined
	CLS = 1, // Rotary Latch Closed
	OPN = 2, // Rotary Latch Open
	SNA = 3, // Signal Not Available
};

/** trailer detected / trailer operation detected */
enum class BODY_R1_Trlr_Stat {
	NONE = 0, // Trailer Not Detected
	OK = 1, // trailer detected
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Reverse Gear Engaged / reverse input */
enum class BODY_R1_RevGr_Engg {
	DISENGG = 0, // disengaged
	ENGG = 1, // engaged
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Conditioning State / Status Steering Cool Climatization */
enum class BODY_R1_StW_Cond_Stat {
	OFF = 0, // LED Steering Wheel Conditioning Off
	NDEF1 = 1, // Not Defined
	ON = 2, // LED Steering Wheel Conditioning On
	BLINK = 3, // LED Steering Wheel Conditioning Blinks Cause of Fault
};

/** BUCKLE SWITCH REAR MIDDLE STATE (by SAM_R) / Status Belt Slip Rear Center */
enum class BODY_R1_Bckl_Sw_RM_Stat_SAM_R {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** BUCKLE SWITCH REAR RIGHT STATE (by SAM_R) / status Belt lock right */
enum class BODY_R1_Bckl_Sw_RR_Stat_SAM_R {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** BUCKLE SWITCH REAR LEFT STATE (by SAM_R) / Status Curtle Rear Left */
enum class BODY_R1_Bckl_Sw_RL_Stat_SAM_R {
	OK = 0, // Seatbelt Fasted
	NOT = 1, // Seatbelt Not Fasted
	FLT = 2, // BUCKLE SWITCH FAULT
	SNA = 3, // Signal Not Available
};

/** Vehicle Driving Program Switch Pressed / Button Driving Program */
enum class BODY_R2_VehDrvProgSw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Steering Wheel Conditioning Active / steering wheel climatization active */
enum class BODY_R2_StW_Cond_Actv {
	OFF = 0, // Stearing Wheel Conditioning Off
	HEAT = 1, // Stearing Wheel Heating Active
	COOL = 2, // Stearing Wheel Cooling Active
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
enum class BODY_R2_SuspLvlAdjSw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Switch Parktronic / City Assistant Pressed / Button Parktronic / CAS Actuated */
enum class BODY_R2_PTS_Sw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** NightView Switch Pressed / NightView Button */
enum class BODY_R2_NV_Sw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Electronic Stability Program Switch Pressed / ESP Button */
enum class BODY_R2_ESP_Sw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Parking Assistance Switch Pressed / Parking Assist Taster */
enum class BODY_R2_PKAS_Sw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** BSM War Unit Right State / Status BSM Warning Unit right */
enum class BODY_R2_BSM_WarnUnit_Rt_Stat {
	NDEF0 = 0, // Not Defined
	OK = 1, // BSM Warnunit OK
	ERROR = 2, // BSM Warnunit Error
	SNA = 3, // Signal Not Available
};

/** BSM Warn Unit Left State / Status BSM Warning Unit Links */
enum class BODY_R2_BSM_WarnUnit_Lt_Stat {
	NDEF0 = 0, // Not Defined
	OK = 1, // BSM Warnunit OK
	ERROR = 2, // BSM Warnunit Error
	SNA = 3, // Signal Not Available
};

/** Downhill Speed ​​Regulation Switch Pressed / Downhave Speed ​​Control Button */
enum class BODY_R2_DSR_Sw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Telematics Switches pressed / telematics switch operated */
enum class BODY_R2_Tlm_Sw_Psd {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Phone Call OR Speech Dialogue System Active / Telephone Disconnection or Language Conditioning System */
enum class BODY_R2_Phonecall_SDS_Actv {
	INACT = 0, // Inactive
	ACTV = 1, // Phone Call OR SDS Active
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch Pressed / Button Active Damping Control */
enum class BODY_R2_ADC_Sw_Psd {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
enum class BODY_R2_SuspLvlAdjSw_Psd_CTRL_L {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Active Damping Control Switch Pressed / Button Active Damping Control */
enum class BODY_R2_ADC_Sw_Psd_CTRL_L {
	NPSD = 0, // Not pressed
	PSD = 1, // pressed
	NDEF2 = 2, // Not Defined
	SNA = 3, // Signal Not Available
};

/** Off Road Switch Pressed / Off Road Button */
enum class BODY_R2_OffRoadSw_Psd {
	NPSD = 0, // Not pressed
	NDEF1 = 1, // Not Defined
	PSD = 2, // pressed
	SNA = 3, // Signal Not Available
};

/** Conditions for Ignition Cycle Counter (RBM) State / Status Conditions for Ignition Cycle Counter (RBM) */
enum class ECM_OBD_OBD_IgnCycCntCond_Stat {
	INACT = 0, // Conditions Not Fulfilled
	ACTV = 1, // Conditions Fulfilled
	FLT = 2, // Fault
	NDEF3 = 3, // Not Defined
};

/** Conditions for General Denominator (RBM) State / Status Conditions for General Denominator (RBM) */
enum class ECM_OBD_OBD_GnrlDenCond_Stat {
	INACT = 0, // Conditions Not Fulfilled
	ACTV = 1, // Conditions Fulfilled
	FLT = 2, // Fault
	NDEF3 = 3, // Not Defined
};

/** Network Management Mode / Network Management Mode */
enum class NM_ECM_NM_Mode {
	LHOM = 252, // LIMP-HOME Fashion
	RING = 253, // ring fashion
	ALIVE = 254, // Alive mode
	SNA = 255, // Signal Not Available
};

/** Network Management UserData Launch Type / Network Management UserData Sendart */
enum class NM_ECM_NM_Ud_Launch {
	BROADCAST = 4, // Broadcast or Start Alive
	SNA = 63, // Signal Not Available
};

/** Network Management UserData Service No./netzmanagement UserData service */
enum class NM_ECM_NM_Ud_Srv {
	DATA_OK_BC = 1, // UserData Transmission OK (Broadcast)
	WAKEUP_SA = 2, // Wakeup status (start alive)
	SBC_STAT_BC = 5, // System Base Chip Status (Broadcast)
	AWAKE_BC = 15, // Stay Awake Reason (Broadcast)
	SNA = 255, // Signal Not Available
};

/** Wakeup Reason / Wake-up */
enum class NM_ECM_WakeupRsn_ECM {
	NETWORK = 0, // Wakeup by Network
	CHASSIS = 11, // Wakeup by Chassis Can
	POWERTRAIN = 13, // Wakeup by Powertrain Can
	TERM_15 = 130, // Wakeup by Discrete Terminal 15 Signal
	SNA = 255, // Signal Not Available
};

/** Network Identification No./netzwerk-id */
enum class NM_ECM_Nw_Id {
	BACKBONE = 4, // Backbone CAN
	DIAGNOSTICS = 5, // Diagnostics CAN
	BODY = 6, // Body CAN
	CHASSIS = 7, // Chassis CAN
	POWERTRAIN = 8, // Powertrain Can
	PT_SENSOR = 9, // Powertrain Sensor CAN
	DYNAMICS = 11, // Dynamics CAN
	HEADUNIT = 14, // HeadUnit CAN
	IMPACT = 15, // Impact CAN
	MULTIPURPOSE = 16, // Multipurpose CAN
	SNA = 255, // Signal Not Available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CTRL_U_A2 */
	uint32_t get_canid(){ return CTRL_U_A2_CAN_ID; }
    /** Sets Switch Illumination Level (Term 58D) / Search Lighting (class 58D). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_SwIllLvl(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Switch Illumination Level (Term 58D) / Search Lighting (class 58D). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_SwIllLvl() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets Display Brightness Instrument Cluster / Display Brightness Combination Strument. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_DispBrt_IC(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Display Brightness Instrument Cluster / Display Brightness Combination Strument. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_DispBrt_IC() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Display Brightness Headunit / Display Brightness Headunit. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: %) */
    void set_DispBrt_HU_V2(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Display Brightness Headunit / Display Brightness Headunit. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: %) */
    uint8_t get_DispBrt_HU_V2() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Display Brightness Night View / Display Brightness Night View. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_DispBrt_NV(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Display Brightness Night View / Display Brightness Night View. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_DispBrt_NV() const { return (uint8_t)(raw >> 32 & 0xff); }
        
} CTRL_U_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ECM_A1 */
	uint32_t get_canid(){ return ECM_A1_CAN_ID; }
    /** Sets Engine Coolant Temperature / Motor Coolant Temperature. Conversion formula (To raw from real): y=(x+40.0)/1.00 (Unit: °C) */
    void set_EngCoolTemp(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Engine Coolant Temperature / Motor Coolant Temperature. Conversion formula (To real from raw): y=(1.00x)-40.0 (Unit: °C) */
    uint8_t get_EngCoolTemp() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets Intake Air Temperature / intake air temperature. Conversion formula (To raw from real): y=(x+40.0)/1.00 (Unit: °C) */
    void set_IntkAirTemp(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Intake Air Temperature / intake air temperature. Conversion formula (To real from raw): y=(1.00x)-40.0 (Unit: °C) */
    uint8_t get_IntkAirTemp() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Engine OIL Temperature / Engine Oil Temperature. Conversion formula (To raw from real): y=(x+40.0)/1.00 (Unit: °C) */
    void set_EngOilTemp(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Engine OIL Temperature / Engine Oil Temperature. Conversion formula (To real from raw): y=(1.00x)-40.0 (Unit: °C) */
    uint8_t get_EngOilTemp() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Engine Oil Level / Engine Oil Level. Conversion formula (To raw from real): y=(x-0.0)/0.31 (Unit: mm) */
    void set_EngOilLvl(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Engine Oil Level / Engine Oil Level. Conversion formula (To real from raw): y=(0.31x)+0.0 (Unit: mm) */
    uint8_t get_EngOilLvl() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Engine Oil Quality / Engine Oil Quality. Conversion formula (To raw from real): y=(x-1.0)/0.02 */
    void set_EngOilQual(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Engine Oil Quality / Engine Oil Quality. Conversion formula (To real from raw): y=(0.02x)+1.0 */
    uint8_t get_EngOilQual() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Fuel Consumption / Consumption. Conversion formula (To raw from real): y=(x-0.0)/0.22 (Unit: µl/250ms) */
    void set_FuelCons(uint16_t value){ raw = (raw & 0xffffffffff0000ff) | ((uint64_t)value & 0xffff) << 8; }

    /** Gets Fuel Consumption / Consumption. Conversion formula (To real from raw): y=(0.22x)+0.0 (Unit: µl/250ms) */
    uint16_t get_FuelCons() const { return (uint16_t)(raw >> 8 & 0xffff); }
        
    /** Sets Outside Air Pressure / outdoor air pressure. Conversion formula (To raw from real): y=(x-0.0)/7.80 (Unit: hPa) */
    void set_AirPress_Outsd(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Outside Air Pressure / outdoor air pressure. Conversion formula (To real from raw): y=(7.80x)+0.0 (Unit: hPa) */
    uint8_t get_AirPress_Outsd() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ECM_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ECM_A2 */
	uint32_t get_canid(){ return ECM_A2_CAN_ID; }
    /** Sets Additional Water Pump on Request (by Engine Control Module) / Turn on auxiliary water pump */
    void set_AddWtrPmp_On_Rq_ECM(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Additional Water Pump on Request (by Engine Control Module) / Turn on auxiliary water pump */
    bool get_AddWtrPmp_On_Rq_ECM() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Heating Power State / Status Heating power */
    void set_HtPwr_Stat(ECM_A2_HtPwr_Stat value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Heating Power State / Status Heating power */
    ECM_A2_HtPwr_Stat get_HtPwr_Stat() const { return (ECM_A2_HtPwr_Stat)(raw >> 56 & 0x3); }
        
    /** Sets Maximum Aircon Compressor Crackish Torque / Limit Momper (Crankshaft) Climate Compressor. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: Nm) */
    void set_HVAC_CompTrq_Max(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Maximum Aircon Compressor Crackish Torque / Limit Momper (Crankshaft) Climate Compressor. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: Nm) */
    uint8_t get_HVAC_CompTrq_Max() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Clutch is disengaged / clutch */
    void set_Clutch_Disengg(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Clutch is disengaged / clutch */
    bool get_Clutch_Disengg() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Fuel Pump on Request / Switch-on request Fuel pump */
    void set_FuelPmp_On_Rq(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Fuel Pump on Request / Switch-on request Fuel pump */
    bool get_FuelPmp_On_Rq() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Desired Engine Idle Speed / Motorle Read Rate. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: rpm) */
    void set_EngIdleRPM_Dsr(uint16_t value){ raw = (raw & 0xffffffc000ffffff) | ((uint64_t)value & 0x3fff) << 24; }

    /** Gets Desired Engine Idle Speed / Motorle Read Rate. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: rpm) */
    uint16_t get_EngIdleRPM_Dsr() const { return (uint16_t)(raw >> 24 & 0x3fff); }
        
    /** Sets Actual Engine Efficiency / Efficiency Combustion Engine. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: %) */
    void set_EngEff(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Actual Engine Efficiency / Efficiency Combustion Engine. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: %) */
    uint8_t get_EngEff() const { return (uint8_t)(raw >> 16 & 0xff); }
        
    /** Sets Fuel System Control Module Alive / FSCM Life Sign */
    void set_FSCM_Alive(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets Fuel System Control Module Alive / FSCM Life Sign */
    bool get_FSCM_Alive() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets Enable Engine Torque Increase Request / Enable Engine Torque Increase TCM */
    void set_EngTrqInc_Enbl_TCM(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets Enable Engine Torque Increase Request / Enable Engine Torque Increase TCM */
    bool get_EngTrqInc_Enbl_TCM() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets Engine Torque Increase Plausibility Check Available / Plausibility Check for Engine Torque Increase available */
    void set_EngTrqIncChk_Avl(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets Engine Torque Increase Plausibility Check Available / Plausibility Check for Engine Torque Increase available */
    bool get_EngTrqIncChk_Avl() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets Particle Filter Correction Offset on EngtrqMaxCorrfCTR / Particle FilterCorrection value. Conversion formula (To raw from real): y=(x-0.0)/0.03 */
    void set_ParticleFltrCorrOffset(uint8_t value){ raw = (raw & 0xfffffffffffff0ff) | ((uint64_t)value & 0xf) << 8; }

    /** Gets Particle Filter Correction Offset on EngtrqMaxCorrfCTR / Particle FilterCorrection value. Conversion formula (To real from raw): y=(0.03x)+0.0 */
    uint8_t get_ParticleFltrCorrOffset() const { return (uint8_t)(raw >> 8 & 0xf); }
        
    /** Sets Fuel Pressure Request / Request Fuel Pressure. Conversion formula (To raw from real): y=(x-0.0)/0.05 (Unit: bar) */
    void set_FuelPress_Rq(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Fuel Pressure Request / Request Fuel Pressure. Conversion formula (To real from raw): y=(0.05x)+0.0 (Unit: bar) */
    uint8_t get_FuelPress_Rq() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ECM_A2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of EIS_A1 */
	uint32_t get_canid(){ return EIS_A1_CAN_ID; }
    /** Sets Transmission Parking Position Request Enable / SBC request: "P" allowed */
    void set_TxPkPosn_Rq_SBC_Enbl(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Transmission Parking Position Request Enable / SBC request: "P" allowed */
    bool get_TxPkPosn_Rq_SBC_Enbl() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Transmission Parking Position Auto Enable / Auto- "P" Enabled */
    void set_TxPkPosnAuto_Enbl(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Transmission Parking Position Auto Enable / Auto- "P" Enabled */
    bool get_TxPkPosnAuto_Enbl() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Transmission Parking Position Emergency Request / Request Not- "P" */
    void set_TxPkPosn_Emg_Rq(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Transmission Parking Position Emergency Request / Request Not- "P" */
    bool get_TxPkPosn_Emg_Rq() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Transmission Parking Position Request / Ice Wish: "P" */
    void set_TxPkPosn_Rq(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Transmission Parking Position Request / Ice Wish: "P" */
    bool get_TxPkPosn_Rq() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Ignition is on and starting procedure IS INACTIVE (15x) / Ignition AN / motor start */
    void set_Ign_On_StProc_Inact(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Ignition is on and starting procedure IS INACTIVE (15x) / Ignition AN / motor start */
    bool get_Ign_On_StProc_Inact() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Ignition Switch State / Terminal Status */
    void set_ISw_Stat(EIS_A1_ISw_Stat value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Ignition Switch State / Terminal Status */
    EIS_A1_ISw_Stat get_ISw_Stat() const { return (EIS_A1_ISw_Stat)(raw >> 56 & 0x7); }
        
    /** Sets Automatic Door Lock Request Source / Source of the requirement Automatic door lock */
    void set_AutoDrLk_Rq_Src(EIS_A1_AutoDrLk_Rq_Src value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Automatic Door Lock Request Source / Source of the requirement Automatic door lock */
    EIS_A1_AutoDrLk_Rq_Src get_AutoDrLk_Rq_Src() const { return (EIS_A1_AutoDrLk_Rq_Src)(raw >> 54 & 0x3); }
        
    /** Sets Several keys detected / multiple keys detected */
    void set_KG_SevKeysDet(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Several keys detected / multiple keys detected */
    bool get_KG_SevKeysDet() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Keyless Go Start Switch Pressed / Keyless Go Start Button */
    void set_KG_StSw_Psd(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Keyless Go Start Switch Pressed / Keyless Go Start Button */
    bool get_KG_StSw_Psd() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Enable Engine Start Request / Keyles Go Ready Conditions */
    void set_EngSt_Enbl_Rq_KG(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Enable Engine Start Request / Keyles Go Ready Conditions */
    bool get_EngSt_Enbl_Rq_KG() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Keyless Go Ignition Control Active / Keyless Go Terminal Control Active */
    void set_KG_IgnCtrl_Actv(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Keyless Go Ignition Control Active / Keyless Go Terminal Control Active */
    bool get_KG_IgnCtrl_Actv() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets Profile Mode State / Profile Mode Actual value */
    void set_ProfMd_Stat(EIS_A1_ProfMd_Stat value){ raw = (raw & 0xffff3fffffffffff) | ((uint64_t)value & 0x3) << 46; }

    /** Gets Profile Mode State / Profile Mode Actual value */
    EIS_A1_ProfMd_Stat get_ProfMd_Stat() const { return (EIS_A1_ProfMd_Stat)(raw >> 46 & 0x3); }
        
    /** Sets Automatic Door Lock State / Status Automatic door lock */
    void set_AutoDrLk_Stat(EIS_A1_AutoDrLk_Stat value){ raw = (raw & 0xffffcfffffffffff) | ((uint64_t)value & 0x3) << 44; }

    /** Gets Automatic Door Lock State / Status Automatic door lock */
    EIS_A1_AutoDrLk_Stat get_AutoDrLk_Stat() const { return (EIS_A1_AutoDrLk_Stat)(raw >> 44 & 0x3); }
        
    /** Sets Actual Profile / News Profile */
    void set_Prof_Stat(EIS_A1_Prof_Stat value){ raw = (raw & 0xfffff0ffffffffff) | ((uint64_t)value & 0xf) << 40; }

    /** Gets Actual Profile / News Profile */
    EIS_A1_Prof_Stat get_Prof_Stat() const { return (EIS_A1_Prof_Stat)(raw >> 40 & 0xf); }
        
    /** Sets Central Locking System Gas Door State / ZV Status Tank Flap */
    void set_CLkS_Gas_Dr_Stat(EIS_A1_CLkS_Gas_Dr_Stat value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }

    /** Gets Central Locking System Gas Door State / ZV Status Tank Flap */
    EIS_A1_CLkS_Gas_Dr_Stat get_CLkS_Gas_Dr_Stat() const { return (EIS_A1_CLkS_Gas_Dr_Stat)(raw >> 38 & 0x3); }
        
    /** Sets Central Locking System Deck Lid State / ZV Status Tail Cover */
    void set_CLkS_DL_Stat(EIS_A1_CLkS_DL_Stat value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets Central Locking System Deck Lid State / ZV Status Tail Cover */
    EIS_A1_CLkS_DL_Stat get_CLkS_DL_Stat() const { return (EIS_A1_CLkS_DL_Stat)(raw >> 36 & 0x3); }
        
    /** Sets Central Locking System Lock State / Condition Central Locking */
    void set_CLkS_Lk_Stat(EIS_A1_CLkS_Lk_Stat value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets Central Locking System Lock State / Condition Central Locking */
    EIS_A1_CLkS_Lk_Stat get_CLkS_Lk_Stat() const { return (EIS_A1_CLkS_Lk_Stat)(raw >> 34 & 0x3); }
        
    /** Sets Central Locking System Door Rear Right State / ZV Status Door Rear Right */
    void set_CLkS_Dr_RR_Stat(EIS_A1_CLkS_Dr_RR_Stat value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets Central Locking System Door Rear Right State / ZV Status Door Rear Right */
    EIS_A1_CLkS_Dr_RR_Stat get_CLkS_Dr_RR_Stat() const { return (EIS_A1_CLkS_Dr_RR_Stat)(raw >> 30 & 0x3); }
        
    /** Sets Central Locking System Door Rear Left State / ZV Status Door Rear Left */
    void set_CLkS_Dr_RL_Stat(EIS_A1_CLkS_Dr_RL_Stat value){ raw = (raw & 0xffffffffcfffffff) | ((uint64_t)value & 0x3) << 28; }

    /** Gets Central Locking System Door Rear Left State / ZV Status Door Rear Left */
    EIS_A1_CLkS_Dr_RL_Stat get_CLkS_Dr_RL_Stat() const { return (EIS_A1_CLkS_Dr_RL_Stat)(raw >> 28 & 0x3); }
        
    /** Sets Central Locking System Door Front Right State / ZV Status Door Front Right */
    void set_CLkS_Dr_FR_Stat(EIS_A1_CLkS_Dr_FR_Stat value){ raw = (raw & 0xfffffffff3ffffff) | ((uint64_t)value & 0x3) << 26; }

    /** Gets Central Locking System Door Front Right State / ZV Status Door Front Right */
    EIS_A1_CLkS_Dr_FR_Stat get_CLkS_Dr_FR_Stat() const { return (EIS_A1_CLkS_Dr_FR_Stat)(raw >> 26 & 0x3); }
        
    /** Sets Central Locking System Door Front Left State / ZV Status Door Front Left */
    void set_CLkS_Dr_FL_Stat(EIS_A1_CLkS_Dr_FL_Stat value){ raw = (raw & 0xfffffffffcffffff) | ((uint64_t)value & 0x3) << 24; }

    /** Gets Central Locking System Door Front Left State / ZV Status Door Front Left */
    EIS_A1_CLkS_Dr_FL_Stat get_CLkS_Dr_FL_Stat() const { return (EIS_A1_CLkS_Dr_FL_Stat)(raw >> 24 & 0x3); }
        
    /** Sets Keyline 8 Approved for Keyless Go / Keyline 8 Released for kg */
    void set_KeyLine8_Appr(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Keyline 8 Approved for Keyless Go / Keyline 8 Released for kg */
    bool get_KeyLine8_Appr() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets Keyline 7 Approved for Keyless GO / Keyline 7 released for kg */
    void set_KeyLine7_Appr(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Keyline 7 Approved for Keyless GO / Keyline 7 released for kg */
    bool get_KeyLine7_Appr() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Keyline 6 Approved for Keyless Go / Keyline 6 Released for kg */
    void set_KeyLine6_Appr(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets Keyline 6 Approved for Keyless Go / Keyline 6 Released for kg */
    bool get_KeyLine6_Appr() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Keyline 5 Approved for Keyless Go / Keyline 5 released for kg */
    void set_KeyLine5_Appr(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets Keyline 5 Approved for Keyless Go / Keyline 5 released for kg */
    bool get_KeyLine5_Appr() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets Keyline 4 Approved for Keyless Go / Keyline 4 released for kg */
    void set_KeyLine4_Appr(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets Keyline 4 Approved for Keyless Go / Keyline 4 released for kg */
    bool get_KeyLine4_Appr() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Keyline 3 Approved for Keyless Go / Keyline 3 Released for kg */
    void set_KeyLine3_Appr(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Keyline 3 Approved for Keyless Go / Keyline 3 Released for kg */
    bool get_KeyLine3_Appr() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets Keyline 2 Approved for Keyless Go / Keyline 2 Released for kg */
    void set_KeyLine2_Appr(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets Keyline 2 Approved for Keyless Go / Keyline 2 Released for kg */
    bool get_KeyLine2_Appr() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Keyline 1 Approved for Keyless Go / Keyline 1 released for kg */
    void set_KeyLine1_Appr(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Keyline 1 Approved for Keyless Go / Keyline 1 released for kg */
    bool get_KeyLine1_Appr() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_EIS_A1(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_EIS_A1() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Central Locking System Lock State / Condition Central Locking */
    void set_CLkS_Lk_Stat3(EIS_A1_CLkS_Lk_Stat3 value){ raw = (raw & 0xfffffffffffff8ff) | ((uint64_t)value & 0x7) << 8; }

    /** Gets Central Locking System Lock State / Condition Central Locking */
    EIS_A1_CLkS_Lk_Stat3 get_CLkS_Lk_Stat3() const { return (EIS_A1_CLkS_Lk_Stat3)(raw >> 8 & 0x7); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_EIS_A1(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_EIS_A1() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} EIS_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of IC_A1 */
	uint32_t get_canid(){ return IC_A1_CAN_ID; }
    /** Sets Displayed Vehicle Speed (Without Attenuation) / Displayed Speed (without pointer attenuation). Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: km/h) */
    void set_VehSpd_Disp(uint16_t value){ raw = (raw & 0xf000ffffffffffff) | ((uint64_t)value & 0xfff) << 48; }

    /** Gets Displayed Vehicle Speed (Without Attenuation) / Displayed Speed (without pointer attenuation). Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: km/h) */
    uint16_t get_VehSpd_Disp() const { return (uint16_t)(raw >> 48 & 0xfff); }
        
    /** Sets Displayed Outside Air Temperature / Displayed Outdoor Air Temperature. Conversion formula (To raw from real): y=(x+40.0)/0.50 (Unit: °C) */
    void set_AirTemp_Outsd_Disp(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Displayed Outside Air Temperature / Displayed Outdoor Air Temperature. Conversion formula (To real from raw): y=(0.50x)-40.0 (Unit: °C) */
    uint8_t get_AirTemp_Outsd_Disp() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets PTS DISPLAY STATE FROM IC / PTS Display state */
    void set_PTS_Disp_Stat_IC(IC_A1_PTS_Disp_Stat_IC value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }

    /** Gets PTS DISPLAY STATE FROM IC / PTS Display state */
    IC_A1_PTS_Disp_Stat_IC get_PTS_Disp_Stat_IC() const { return (IC_A1_PTS_Disp_Stat_IC)(raw >> 38 & 0x3); }
        
    /** Sets HIGH BEAM ENABLE / TRANSPORT LIGHT */
    void set_HiBm_Enbl(IC_A1_HiBm_Enbl value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets HIGH BEAM ENABLE / TRANSPORT LIGHT */
    IC_A1_HiBm_Enbl get_HiBm_Enbl() const { return (IC_A1_HiBm_Enbl)(raw >> 36 & 0x3); }
        
    /** Sets Engine Shut-Off Time / Motor Storage Time. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: min) */
    void set_EngShutOffTm(uint16_t value){ raw = (raw & 0xfffffff000ffffff) | ((uint64_t)value & 0xfff) << 24; }

    /** Gets Engine Shut-Off Time / Motor Storage Time. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: min) */
    uint16_t get_EngShutOffTm() const { return (uint16_t)(raw >> 24 & 0xfff); }
        
    /** Sets Odometer (for Everyone, Fffffeh: Signal Invalid) / Mileage (for all, Fffffeheh: signal invalid). Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: km) */
    void set_Odo(uint32_t value){ raw = (raw & 0xffffffffff000000) | ((uint64_t)value & 0xffffff) << 0; }

    /** Gets Odometer (for Everyone, Fffffeh: Signal Invalid) / Mileage (for all, Fffffeheh: signal invalid). Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: km) */
    uint32_t get_Odo() const { return (uint32_t)(raw >> 0 & 0xffffff); }
        
} IC_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of IC_A3 */
	uint32_t get_canid(){ return IC_A3_CAN_ID; }
    /** Sets Radar Sensor Mode Request / Request Radar Sensoric Mode */
    void set_RadarSensMd_Rq(IC_A3_RadarSensMd_Rq value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Radar Sensor Mode Request / Request Radar Sensoric Mode */
    IC_A3_RadarSensMd_Rq get_RadarSensMd_Rq() const { return (IC_A3_RadarSensMd_Rq)(raw >> 62 & 0x3); }
        
    /** Sets Daytime Running Lamps on Request / Request Turn on daytime running light */
    void set_DRLt_On_Rq(IC_A3_DRLt_On_Rq value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets Daytime Running Lamps on Request / Request Turn on daytime running light */
    IC_A3_DRLt_On_Rq get_DRLt_On_Rq() const { return (IC_A3_DRLt_On_Rq)(raw >> 60 & 0x3); }
        
    /** Sets Tire Pressure Module Activate Request / Request Tire Pressure Control Activate */
    void set_TPM_Actv_Rq_V2(IC_A3_TPM_Actv_Rq_V2 value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Tire Pressure Module Activate Request / Request Tire Pressure Control Activate */
    IC_A3_TPM_Actv_Rq_V2 get_TPM_Actv_Rq_V2() const { return (IC_A3_TPM_Actv_Rq_V2)(raw >> 58 & 0x3); }
        
    /** Sets Flat Tire Warning On Request / Request PlatRollwarner */
    void set_FTW_On_Rq(IC_A3_FTW_On_Rq value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Flat Tire Warning On Request / Request PlatRollwarner */
    IC_A3_FTW_On_Rq get_FTW_On_Rq() const { return (IC_A3_FTW_On_Rq)(raw >> 56 & 0x3); }
        
    /** Sets Taxi Tone Fashion Request / Request Taxiton Mode */
    void set_TaxiToneMd_Rq(IC_A3_TaxiToneMd_Rq value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Taxi Tone Fashion Request / Request Taxiton Mode */
    IC_A3_TaxiToneMd_Rq get_TaxiToneMd_Rq() const { return (IC_A3_TaxiToneMd_Rq)(raw >> 54 & 0x3); }
        
    /** Sets Taxi Roof Lamps Fashion Request / Request Roof Sign Mode */
    void set_TaxiRoofLmpMd_Rq(IC_A3_TaxiRoofLmpMd_Rq value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets Taxi Roof Lamps Fashion Request / Request Roof Sign Mode */
    IC_A3_TaxiRoofLmpMd_Rq get_TaxiRoofLmpMd_Rq() const { return (IC_A3_TaxiRoofLmpMd_Rq)(raw >> 52 & 0x3); }
        
    /** Sets Taxi Fashion Request / Request Taximodus */
    void set_TaxiMd_Rq(IC_A3_TaxiMd_Rq value){ raw = (raw & 0xfff3ffffffffffff) | ((uint64_t)value & 0x3) << 50; }

    /** Gets Taxi Fashion Request / Request Taximodus */
    IC_A3_TaxiMd_Rq get_TaxiMd_Rq() const { return (IC_A3_TaxiMd_Rq)(raw >> 50 & 0x3); }
        
    /** Sets Data Radio Menu State / Status Data Feature Menu */
    void set_DataRadioMenu_Stat(IC_A3_DataRadioMenu_Stat value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets Data Radio Menu State / Status Data Feature Menu */
    IC_A3_DataRadioMenu_Stat get_DataRadioMenu_Stat() const { return (IC_A3_DataRadioMenu_Stat)(raw >> 48 & 0x3); }
        
    /** Sets Temperature Unit / Temperature Unit */
    void set_UnitTemp_Rq(IC_A3_UnitTemp_Rq value){ raw = (raw & 0xffff3fffffffffff) | ((uint64_t)value & 0x3) << 46; }

    /** Gets Temperature Unit / Temperature Unit */
    IC_A3_UnitTemp_Rq get_UnitTemp_Rq() const { return (IC_A3_UnitTemp_Rq)(raw >> 46 & 0x3); }
        
    /** Sets DRVM Audio Mode Request / Request DRVM Audiomodus */
    void set_DRVM_AudioMd_Rq(IC_A3_DRVM_AudioMd_Rq value){ raw = (raw & 0xffffcfffffffffff) | ((uint64_t)value & 0x3) << 44; }

    /** Gets DRVM Audio Mode Request / Request DRVM Audiomodus */
    IC_A3_DRVM_AudioMd_Rq get_DRVM_AudioMd_Rq() const { return (IC_A3_DRVM_AudioMd_Rq)(raw >> 44 & 0x3); }
        
    /** Sets DRVM System Mode Request / Request DRVM System Mode */
    void set_DRVM_SysMd_Rq(IC_A3_DRVM_SysMd_Rq value){ raw = (raw & 0xfffff3ffffffffff) | ((uint64_t)value & 0x3) << 42; }

    /** Gets DRVM System Mode Request / Request DRVM System Mode */
    IC_A3_DRVM_SysMd_Rq get_DRVM_SysMd_Rq() const { return (IC_A3_DRVM_SysMd_Rq)(raw >> 42 & 0x3); }
        
    /** Sets Taximeter Request / Request Taximeter */
    void set_TAX_Rq(IC_A3_TAX_Rq value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Taximeter Request / Request Taximeter */
    IC_A3_TAX_Rq get_TAX_Rq() const { return (IC_A3_TAX_Rq)(raw >> 40 & 0x3); }
        
    /** Sets IHC Mode Request / Request IHC Mode */
    void set_IHC_Md_Rq(IC_A3_IHC_Md_Rq value){ raw = (raw & 0xffffff3fffffffff) | ((uint64_t)value & 0x3) << 38; }

    /** Gets IHC Mode Request / Request IHC Mode */
    IC_A3_IHC_Md_Rq get_IHC_Md_Rq() const { return (IC_A3_IHC_Md_Rq)(raw >> 38 & 0x3); }
        
    /** Sets Eco Mode Request / Request ECO Mode */
    void set_ECO_Md_Rq(IC_A3_ECO_Md_Rq value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets Eco Mode Request / Request ECO Mode */
    IC_A3_ECO_Md_Rq get_ECO_Md_Rq() const { return (IC_A3_ECO_Md_Rq)(raw >> 36 & 0x3); }
        
    /** Sets AFS Mode Request / Request AFS Mode */
    void set_AFS_Md_Rq(IC_A3_AFS_Md_Rq value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets AFS Mode Request / Request AFS Mode */
    IC_A3_AFS_Md_Rq get_AFS_Md_Rq() const { return (IC_A3_AFS_Md_Rq)(raw >> 34 & 0x3); }
        
    /** Sets Pressure Unit / Pressure Unit */
    void set_UnitPress_Rq(IC_A3_UnitPress_Rq value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets Pressure Unit / Pressure Unit */
    IC_A3_UnitPress_Rq get_UnitPress_Rq() const { return (IC_A3_UnitPress_Rq)(raw >> 32 & 0x3); }
        
    /** Sets Speed ​​Limit Assist Warning Level Request / Warning Spring Request Speed ​​Limitation Assistant */
    void set_SLA_WarnLvl_Rq(IC_A3_SLA_WarnLvl_Rq value){ raw = (raw & 0xffffffff1fffffff) | ((uint64_t)value & 0x7) << 29; }

    /** Gets Speed ​​Limit Assist Warning Level Request / Warning Spring Request Speed ​​Limitation Assistant */
    IC_A3_SLA_WarnLvl_Rq get_SLA_WarnLvl_Rq() const { return (IC_A3_SLA_WarnLvl_Rq)(raw >> 29 & 0x7); }
        
    /** Sets SPEED LIMIT ASSIST MODE REQUEST / MODE DESCRIPTION SPEED LIMITATION WATER */
    void set_SLA_Md_Rq(IC_A3_SLA_Md_Rq value){ raw = (raw & 0xffffffffe7ffffff) | ((uint64_t)value & 0x3) << 27; }

    /** Gets SPEED LIMIT ASSIST MODE REQUEST / MODE DESCRIPTION SPEED LIMITATION WATER */
    IC_A3_SLA_Md_Rq get_SLA_Md_Rq() const { return (IC_A3_SLA_Md_Rq)(raw >> 27 & 0x3); }
        
    /** Sets ALDW Fashion Request / Request ALDW mode */
    void set_ALDW_Md_Rq(IC_A3_ALDW_Md_Rq value){ raw = (raw & 0xfffffffff8ffffff) | ((uint64_t)value & 0x7) << 24; }

    /** Gets ALDW Fashion Request / Request ALDW mode */
    IC_A3_ALDW_Md_Rq get_ALDW_Md_Rq() const { return (IC_A3_ALDW_Md_Rq)(raw >> 24 & 0x7); }
        
    /** Sets BSM Mode Request / Request BSM Mode */
    void set_BSM_Md_Rq(IC_A3_BSM_Md_Rq value){ raw = (raw & 0xffffffffff3fffff) | ((uint64_t)value & 0x3) << 22; }

    /** Gets BSM Mode Request / Request BSM Mode */
    IC_A3_BSM_Md_Rq get_BSM_Md_Rq() const { return (IC_A3_BSM_Md_Rq)(raw >> 22 & 0x3); }
        
    /** Sets BSM Acoustical Warning Enable / BSM Acoustic Warning allowed */
    void set_BSM_AcustWarn_Enbl(IC_A3_BSM_AcustWarn_Enbl value){ raw = (raw & 0xffffffffffcfffff) | ((uint64_t)value & 0x3) << 20; }

    /** Gets BSM Acoustical Warning Enable / BSM Acoustic Warning allowed */
    IC_A3_BSM_AcustWarn_Enbl get_BSM_AcustWarn_Enbl() const { return (IC_A3_BSM_AcustWarn_Enbl)(raw >> 20 & 0x3); }
        
    /** Sets Parktronic Mode Request / Parktronic Mode Set */
    void set_PTS_Md_Rq(IC_A3_PTS_Md_Rq value){ raw = (raw & 0xfffffffffff3ffff) | ((uint64_t)value & 0x3) << 18; }

    /** Gets Parktronic Mode Request / Parktronic Mode Set */
    IC_A3_PTS_Md_Rq get_PTS_Md_Rq() const { return (IC_A3_PTS_Md_Rq)(raw >> 18 & 0x3); }
        
    /** Sets Parktronic Acoustic Warning Enable / PTS acoustic warning released */
    void set_PTS_AcustWarn_Enbl(IC_A3_PTS_AcustWarn_Enbl value){ raw = (raw & 0xfffffffffffcffff) | ((uint64_t)value & 0x3) << 16; }

    /** Gets Parktronic Acoustic Warning Enable / PTS acoustic warning released */
    IC_A3_PTS_AcustWarn_Enbl get_PTS_AcustWarn_Enbl() const { return (IC_A3_PTS_AcustWarn_Enbl)(raw >> 16 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - Steering / Driving Program for Steering */
    void set_VehDrvProgSys4_Md_Rq(IC_A3_VehDrvProgSys4_Md_Rq value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets Vehicle Driving Program Fashion Request - Steering / Driving Program for Steering */
    IC_A3_VehDrvProgSys4_Md_Rq get_VehDrvProgSys4_Md_Rq() const { return (IC_A3_VehDrvProgSys4_Md_Rq)(raw >> 14 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - Drive / Drive Program for powertrain */
    void set_VehDrvProgSys3_Md_Rq(IC_A3_VehDrvProgSys3_Md_Rq value){ raw = (raw & 0xffffffffffffcfff) | ((uint64_t)value & 0x3) << 12; }

    /** Gets Vehicle Driving Program Fashion Request - Drive / Drive Program for powertrain */
    IC_A3_VehDrvProgSys3_Md_Rq get_VehDrvProgSys3_Md_Rq() const { return (IC_A3_VehDrvProgSys3_Md_Rq)(raw >> 12 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - Brake / Driving program for brake */
    void set_VehDrvProgSys2_Md_Rq(IC_A3_VehDrvProgSys2_Md_Rq value){ raw = (raw & 0xfffffffffffff3ff) | ((uint64_t)value & 0x3) << 10; }

    /** Gets Vehicle Driving Program Fashion Request - Brake / Driving program for brake */
    IC_A3_VehDrvProgSys2_Md_Rq get_VehDrvProgSys2_Md_Rq() const { return (IC_A3_VehDrvProgSys2_Md_Rq)(raw >> 10 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - Suspension / Driving Program for Suspension */
    void set_VehDrvProgSys1_Md_Rq(IC_A3_VehDrvProgSys1_Md_Rq value){ raw = (raw & 0xfffffffffffffcff) | ((uint64_t)value & 0x3) << 8; }

    /** Gets Vehicle Driving Program Fashion Request - Suspension / Driving Program for Suspension */
    IC_A3_VehDrvProgSys1_Md_Rq get_VehDrvProgSys1_Md_Rq() const { return (IC_A3_VehDrvProgSys1_Md_Rq)(raw >> 8 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request / Driving Program for */
    void set_VehDrvProgSys8_Md_Rq(IC_A3_VehDrvProgSys8_Md_Rq value){ raw = (raw & 0xffffffffffffff3f) | ((uint64_t)value & 0x3) << 6; }

    /** Gets Vehicle Driving Program Fashion Request / Driving Program for */
    IC_A3_VehDrvProgSys8_Md_Rq get_VehDrvProgSys8_Md_Rq() const { return (IC_A3_VehDrvProgSys8_Md_Rq)(raw >> 6 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request / Driving Program for */
    void set_VehDrvProgSys7_Md_Rq(IC_A3_VehDrvProgSys7_Md_Rq value){ raw = (raw & 0xffffffffffffffcf) | ((uint64_t)value & 0x3) << 4; }

    /** Gets Vehicle Driving Program Fashion Request / Driving Program for */
    IC_A3_VehDrvProgSys7_Md_Rq get_VehDrvProgSys7_Md_Rq() const { return (IC_A3_VehDrvProgSys7_Md_Rq)(raw >> 4 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - DTR / Driving program for DISTRONIC */
    void set_VehDrvProgSys6_Md_Rq(IC_A3_VehDrvProgSys6_Md_Rq value){ raw = (raw & 0xfffffffffffffff3) | ((uint64_t)value & 0x3) << 2; }

    /** Gets Vehicle Driving Program Fashion Request - DTR / Driving program for DISTRONIC */
    IC_A3_VehDrvProgSys6_Md_Rq get_VehDrvProgSys6_Md_Rq() const { return (IC_A3_VehDrvProgSys6_Md_Rq)(raw >> 2 & 0x3); }
        
    /** Sets Vehicle Driving Program Fashion Request - ESP / Driving Program for ESP */
    void set_VehDrvProgSys5_Md_Rq(IC_A3_VehDrvProgSys5_Md_Rq value){ raw = (raw & 0xfffffffffffffffc) | ((uint64_t)value & 0x3) << 0; }

    /** Gets Vehicle Driving Program Fashion Request - ESP / Driving Program for ESP */
    IC_A3_VehDrvProgSys5_Md_Rq get_VehDrvProgSys5_Md_Rq() const { return (IC_A3_VehDrvProgSys5_Md_Rq)(raw >> 0 & 0x3); }
        
} IC_A3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of LM_A1 */
	uint32_t get_canid(){ return LM_A1_CAN_ID; }
    /** Sets Night Security Illumination Active / Headlight Cable */
    void set_NS_Ill_Actv(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Night Security Illumination Active / Headlight Cable */
    bool get_NS_Ill_Actv() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Automatic Driving Light Activated by Light Sensor / AFL activated by light sensor */
    void set_ADL_Actv(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Automatic Driving Light Activated by Light Sensor / AFL activated by light sensor */
    bool get_ADL_Actv() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets FOG LAMPS REAR ON REQUEST / NUTLE FLIGHT LIGHT */
    void set_FogLmp_R_On_Rq(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets FOG LAMPS REAR ON REQUEST / NUTLE FLIGHT LIGHT */
    bool get_FogLmp_R_On_Rq() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Turn on Fog Lamps Front On Request / Fog Light */
    void set_FogLmp_Ft_On_Rq(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Turn on Fog Lamps Front On Request / Fog Light */
    bool get_FogLmp_Ft_On_Rq() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Switch on Low Beam On Request / Low Light */
    void set_LoBm_On_Rq(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Switch on Low Beam On Request / Low Light */
    bool get_LoBm_On_Rq() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Position Lamps on Request / Power Land */
    void set_PosnLmp_On_Rq(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Position Lamps on Request / Power Land */
    bool get_PosnLmp_On_Rq() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Parking Lamps Right Side On Request / Parking Light On the right */
    void set_PkLmp_Rt_On_Rq(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Parking Lamps Right Side On Request / Parking Light On the right */
    bool get_PkLmp_Rt_On_Rq() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Parking LAMPS LEFT SIDE ON REQUEST / PARK LIGHT Turn on the left */
    void set_PkLmp_Lt_On_Rq(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Parking LAMPS LEFT SIDE ON REQUEST / PARK LIGHT Turn on the left */
    bool get_PkLmp_Lt_On_Rq() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Position LAMP Indication Lamp On Request / Landlight Turn on Control Lamp */
    void set_PosnLmp_IndLmp_On_Rq(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Position LAMP Indication Lamp On Request / Landlight Turn on Control Lamp */
    bool get_PosnLmp_IndLmp_On_Rq() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Fog Lamps Rear Indication Lamp On Request / Nebula Ficklets Turn on Control Lamp */
    void set_FogLmp_R_IndLmp_On_Rq(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Fog Lamps Rear Indication Lamp On Request / Nebula Ficklets Turn on Control Lamp */
    bool get_FogLmp_R_IndLmp_On_Rq() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Intelligent Headlight Control State / State Intelligent Headlight Control */
    void set_IHC_Stat(LM_A1_IHC_Stat value){ raw = (raw & 0xffe7ffffffffffff) | ((uint64_t)value & 0x3) << 51; }

    /** Gets Intelligent Headlight Control State / State Intelligent Headlight Control */
    LM_A1_IHC_Stat get_IHC_Stat() const { return (LM_A1_IHC_Stat)(raw >> 51 & 0x3); }
        
    /** Sets Low Beam Indication Lamp On Request / Switch on Control Lamp */
    void set_LoBm_IndLmp_On_Rq(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Low Beam Indication Lamp On Request / Switch on Control Lamp */
    bool get_LoBm_IndLmp_On_Rq() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Fog Lamps Front Indication Lamp On Request / Fog Light Control Lamp */
    void set_FogLmp_Ft_IndLmp_On_Rq(bool value){ raw = (raw & 0xfffdffffffffffff) | ((uint64_t)value & 0x1) << 49; }

    /** Gets Fog Lamps Front Indication Lamp On Request / Fog Light Control Lamp */
    bool get_FogLmp_Ft_IndLmp_On_Rq() const { return (bool)(raw >> 49 & 0x1); }
        
    /** Sets Switch Illumination Off Request / Request Search Lighting */
    void set_SwIll_Off_Rq(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Switch Illumination Off Request / Request Search Lighting */
    bool get_SwIll_Off_Rq() const { return (bool)(raw >> 48 & 0x1); }
        
} LM_A1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SPC_A3 */
	uint32_t get_canid(){ return SPC_A3_CAN_ID; }
    /** Sets Display Message # 2: "Level Selection Cleared" / Message 2: "Level selection deleted" */
    void set_SPC_Msg2_Disp_Rq(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Display Message # 2: "Level Selection Cleared" / Message 2: "Level selection deleted" */
    bool get_SPC_Msg2_Disp_Rq() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Display Message # 1: "Vehicle Lifts Up" / Message 1: "Vehicle Lifts" */
    void set_SPC_Msg1_Disp_Rq(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Display Message # 1: "Vehicle Lifts Up" / Message 1: "Vehicle Lifts" */
    bool get_SPC_Msg1_Disp_Rq() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Display Error Message # 4: "Shut Down Vehicle" / Error 4: "Stopping vehicle" */
    void set_SPC_ErrMsg4_Disp_Rq(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets Display Error Message # 4: "Shut Down Vehicle" / Error 4: "Stopping vehicle" */
    bool get_SPC_ErrMsg4_Disp_Rq() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets Display Error Message # 3: "Seek Service Soon" / Error 3: "Check the workshop" */
    void set_SPC_ErrMsg3_Disp_Rq(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Display Error Message # 3: "Seek Service Soon" / Error 3: "Check the workshop" */
    bool get_SPC_ErrMsg3_Disp_Rq() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Display Error Message # 2: "Please wait, Vehicle lifts up" (ASP), "Steering Oil" (ABC) / Error 2: "Please wait, vehicle lifts" (ASP), "Steering Oil" (ABC) */
    void set_SPC_ErrMsg2_Disp_Rq(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Display Error Message # 2: "Please wait, Vehicle lifts up" (ASP), "Steering Oil" (ABC) / Error 2: "Please wait, vehicle lifts" (ASP), "Steering Oil" (ABC) */
    bool get_SPC_ErrMsg2_Disp_Rq() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Display Error Message # 1: "Stop, Vehicle to Low" / Error 1: "Stop, car too deep" */
    void set_SPC_ErrMsg1_Disp_Rq(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Display Error Message # 1: "Stop, Vehicle to Low" / Error 1: "Stop, car too deep" */
    bool get_SPC_ErrMsg1_Disp_Rq() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Vehicle Level Control State / Status Level Regulation */
    void set_VehLvlCtrl_Stat(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Vehicle Level Control State / Status Level Regulation */
    bool get_VehLvlCtrl_Stat() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Active Damping Control State / Status Active Damping Control */
    void set_ADC_Stat(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Active Damping Control State / Status Active Damping Control */
    bool get_ADC_Stat() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Active Damping Control Switch LED Request / Request LED Button Active Damping Control */
    void set_ADC_SwLED_Rq(SPC_A3_ADC_SwLED_Rq value){ raw = (raw & 0xfff3ffffffffffff) | ((uint64_t)value & 0x3) << 50; }

    /** Gets Active Damping Control Switch LED Request / Request LED Button Active Damping Control */
    SPC_A3_ADC_SwLED_Rq get_ADC_SwLED_Rq() const { return (SPC_A3_ADC_SwLED_Rq)(raw >> 50 & 0x3); }
        
    /** Sets Suspension Level Adjustment Switch LED Request / Request LED Vehicle Level Button */
    void set_SuspLvlAdjSwLED_Rq(SPC_A3_SuspLvlAdjSwLED_Rq value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets Suspension Level Adjustment Switch LED Request / Request LED Vehicle Level Button */
    SPC_A3_SuspLvlAdjSwLED_Rq get_SuspLvlAdjSwLED_Rq() const { return (SPC_A3_SuspLvlAdjSwLED_Rq)(raw >> 48 & 0x3); }
        
} SPC_A3;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of STW_ANGL_STAT */
	uint32_t get_canid(){ return STW_ANGL_STAT_CAN_ID; }
    /** Sets Steering Wheel Angle / steering wheel angle. Conversion formula (To raw from real): y=(x+2048.0)/0.50 (Unit: °) */
    void set_StW_Angl(uint16_t value){ raw = (raw & 0xc000ffffffffffff) | ((uint64_t)value & 0x3fff) << 48; }

    /** Gets Steering Wheel Angle / steering wheel angle. Conversion formula (To real from raw): y=(0.50x)-2048.0 (Unit: °) */
    uint16_t get_StW_Angl() const { return (uint16_t)(raw >> 48 & 0x3fff); }
        
    /** Sets Steering Wheel Angle Speed / Steering Wheel Speed. Conversion formula (To raw from real): y=(x+2048.0)/0.50 (Unit: °/s) */
    void set_StW_AnglSpd(uint16_t value){ raw = (raw & 0xffffc000ffffffff) | ((uint64_t)value & 0x3fff) << 32; }

    /** Gets Steering Wheel Angle Speed / Steering Wheel Speed. Conversion formula (To real from raw): y=(0.50x)-2048.0 (Unit: °/s) */
    uint16_t get_StW_AnglSpd() const { return (uint16_t)(raw >> 32 & 0x3fff); }
        
    /** Sets Steering Wheel Angle Sensor Identification / Identification Steering wheel angle sensor */
    void set_StW_AnglSens_Id(STW_ANGL_STAT_StW_AnglSens_Id value){ raw = (raw & 0xfffffffff3ffffff) | ((uint64_t)value & 0x3) << 26; }

    /** Gets Steering Wheel Angle Sensor Identification / Identification Steering wheel angle sensor */
    STW_ANGL_STAT_StW_AnglSens_Id get_StW_AnglSens_Id() const { return (STW_ANGL_STAT_StW_AnglSens_Id)(raw >> 26 & 0x3); }
        
    /** Sets Steering Wheel Angle Sensor State / Status Steering wheel angle sensor */
    void set_StW_AnglSens_Stat(STW_ANGL_STAT_StW_AnglSens_Stat value){ raw = (raw & 0xfffffffffcffffff) | ((uint64_t)value & 0x3) << 24; }

    /** Gets Steering Wheel Angle Sensor State / Status Steering wheel angle sensor */
    STW_ANGL_STAT_StW_AnglSens_Stat get_StW_AnglSens_Stat() const { return (STW_ANGL_STAT_StW_AnglSens_Stat)(raw >> 24 & 0x3); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_STW_ANGL_STAT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_STW_ANGL_STAT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_STW_ANGL_STAT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_STW_ANGL_STAT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} STW_ANGL_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BRK_STAT */
	uint32_t get_canid(){ return BRK_STAT_CAN_ID; }
    /** Sets Parking Brake Request / parking brake request */
    void set_PkBrk_Rq_SBC(BRK_STAT_PkBrk_Rq_SBC value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Parking Brake Request / parking brake request */
    BRK_STAT_PkBrk_Rq_SBC get_PkBrk_Rq_SBC() const { return (BRK_STAT_PkBrk_Rq_SBC)(raw >> 62 & 0x3); }
        
    /** Sets Brake Pedal State / Status Brake Pedal */
    void set_BrkPdl_Stat(BRK_STAT_BrkPdl_Stat value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets Brake Pedal State / Status Brake Pedal */
    BRK_STAT_BrkPdl_Stat get_BrkPdl_Stat() const { return (BRK_STAT_BrkPdl_Stat)(raw >> 60 & 0x3); }
        
    /** Sets Stop Coordinator Stop State / Status Standstill */
    void set_SPCR_Sp_Stat(BRK_STAT_SPCR_Sp_Stat value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Stop Coordinator Stop State / Status Standstill */
    BRK_STAT_SPCR_Sp_Stat get_SPCR_Sp_Stat() const { return (BRK_STAT_SPCR_Sp_Stat)(raw >> 58 & 0x3); }
        
    /** Sets Brake State / Status Brake */
    void set_Brk_Stat(BRK_STAT_Brk_Stat value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Brake State / Status Brake */
    BRK_STAT_Brk_Stat get_Brk_Stat() const { return (BRK_STAT_Brk_Stat)(raw >> 56 & 0x3); }
        
    /** Sets Full Braking (ABS Regulates All Wheels) / Full Braking (ABS regulates all 4 wheels) */
    void set_FullBrk_Actv(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Full Braking (ABS Regulates All Wheels) / Full Braking (ABS regulates all 4 wheels) */
    bool get_FullBrk_Actv() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Emergency Braking / Emergency Braking */
    void set_EmgBrk_Actv(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Emergency Braking / Emergency Braking */
    bool get_EmgBrk_Actv() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Brake Intervention enabled / brake intervention allowed */
    void set_BrkIntrvntn_Enbl(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Brake Intervention enabled / brake intervention allowed */
    bool get_BrkIntrvntn_Enbl() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Brake Intervention by EPKB Active / EPKB brake intervention active */
    void set_BrkIntrvntn_Actv_EPKB(bool value){ raw = (raw & 0xfff7ffffffffffff) | ((uint64_t)value & 0x1) << 51; }

    /** Gets Brake Intervention by EPKB Active / EPKB brake intervention active */
    bool get_BrkIntrvntn_Actv_EPKB() const { return (bool)(raw >> 51 & 0x1); }
        
    /** Sets Brake Intervention by Assistance System Active / Assistance System Brake Intervention */
    void set_BrkIntrvntn_Actv_AS(bool value){ raw = (raw & 0xfffbffffffffffff) | ((uint64_t)value & 0x1) << 50; }

    /** Gets Brake Intervention by Assistance System Active / Assistance System Brake Intervention */
    bool get_BrkIntrvntn_Actv_AS() const { return (bool)(raw >> 50 & 0x1); }
        
    /** Sets Brake Intervention by ESP Active / ESP brake intervention active */
    void set_BrkIntrvntn_Actv_ESP(bool value){ raw = (raw & 0xfffeffffffffffff) | ((uint64_t)value & 0x1) << 48; }

    /** Gets Brake Intervention by ESP Active / ESP brake intervention active */
    bool get_BrkIntrvntn_Actv_ESP() const { return (bool)(raw >> 48 & 0x1); }
        
    /** Sets Stop Coordinator Mode / Mode Standstill Coordinator */
    void set_SPCR_Md_V3(BRK_STAT_SPCR_Md_V3 value){ raw = (raw & 0xffff0fffffffffff) | ((uint64_t)value & 0xf) << 44; }

    /** Gets Stop Coordinator Mode / Mode Standstill Coordinator */
    BRK_STAT_SPCR_Md_V3 get_SPCR_Md_V3() const { return (BRK_STAT_SPCR_Md_V3)(raw >> 44 & 0xf); }
        
    /** Sets Actual Brake Torque / set braking torque. Conversion formula (To raw from real): y=(x-0.0)/3.00 (Unit: Nm) */
    void set_BrkTrq(uint16_t value){ raw = (raw & 0xfffff000ffffffff) | ((uint64_t)value & 0xfff) << 32; }

    /** Gets Actual Brake Torque / set braking torque. Conversion formula (To real from raw): y=(3.00x)+0.0 (Unit: Nm) */
    uint16_t get_BrkTrq() const { return (uint16_t)(raw >> 32 & 0xfff); }
        
    /** Sets Transmission Parking Position Request / SBC request: "P" */
    void set_TxPkPosn_Rq_SBC(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Transmission Parking Position Request / SBC request: "P" */
    bool get_TxPkPosn_Rq_SBC() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets Vehicle Immobilized by Stop Coordinator / Standstill Coordinator has secured vehicle */
    void set_SPCR_Veh_Immo(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets Vehicle Immobilized by Stop Coordinator / Standstill Coordinator has secured vehicle */
    bool get_SPCR_Veh_Immo() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets Stop Coordinator Exception Request / Standstill Coordinator Exception Request */
    void set_SPCR_Excpt_Rq(BRK_STAT_SPCR_Excpt_Rq value){ raw = (raw & 0xffffffffcfffffff) | ((uint64_t)value & 0x3) << 28; }

    /** Gets Stop Coordinator Exception Request / Standstill Coordinator Exception Request */
    BRK_STAT_SPCR_Excpt_Rq get_SPCR_Excpt_Rq() const { return (BRK_STAT_SPCR_Excpt_Rq)(raw >> 28 & 0x3); }
        
    /** Sets Starting Torque State (to Release Parking Brake) / Status Tracking Torque (for loosening parking brake) */
    void set_StTrq_Stat(BRK_STAT_StTrq_Stat value){ raw = (raw & 0xfffffffff3ffffff) | ((uint64_t)value & 0x3) << 26; }

    /** Gets Starting Torque State (to Release Parking Brake) / Status Tracking Torque (for loosening parking brake) */
    BRK_STAT_StTrq_Stat get_StTrq_Stat() const { return (BRK_STAT_StTrq_Stat)(raw >> 26 & 0x3); }
        
    /** Sets ESP System State / ESP system condition */
    void set_ESP_Sys_Stat(BRK_STAT_ESP_Sys_Stat value){ raw = (raw & 0xfffffffffcffffff) | ((uint64_t)value & 0x3) << 24; }

    /** Gets ESP System State / ESP system condition */
    BRK_STAT_ESP_Sys_Stat get_ESP_Sys_Stat() const { return (BRK_STAT_ESP_Sys_Stat)(raw >> 24 & 0x3); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_BRK_STAT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_BRK_STAT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Assistance System Off Request / Request Assistance System */
    void set_SPCR_AS_Off_Rq(BRK_STAT_SPCR_AS_Off_Rq value){ raw = (raw & 0xfffffffffffff3ff) | ((uint64_t)value & 0x3) << 10; }

    /** Gets Assistance System Off Request / Request Assistance System */
    BRK_STAT_SPCR_AS_Off_Rq get_SPCR_AS_Off_Rq() const { return (BRK_STAT_SPCR_AS_Off_Rq)(raw >> 10 & 0x3); }
        
    /** Sets Disable Assistance System / Shutdown Assistance System */
    void set_SPCR_AS_Dsabl(BRK_STAT_SPCR_AS_Dsabl value){ raw = (raw & 0xfffffffffffffcff) | ((uint64_t)value & 0x3) << 8; }

    /** Gets Disable Assistance System / Shutdown Assistance System */
    BRK_STAT_SPCR_AS_Dsabl get_SPCR_AS_Dsabl() const { return (BRK_STAT_SPCR_AS_Dsabl)(raw >> 8 & 0x3); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_BRK_STAT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_BRK_STAT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} BRK_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CGW_STAT */
	uint32_t get_canid(){ return CGW_STAT_CAN_ID; }
    /** Sets Bus Faulty, permanent active / bus faulty, permanent active */
    void set_BusFlt_PrmntActv(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Bus Faulty, permanent active / bus faulty, permanent active */
    bool get_BusFlt_PrmntActv() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets CGW Routing Status / CGW Routing Status */
    void set_CGW_Rout_Stat(CGW_STAT_CGW_Rout_Stat value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets CGW Routing Status / CGW Routing Status */
    CGW_STAT_CGW_Rout_Stat get_CGW_Rout_Stat() const { return (CGW_STAT_CGW_Rout_Stat)(raw >> 56 & 0x3); }
        
} CGW_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BRK_STAT2 */
	uint32_t get_canid(){ return BRK_STAT2_CAN_ID; }
    /** Sets Brake Torque Requested by Driver / Driver requested braking torque. Conversion formula (To raw from real): y=(x-0.0)/3.00 (Unit: Nm) */
    void set_BrkTrq_D(uint16_t value){ raw = (raw & 0xf000ffffffffffff) | ((uint64_t)value & 0xfff) << 48; }

    /** Gets Brake Torque Requested by Driver / Driver requested braking torque. Conversion formula (To real from raw): y=(3.00x)+0.0 (Unit: Nm) */
    uint16_t get_BrkTrq_D() const { return (uint16_t)(raw >> 48 & 0xfff); }
        
    /** Sets Brake Torque Gradient Requested by Driver / Driver requested braking torque gradient. Conversion formula (To raw from real): y=(x+200048.0)/97.68 (Unit: Nm/s) */
    void set_BrkTrqGrdnt_D(uint16_t value){ raw = (raw & 0xfffff000ffffffff) | ((uint64_t)value & 0xfff) << 32; }

    /** Gets Brake Torque Gradient Requested by Driver / Driver requested braking torque gradient. Conversion formula (To real from raw): y=(97.68x)-200048.0 (Unit: Nm/s) */
    uint16_t get_BrkTrqGrdnt_D() const { return (uint16_t)(raw >> 32 & 0xfff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_BRK_STAT2(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_BRK_STAT2() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_BRK_STAT2(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_BRK_STAT2() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} BRK_STAT2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of SBW_RQ_SCCM */
	uint32_t get_canid(){ return SBW_RQ_SCCM_CAN_ID; }
    /** Sets Message Transmitter Identification / Transmitter ID */
    void set_MsgTxmtId(SBW_RQ_SCCM_MsgTxmtId value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Message Transmitter Identification / Transmitter ID */
    SBW_RQ_SCCM_MsgTxmtId get_MsgTxmtId() const { return (SBW_RQ_SCCM_MsgTxmtId)(raw >> 62 & 0x3); }
        
    /** Sets State Steering Wheel Switch ("+", "-") / steering wheel keys "+", "-" actuated */
    void set_StW_Sw_Stat3(SBW_RQ_SCCM_StW_Sw_Stat3 value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets State Steering Wheel Switch ("+", "-") / steering wheel keys "+", "-" actuated */
    SBW_RQ_SCCM_StW_Sw_Stat3 get_StW_Sw_Stat3() const { return (SBW_RQ_SCCM_StW_Sw_Stat3)(raw >> 56 & 0x7); }
        
    /** Sets Transmission Selector Lever Signal Identification (Steering Wheel) / Gear Select Lever Signal ID (steering wheel) */
    void set_TSL_Sgnl_Id_StW(SBW_RQ_SCCM_TSL_Sgnl_Id_StW value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Transmission Selector Lever Signal Identification (Steering Wheel) / Gear Select Lever Signal ID (steering wheel) */
    SBW_RQ_SCCM_TSL_Sgnl_Id_StW get_TSL_Sgnl_Id_StW() const { return (SBW_RQ_SCCM_TSL_Sgnl_Id_StW)(raw >> 54 & 0x3); }
        
    /** Sets Transmission Selector Lever "P" Switch Actuated (Steering Wheel) / Gear Select Lever "P" */
    void set_TSL_P_Psd_StW(SBW_RQ_SCCM_TSL_P_Psd_StW value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets Transmission Selector Lever "P" Switch Actuated (Steering Wheel) / Gear Select Lever "P" */
    SBW_RQ_SCCM_TSL_P_Psd_StW get_TSL_P_Psd_StW() const { return (SBW_RQ_SCCM_TSL_P_Psd_StW)(raw >> 52 & 0x3); }
        
    /** Sets Transmission Selector Lever RND Position (Steering Wheel) / Gear Selection Lever RND position (steering wheel) */
    void set_TSL_RND_Posn_StW(SBW_RQ_SCCM_TSL_RND_Posn_StW value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Transmission Selector Lever RND Position (Steering Wheel) / Gear Selection Lever RND position (steering wheel) */
    SBW_RQ_SCCM_TSL_RND_Posn_StW get_TSL_RND_Posn_StW() const { return (SBW_RQ_SCCM_TSL_RND_Posn_StW)(raw >> 48 & 0xf); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_SBW_RQ_SCCM(uint8_t value){ raw = (raw & 0xffff0fffffffffff) | ((uint64_t)value & 0xf) << 44; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_SBW_RQ_SCCM() const { return (uint8_t)(raw >> 44 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 3 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 3 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_SBW_RQ_SCCM(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets CRC Checksum Byte 1 to 3 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 3 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_SBW_RQ_SCCM() const { return (uint8_t)(raw >> 32 & 0xff); }
        
} SBW_RQ_SCCM;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of EPKB_STAT */
	uint32_t get_canid(){ return EPKB_STAT_CAN_ID; }
    /** Sets Parking brake switch state / parking brake switch status */
    void set_PkBrkSw_Stat(EPKB_STAT_PkBrkSw_Stat value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Parking brake switch state / parking brake switch status */
    EPKB_STAT_PkBrkSw_Stat get_PkBrkSw_Stat() const { return (EPKB_STAT_PkBrkSw_Stat)(raw >> 62 & 0x3); }
        
    /** Sets Electrical Parking Brake System State / Status EPKB */
    void set_EPkBrk_Stat(EPKB_STAT_EPkBrk_Stat value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Electrical Parking Brake System State / Status EPKB */
    EPKB_STAT_EPkBrk_Stat get_EPkBrk_Stat() const { return (EPKB_STAT_EPkBrk_Stat)(raw >> 59 & 0x7); }
        
    /** Sets Parking brake state / status parking brake */
    void set_PkBrk_Stat(EPKB_STAT_PkBrk_Stat value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Parking brake state / status parking brake */
    EPKB_STAT_PkBrk_Stat get_PkBrk_Stat() const { return (EPKB_STAT_PkBrk_Stat)(raw >> 56 & 0x7); }
        
    /** Sets Enable SBC Request / SBC request allowed */
    void set_SBC_Enbl_Rq_EPKB(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Enable SBC Request / SBC request allowed */
    bool get_SBC_Enbl_Rq_EPKB() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Dynamic Braking Fashion / Mode Dynamic Brakes */
    void set_DynBrkMd(EPKB_STAT_DynBrkMd value){ raw = (raw & 0xffcfffffffffffff) | ((uint64_t)value & 0x3) << 52; }

    /** Gets Dynamic Braking Fashion / Mode Dynamic Brakes */
    EPKB_STAT_DynBrkMd get_DynBrkMd() const { return (EPKB_STAT_DynBrkMd)(raw >> 52 & 0x3); }
        
    /** Sets Brake torque request / requested by EPKB braking torque. Conversion formula (To raw from real): y=(x-0.0)/3.00 (Unit: Nm) */
    void set_BrkTrq_Rq_EPKB(uint16_t value){ raw = (raw & 0xfff000ffffffffff) | ((uint64_t)value & 0xfff) << 40; }

    /** Gets Brake torque request / requested by EPKB braking torque. Conversion formula (To real from raw): y=(3.00x)+0.0 (Unit: Nm) */
    uint16_t get_BrkTrq_Rq_EPKB() const { return (uint16_t)(raw >> 40 & 0xfff); }
        
    /** Sets Battery Coupling Switch Request / Request Battery Coupling Switch */
    void set_BatCplSw_Rq_EPKB(EPKB_STAT_BatCplSw_Rq_EPKB value){ raw = (raw & 0xffffffcfffffffff) | ((uint64_t)value & 0x3) << 36; }

    /** Gets Battery Coupling Switch Request / Request Battery Coupling Switch */
    EPKB_STAT_BatCplSw_Rq_EPKB get_BatCplSw_Rq_EPKB() const { return (EPKB_STAT_BatCplSw_Rq_EPKB)(raw >> 36 & 0x3); }
        
    /** Sets Transmission Parking Position Request / EPKB request: "P" */
    void set_TxPkPosn_Rq_EPKB(EPKB_STAT_TxPkPosn_Rq_EPKB value){ raw = (raw & 0xfffffff3ffffffff) | ((uint64_t)value & 0x3) << 34; }

    /** Gets Transmission Parking Position Request / EPKB request: "P" */
    EPKB_STAT_TxPkPosn_Rq_EPKB get_TxPkPosn_Rq_EPKB() const { return (EPKB_STAT_TxPkPosn_Rq_EPKB)(raw >> 34 & 0x3); }
        
    /** Sets Turn on Brake Light on Request / Brake light */
    void set_BrkLgt_On_Rq(EPKB_STAT_BrkLgt_On_Rq value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets Turn on Brake Light on Request / Brake light */
    EPKB_STAT_BrkLgt_On_Rq get_BrkLgt_On_Rq() const { return (EPKB_STAT_BrkLgt_On_Rq)(raw >> 32 & 0x3); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_EPKB_STAT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_EPKB_STAT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_EPKB_STAT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_EPKB_STAT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} EPKB_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of HVAC_RS1 */
	uint32_t get_canid(){ return HVAC_RS1_CAN_ID; }
    /** Sets Aircon Compressor Front On / Climate Compressor for Front On */
    void set_HVAC_Comp_Ft_On(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Aircon Compressor Front On / Climate Compressor for Front On */
    bool get_HVAC_Comp_Ft_On() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Auxiliary Heater Enabled / Switch on */
    void set_HVAC_AuxHt_Enbl(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Auxiliary Heater Enabled / Switch on */
    bool get_HVAC_AuxHt_Enbl() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Engine Idle Speed ​​Increase Request / Idle Speed ​​Lifting to Cooling Elevation */
    void set_HVAC_EngIdleRPM_Inc_Rq(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Engine Idle Speed ​​Increase Request / Idle Speed ​​Lifting to Cooling Elevation */
    bool get_HVAC_EngIdleRPM_Inc_Rq() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets HVAC Enable Recuperation Request / Recuperation enable */
    void set_HVAC_Recup_Enbl_Rq(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets HVAC Enable Recuperation Request / Recuperation enable */
    bool get_HVAC_Recup_Enbl_Rq() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets ENABLE STOP / START AUTOMATIC REQUEST / ASS ENABLE */
    void set_SSA_Enbl_Rq_HVAC(bool value){ raw = (raw & 0xf7ffffffffffffff) | ((uint64_t)value & 0x1) << 59; }

    /** Gets ENABLE STOP / START AUTOMATIC REQUEST / ASS ENABLE */
    bool get_SSA_Enbl_Rq_HVAC() const { return (bool)(raw >> 59 & 0x1); }
        
    /** Sets STOP / START AUTOMATIC Engine Start Request / ASS Motorstart Request */
    void set_SSA_EngSt_Rq_HVAC(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets STOP / START AUTOMATIC Engine Start Request / ASS Motorstart Request */
    bool get_SSA_EngSt_Rq_HVAC() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Transmission Shift Point Increase Request for Thermal Comfort (Heating) / Raise of the gear switching point for climate summary increase (heating) */
    void set_HVAC_TxShftPointHt_Inc_Rq(bool value){ raw = (raw & 0xfdffffffffffffff) | ((uint64_t)value & 0x1) << 57; }

    /** Gets Transmission Shift Point Increase Request for Thermal Comfort (Heating) / Raise of the gear switching point for climate summary increase (heating) */
    bool get_HVAC_TxShftPointHt_Inc_Rq() const { return (bool)(raw >> 57 & 0x1); }
        
    /** Sets Transmission Shift Point Increase Request for Thermal Comfort (Cooling) / Raising of the gear switching point for climate domestic enhancement (cooling) */
    void set_HVAC_TxShftPoint_Inc_Rq(bool value){ raw = (raw & 0xfeffffffffffffff) | ((uint64_t)value & 0x1) << 56; }

    /** Gets Transmission Shift Point Increase Request for Thermal Comfort (Cooling) / Raising of the gear switching point for climate domestic enhancement (cooling) */
    bool get_HVAC_TxShftPoint_Inc_Rq() const { return (bool)(raw >> 56 & 0x1); }
        
    /** Sets Actual Front Aircon Compressor Crackish Torque / Climate Compressor Tour For Front. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: Nm) */
    void set_HVAC_CompTrq_Ft(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Actual Front Aircon Compressor Crackish Torque / Climate Compressor Tour For Front. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: Nm) */
    uint8_t get_HVAC_CompTrq_Ft() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Engine Fan RPM Request / Motor Heater Setpoint Speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_EngFanRPM_Rq_HVAC(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Engine Fan RPM Request / Motor Heater Setpoint Speed. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_EngFanRPM_Rq_HVAC() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Outside Air Temperature for Heating Management / Outdoor air temperature for thermal management. Conversion formula (To raw from real): y=(x+40.0)/0.50 (Unit: °C) */
    void set_AirTemp_Outsd_HtMgt(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Outside Air Temperature for Heating Management / Outdoor air temperature for thermal management. Conversion formula (To real from raw): y=(0.50x)-40.0 (Unit: °C) */
    uint8_t get_AirTemp_Outsd_HtMgt() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Heating Power Front Request / Request Heating Power Front. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: %) */
    void set_HtPwr_Ft_Rq(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Heating Power Front Request / Request Heating Power Front. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: %) */
    uint8_t get_HtPwr_Ft_Rq() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_HVAC_RS1(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_HVAC_RS1() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_HVAC_RS1(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_HVAC_RS1() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} HVAC_RS1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TX_RQ_SBC */
	uint32_t get_canid(){ return TX_RQ_SBC_CAN_ID; }
    /** Sets Gear limit request from DTR / nominal gear requirement of DTR */
    void set_GrMinMax_Rq_DTR(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Gear limit request from DTR / nominal gear requirement of DTR */
    bool get_GrMinMax_Rq_DTR() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Requested gear, upper limit / target gear, upper limit */
    void set_GrMax_Rq_SBC(TX_RQ_SBC_GrMax_Rq_SBC value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Requested gear, upper limit / target gear, upper limit */
    TX_RQ_SBC_GrMax_Rq_SBC get_GrMax_Rq_SBC() const { return (TX_RQ_SBC_GrMax_Rq_SBC)(raw >> 59 & 0x7); }
        
    /** Sets Requested gear, lower limit / target gear, lower limit */
    void set_GrMin_Rq_SBC(TX_RQ_SBC_GrMin_Rq_SBC value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Requested gear, lower limit / target gear, lower limit */
    TX_RQ_SBC_GrMin_Rq_SBC get_GrMin_Rq_SBC() const { return (TX_RQ_SBC_GrMin_Rq_SBC)(raw >> 56 & 0x7); }
        
    /** Sets Suppression of dynamic full load downshift request / suppression dynamic Vollastrückschaltung */
    void set_DynFLDS_Supp_Rq_SBC(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets Suppression of dynamic full load downshift request / suppression dynamic Vollastrückschaltung */
    bool get_DynFLDS_Supp_Rq_SBC() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets Active downshift / Active downshift */
    void set_ActvDnShift_Rq_SBC(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets Active downshift / Active downshift */
    bool get_ActvDnShift_Rq_SBC() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Shift characteristic displacement request / demand shift line shift */
    void set_ShftChrDsp_Rq_SBC(TX_RQ_SBC_ShftChrDsp_Rq_SBC value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Shift characteristic displacement request / demand shift line shift */
    TX_RQ_SBC_ShftChrDsp_Rq_SBC get_ShftChrDsp_Rq_SBC() const { return (TX_RQ_SBC_ShftChrDsp_Rq_SBC)(raw >> 48 & 0xf); }
        
    /** Sets No gear "N" request (only for AMT during SBC additional value active) / SBC-S / H active ASG must not switch to "N" */
    void set_NoGrN_Rq(bool value){ raw = (raw & 0xfffffbffffffffff) | ((uint64_t)value & 0x1) << 42; }

    /** Gets No gear "N" request (only for AMT during SBC additional value active) / SBC-S / H active ASG must not switch to "N" */
    bool get_NoGrN_Rq() const { return (bool)(raw >> 42 & 0x1); }
        
    /** Sets Request neutral gear by SBC / SBC request: "Neutral" */
    void set_GrN_Rq_SBC(TX_RQ_SBC_GrN_Rq_SBC value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Request neutral gear by SBC / SBC request: "Neutral" */
    TX_RQ_SBC_GrN_Rq_SBC get_GrN_Rq_SBC() const { return (TX_RQ_SBC_GrN_Rq_SBC)(raw >> 40 & 0x3); }
        
    /** Sets Requested minimum transmission ratio (CVT) / target speed, lower limit (CVT). Conversion formula (To raw from real): y=(x-0.0)/0.02 */
    void set_TxRatioMin_Rq_SBC(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Requested minimum transmission ratio (CVT) / target speed, lower limit (CVT). Conversion formula (To real from raw): y=(0.02x)+0.0 */
    uint8_t get_TxRatioMin_Rq_SBC() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Requested maximum transmission ratio (CVT) / target gear, upper limit (CVT). Conversion formula (To raw from real): y=(x-0.0)/0.02 */
    void set_TxRatioMax_Rq_SBC(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Requested maximum transmission ratio (CVT) / target gear, upper limit (CVT). Conversion formula (To real from raw): y=(0.02x)+0.0 */
    uint8_t get_TxRatioMax_Rq_SBC() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_TX_RQ_SBC(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_TX_RQ_SBC() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_TX_RQ_SBC(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_TX_RQ_SBC() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} TX_RQ_SBC;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ENG_RS3_PT */
	uint32_t get_canid(){ return ENG_RS3_PT_CAN_ID; }
    /** Sets KICKDOWN SWITCH PRESSED / KICKDOWN OPERATED */
    void set_KickDnSw_Psd(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets KICKDOWN SWITCH PRESSED / KICKDOWN OPERATED */
    bool get_KickDnSw_Psd() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets Proheating State / Preheating Status */
    void set_PreHt_Stat(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Proheating State / Preheating Status */
    bool get_PreHt_Stat() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Actual Engine RPM / engine speed. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: rpm) */
    void set_EngRPM(uint16_t value){ raw = (raw & 0xc000ffffffffffff) | ((uint64_t)value & 0x3fff) << 48; }

    /** Gets Actual Engine RPM / engine speed. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: rpm) */
    uint16_t get_EngRPM() const { return (uint16_t)(raw >> 48 & 0x3fff); }
        
    /** Sets Correction Factor of Maximum Engine Torque Depending On Falling Atmospheric Pressure / Factor for Abwert.d.Max. Mom. At Aufneh.A.Print. Conversion formula (To raw from real): y=(x-0.0)/0.01 */
    void set_EngTrqMaxCorrFctr(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Correction Factor of Maximum Engine Torque Depending On Falling Atmospheric Pressure / Factor for Abwert.d.Max. Mom. At Aufneh.A.Print. Conversion formula (To real from raw): y=(0.01x)+0.0 */
    uint8_t get_EngTrqMaxCorrFctr() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Accelerator Pedal Position / Pedal Value. Conversion formula (To raw from real): y=(x-0.0)/0.40 (Unit: %) */
    void set_AccelPdlPosn(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Accelerator Pedal Position / Pedal Value. Conversion formula (To real from raw): y=(0.40x)+0.0 (Unit: %) */
    uint8_t get_AccelPdlPosn() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Accelerator Pedal Position Raw Value / Pedal Value Driver. Conversion formula (To raw from real): y=(x-0.0)/0.40 (Unit: %) */
    void set_AccelPdlPosn_Raw(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Accelerator Pedal Position Raw Value / Pedal Value Driver. Conversion formula (To real from raw): y=(0.40x)+0.0 (Unit: %) */
    uint8_t get_AccelPdlPosn_Raw() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Terminal 61 Active / Clamp 61 active */
    void set_Term61_Actv(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Terminal 61 Active / Clamp 61 active */
    bool get_Term61_Actv() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets Additional Power Consumers on Request / Request Additional power consumers */
    void set_AddPwrCnsmr_On_Rq(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Additional Power Consumers on Request / Request Additional power consumers */
    bool get_AddPwrCnsmr_On_Rq() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Actual Generator Load / Generator utilization. Conversion formula (To raw from real): y=(x-0.0)/3.23 (Unit: %) */
    void set_GenLoad(uint8_t value){ raw = (raw & 0xffffffffffc0ffff) | ((uint64_t)value & 0x3f) << 16; }

    /** Gets Actual Generator Load / Generator utilization. Conversion formula (To real from raw): y=(3.23x)+0.0 (Unit: %) */
    uint8_t get_GenLoad() const { return (uint8_t)(raw >> 16 & 0x3f); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_ENG_RS3_PT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_ENG_RS3_PT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Accelerator Pedal Position Sensor Fault / Error pedal value transmitter */
    void set_AccelPdlPosnSens_Flt(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets Accelerator Pedal Position Sensor Fault / Error pedal value transmitter */
    bool get_AccelPdlPosnSens_Flt() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets Engine Running State / Status Engine Circulation */
    void set_EngRun_Stat(ENG_RS3_PT_EngRun_Stat value){ raw = (raw & 0xfffffffffffff8ff) | ((uint64_t)value & 0x7) << 8; }

    /** Gets Engine Running State / Status Engine Circulation */
    ENG_RS3_PT_EngRun_Stat get_EngRun_Stat() const { return (ENG_RS3_PT_EngRun_Stat)(raw >> 8 & 0x7); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_ENG_RS3_PT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_ENG_RS3_PT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ENG_RS3_PT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ENG_RS2_PT */
	uint32_t get_canid(){ return ENG_RS2_PT_CAN_ID; }
    /** Sets Actual Static Engine Torque / Motor Tour Static. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqStatic(uint16_t value){ raw = (raw & 0xe000ffffffffffff) | ((uint64_t)value & 0x1fff) << 48; }

    /** Gets Actual Static Engine Torque / Motor Tour Static. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqStatic() const { return (uint16_t)(raw >> 48 & 0x1fff); }
        
    /** Sets ACTUAL Maximum Engine Torque Including Dynamic Exhaust Turbocharger Torque / Maximum Moment Burner with Exhaust Turbocharger. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqMaxETC(uint16_t value){ raw = (raw & 0xffffe000ffffffff) | ((uint64_t)value & 0x1fff) << 32; }

    /** Gets ACTUAL Maximum Engine Torque Including Dynamic Exhaust Turbocharger Torque / Maximum Moment Burner with Exhaust Turbocharger. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqMaxETC() const { return (uint16_t)(raw >> 32 & 0x1fff); }
        
    /** Sets Fully Overrun Fuel Cutoff Active / push shutdown full */
    void set_FullOFC_Actv(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets Fully Overrun Fuel Cutoff Active / push shutdown full */
    bool get_FullOFC_Actv() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets Partly Overrun Fuel Cutoff Active / Part Number Shutdown */
    void set_PartOFC_Actv(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets Partly Overrun Fuel Cutoff Active / Part Number Shutdown */
    bool get_PartOFC_Actv() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets Actual Mimimum Engine Torque Including Trailing Throttle Component / Motor Torque Minimal including thrust. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqMinTTC(uint16_t value){ raw = (raw & 0xffffffffe000ffff) | ((uint64_t)value & 0x1fff) << 16; }

    /** Gets Actual Mimimum Engine Torque Including Trailing Throttle Component / Motor Torque Minimal including thrust. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqMinTTC() const { return (uint16_t)(raw >> 16 & 0x1fff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_ENG_RS2_PT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_ENG_RS2_PT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_ENG_RS2_PT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_ENG_RS2_PT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ENG_RS2_PT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of TX_RQ_ECM */
	uint32_t get_canid(){ return TX_RQ_ECM_CAN_ID; }
    /** Sets Requested Gear, Upper Limit / Sprocket, Upper Border */
    void set_GrMax_Rq_ECM(TX_RQ_ECM_GrMax_Rq_ECM value){ raw = (raw & 0xc7ffffffffffffff) | ((uint64_t)value & 0x7) << 59; }

    /** Gets Requested Gear, Upper Limit / Sprocket, Upper Border */
    TX_RQ_ECM_GrMax_Rq_ECM get_GrMax_Rq_ECM() const { return (TX_RQ_ECM_GrMax_Rq_ECM)(raw >> 59 & 0x7); }
        
    /** Sets Requested Gear, Lower Limit / Sprocket, Lower Border */
    void set_GrMin_Rq_ECM(TX_RQ_ECM_GrMin_Rq_ECM value){ raw = (raw & 0xf8ffffffffffffff) | ((uint64_t)value & 0x7) << 56; }

    /** Gets Requested Gear, Lower Limit / Sprocket, Lower Border */
    TX_RQ_ECM_GrMin_Rq_ECM get_GrMin_Rq_ECM() const { return (TX_RQ_ECM_GrMin_Rq_ECM)(raw >> 56 & 0x7); }
        
    /** Sets STOP / START AUTOMATIC HAS Engine Stopped / ass MotorStop, 1 = Stop, 0 = normal operation */
    void set_SSA_EngSp(bool value){ raw = (raw & 0xff7fffffffffffff) | ((uint64_t)value & 0x1) << 55; }

    /** Gets STOP / START AUTOMATIC HAS Engine Stopped / ass MotorStop, 1 = Stop, 0 = normal operation */
    bool get_SSA_EngSp() const { return (bool)(raw >> 55 & 0x1); }
        
    /** Sets STOP / START AUTOMATIC PRE-WARNING ENGINE STOP / ASS Pre-warning engine stop */
    void set_SSA_Sp_Warn(bool value){ raw = (raw & 0xffbfffffffffffff) | ((uint64_t)value & 0x1) << 54; }

    /** Gets STOP / START AUTOMATIC PRE-WARNING ENGINE STOP / ASS Pre-warning engine stop */
    bool get_SSA_Sp_Warn() const { return (bool)(raw >> 54 & 0x1); }
        
    /** Sets Creep Mode Off Request / Crawl Off */
    void set_Creep_Off_Rq(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Creep Mode Off Request / Crawl Off */
    bool get_Creep_Off_Rq() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Request Driveaway with 1st Gear by ECM / MS-Wish: "Attraction 1st gear" */
    void set_Gr1_Rq_ECM(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Request Driveaway with 1st Gear by ECM / MS-Wish: "Attraction 1st gear" */
    bool get_Gr1_Rq_ECM() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Shift Characteristic Displacement Request / Request Switching Shift */
    void set_ShftChrDsp_Rq(TX_RQ_ECM_ShftChrDsp_Rq value){ raw = (raw & 0xfff0ffffffffffff) | ((uint64_t)value & 0xf) << 48; }

    /** Gets Shift Characteristic Displacement Request / Request Switching Shift */
    TX_RQ_ECM_ShftChrDsp_Rq get_ShftChrDsp_Rq() const { return (TX_RQ_ECM_ShftChrDsp_Rq)(raw >> 48 & 0xf); }
        
    /** Sets Requested Minimum Transmission Ratio (CVT) / Target Translation, Lower Border (CVT). Conversion formula (To raw from real): y=(x-0.0)/0.02 */
    void set_TxRatioMin_Rq_ECM(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Requested Minimum Transmission Ratio (CVT) / Target Translation, Lower Border (CVT). Conversion formula (To real from raw): y=(0.02x)+0.0 */
    uint8_t get_TxRatioMin_Rq_ECM() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Requested Maximum Transmission Ratio (CVT) / Target Translation, Upper Border (CVT). Conversion formula (To raw from real): y=(x-0.0)/0.02 */
    void set_TxRatioMax_Rq_ECM(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Requested Maximum Transmission Ratio (CVT) / Target Translation, Upper Border (CVT). Conversion formula (To real from raw): y=(0.02x)+0.0 */
    uint8_t get_TxRatioMax_Rq_ECM() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Torque Converter Lockup Clutch Request / Kueb setpoint open / slipping */
    void set_TCC_Rq(TX_RQ_ECM_TCC_Rq value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets Torque Converter Lockup Clutch Request / Kueb setpoint open / slipping */
    TX_RQ_ECM_TCC_Rq get_TCC_Rq() const { return (TX_RQ_ECM_TCC_Rq)(raw >> 30 & 0x3); }
        
    /** Sets Transmission Slip RPM Request / Request Slip speed.. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: rpm) */
    void set_TxSlpRPM_Rq_ECM(uint16_t value){ raw = (raw & 0xffffffffc000ffff) | ((uint64_t)value & 0x3fff) << 16; }

    /** Gets Transmission Slip RPM Request / Request Slip speed.. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: rpm) */
    uint16_t get_TxSlpRPM_Rq_ECM() const { return (uint16_t)(raw >> 16 & 0x3fff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_TX_RQ_ECM(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_TX_RQ_ECM() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Engine Control Modules in Limp-Home Operation Fashion / ECM in emergency operation */
    void set_ECM_LHOM(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets Engine Control Modules in Limp-Home Operation Fashion / ECM in emergency operation */
    bool get_ECM_LHOM() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets Engine Exhaust-Gas Aftertreatment Active (Diesel) / Engine Exhaust Aftertreatment Active (Diesel) */
    void set_EngExhstAfterTreat_Actv(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets Engine Exhaust-Gas Aftertreatment Active (Diesel) / Engine Exhaust Aftertreatment Active (Diesel) */
    bool get_EngExhstAfterTreat_Actv() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets Engine RPM Sensor in LIMP-Home Operation Fashion / engine speed sensor in emergency operation */
    void set_EngRPM_Sens_LHOM(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets Engine RPM Sensor in LIMP-Home Operation Fashion / engine speed sensor in emergency operation */
    bool get_EngRPM_Sens_LHOM() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_TX_RQ_ECM(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_TX_RQ_ECM() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} TX_RQ_ECM;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ENG_RS1_PT */
	uint32_t get_canid(){ return ENG_RS1_PT_CAN_ID; }
    /** Sets Engine Control Module Has Cruise Control Encoded / SerentemPomat is Variant Coded */
    void set_CC_Encode_ECM(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets Engine Control Module Has Cruise Control Encoded / SerentemPomat is Variant Coded */
    bool get_CC_Encode_ECM() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Enable Engine Torque Request / Enable Torque Request AS */
    void set_EngTrq_Enbl_Rq_AS(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Enable Engine Torque Request / Enable Torque Request AS */
    bool get_EngTrq_Enbl_Rq_AS() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Selected Torque by Driver Including Trailing Throttle Component / Preset Tame Driver including Schubrank. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqSel_D_TTC(uint16_t value){ raw = (raw & 0xe000ffffffffffff) | ((uint64_t)value & 0x1fff) << 48; }

    /** Gets Selected Torque by Driver Including Trailing Throttle Component / Preset Tame Driver including Schubrank. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqSel_D_TTC() const { return (uint16_t)(raw >> 48 & 0x1fff); }
        
    /** Sets Enable Fast Engine Torque Adjustment / Enable Fast torque setting */
    void set_EngTrqAdjFast_Enbl(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Enable Fast Engine Torque Adjustment / Enable Fast torque setting */
    bool get_EngTrqAdjFast_Enbl() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Enable Engine Torque Request / Enable Torque Requirement SBC */
    void set_EngTrq_Enbl_Rq_SBC(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Enable Engine Torque Request / Enable Torque Requirement SBC */
    bool get_EngTrq_Enbl_Rq_SBC() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Selected Torque By AS Including Trailing Throttle Component / Property Toment AS including thrust. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqSel_AS_TTC(uint16_t value){ raw = (raw & 0xffffe000ffffffff) | ((uint64_t)value & 0x1fff) << 32; }

    /** Gets Selected Torque By AS Including Trailing Throttle Component / Property Toment AS including thrust. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqSel_AS_TTC() const { return (uint16_t)(raw >> 32 & 0x1fff); }
        
    /** Sets Engine Torque Request AcknowledgeGement / acknowledgment Torque requirement */
    void set_EngTrq_Ack_ECM(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets Engine Torque Request AcknowledgeGement / acknowledgment Torque requirement */
    bool get_EngTrq_Ack_ECM() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets Enable Engine Torque Request / Enable Tomentic Request TCM */
    void set_EngTrq_Enbl_Rq_TCM(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets Enable Engine Torque Request / Enable Tomentic Request TCM */
    bool get_EngTrq_Enbl_Rq_TCM() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Selected Torque by SBC Including Trailing Throttle Component / Preset Tame SBC including thrust. Conversion formula (To raw from real): y=(x+500.0)/0.25 (Unit: Nm) */
    void set_EngTrqSel_SBC_TTC(uint16_t value){ raw = (raw & 0xffffffffe000ffff) | ((uint64_t)value & 0x1fff) << 16; }

    /** Gets Selected Torque by SBC Including Trailing Throttle Component / Preset Tame SBC including thrust. Conversion formula (To real from raw): y=(0.25x)-500.0 (Unit: Nm) */
    uint16_t get_EngTrqSel_SBC_TTC() const { return (uint16_t)(raw >> 16 & 0x1fff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_ENG_RS1_PT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_ENG_RS1_PT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_ENG_RS1_PT(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_ENG_RS1_PT() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} ENG_RS1_PT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of DPM_STAT */
	uint32_t get_canid(){ return DPM_STAT_CAN_ID; }
    /** Sets Decentral Power Management External Fashion Enable Request / Release External Fashion by Decentralized Power Management */
    void set_DPM_ExtMd_Enbl_Rq(DPM_STAT_DPM_ExtMd_Enbl_Rq value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Decentral Power Management External Fashion Enable Request / Release External Fashion by Decentralized Power Management */
    DPM_STAT_DPM_ExtMd_Enbl_Rq get_DPM_ExtMd_Enbl_Rq() const { return (DPM_STAT_DPM_ExtMd_Enbl_Rq)(raw >> 58 & 0x3); }
        
    /** Sets Decentral Power Management Fashion Limit Request / Mode Handle Decentralized Power Management */
    void set_DPM_MdLmt_Rq(DPM_STAT_DPM_MdLmt_Rq value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Decentral Power Management Fashion Limit Request / Mode Handle Decentralized Power Management */
    DPM_STAT_DPM_MdLmt_Rq get_DPM_MdLmt_Rq() const { return (DPM_STAT_DPM_MdLmt_Rq)(raw >> 56 & 0x3); }
        
} DPM_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of WHL_STAT1 */
	uint32_t get_canid(){ return WHL_STAT1_CAN_ID; }
    /** Sets Wheel Pulse Counter Front Left (96 by rotation) / pulse ring counter wheel front left (96 per revolution). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Impulses) */
    void set_WhlPlsCnt_FL(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Wheel Pulse Counter Front Left (96 by rotation) / pulse ring counter wheel front left (96 per revolution). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Impulses) */
    uint8_t get_WhlPlsCnt_FL() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets Wheel Pulse Counter Front Right (96 Per Rotation) / Pulse Ring Counter Wheel Front Right (96 per Revolution). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Impulses) */
    void set_WhlPlsCnt_FR(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Wheel Pulse Counter Front Right (96 Per Rotation) / Pulse Ring Counter Wheel Front Right (96 per Revolution). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Impulses) */
    uint8_t get_WhlPlsCnt_FR() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Wheel Pulse Counter Rear Left (96 by rotation) / pulse ring counter wheel rear left (96 per revolution). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Impulses) */
    void set_WhlPlsCnt_RL(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Wheel Pulse Counter Rear Left (96 by rotation) / pulse ring counter wheel rear left (96 per revolution). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Impulses) */
    uint8_t get_WhlPlsCnt_RL() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Wheel Pulse Counter Rear Right (96 by rotation) / pulse ring counter wheel rear right (96 per revolution). Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Impulses) */
    void set_WhlPlsCnt_RR(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Wheel Pulse Counter Rear Right (96 by rotation) / pulse ring counter wheel rear right (96 per revolution). Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Impulses) */
    uint8_t get_WhlPlsCnt_RR() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_WHL_STAT1(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_WHL_STAT1() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_WHL_STAT1(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_WHL_STAT1() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} WHL_STAT1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of WHL_STAT2 */
	uint32_t get_canid(){ return WHL_STAT2_CAN_ID; }
    /** Sets DIRECTION OF ROTATION OF FRONT LEFT Wheel / direction of rotation Wheel front left */
    void set_WhlDir_FL_Stat(WHL_STAT2_WhlDir_FL_Stat value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets DIRECTION OF ROTATION OF FRONT LEFT Wheel / direction of rotation Wheel front left */
    WHL_STAT2_WhlDir_FL_Stat get_WhlDir_FL_Stat() const { return (WHL_STAT2_WhlDir_FL_Stat)(raw >> 62 & 0x3); }
        
    /** Sets Wheel RPM Front Left / Wheel Speed Front Left. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: rpm) */
    void set_WhlRPM_FL(uint16_t value){ raw = (raw & 0xc000ffffffffffff) | ((uint64_t)value & 0x3fff) << 48; }

    /** Gets Wheel RPM Front Left / Wheel Speed Front Left. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: rpm) */
    uint16_t get_WhlRPM_FL() const { return (uint16_t)(raw >> 48 & 0x3fff); }
        
    /** Sets DIRECTION OF ROTATION OF FRONT RIGHT Wheel / direction of rotation Wheel front right */
    void set_WhlDir_FR_Stat(WHL_STAT2_WhlDir_FR_Stat value){ raw = (raw & 0xffff3fffffffffff) | ((uint64_t)value & 0x3) << 46; }

    /** Gets DIRECTION OF ROTATION OF FRONT RIGHT Wheel / direction of rotation Wheel front right */
    WHL_STAT2_WhlDir_FR_Stat get_WhlDir_FR_Stat() const { return (WHL_STAT2_WhlDir_FR_Stat)(raw >> 46 & 0x3); }
        
    /** Sets Wheel RPM Front Right / wheel speed front right. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: rpm) */
    void set_WhlRPM_FR(uint16_t value){ raw = (raw & 0xffffc000ffffffff) | ((uint64_t)value & 0x3fff) << 32; }

    /** Gets Wheel RPM Front Right / wheel speed front right. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: rpm) */
    uint16_t get_WhlRPM_FR() const { return (uint16_t)(raw >> 32 & 0x3fff); }
        
    /** Sets DIRECTION OF ROTATION OF REAR LEFT Wheel / direction of rotation Wheel rear left */
    void set_WhlDir_RL_Stat(WHL_STAT2_WhlDir_RL_Stat value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets DIRECTION OF ROTATION OF REAR LEFT Wheel / direction of rotation Wheel rear left */
    WHL_STAT2_WhlDir_RL_Stat get_WhlDir_RL_Stat() const { return (WHL_STAT2_WhlDir_RL_Stat)(raw >> 30 & 0x3); }
        
    /** Sets Wheel RPM REAR Left / wheel speed rear left. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: rpm) */
    void set_WhlRPM_RL(uint16_t value){ raw = (raw & 0xffffffffc000ffff) | ((uint64_t)value & 0x3fff) << 16; }

    /** Gets Wheel RPM REAR Left / wheel speed rear left. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: rpm) */
    uint16_t get_WhlRPM_RL() const { return (uint16_t)(raw >> 16 & 0x3fff); }
        
    /** Sets DIRECTION OF ROTATION OF REAR RIGHT Wheel / direction of rotation Wheel rear right */
    void set_WhlDir_RR_Stat(WHL_STAT2_WhlDir_RR_Stat value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets DIRECTION OF ROTATION OF REAR RIGHT Wheel / direction of rotation Wheel rear right */
    WHL_STAT2_WhlDir_RR_Stat get_WhlDir_RR_Stat() const { return (WHL_STAT2_WhlDir_RR_Stat)(raw >> 14 & 0x3); }
        
    /** Sets Wheel RPM Rear Right / Rear Rear Right Right. Conversion formula (To raw from real): y=(x-0.0)/0.50 (Unit: rpm) */
    void set_WhlRPM_RR(uint16_t value){ raw = (raw & 0xffffffffffffc000) | ((uint64_t)value & 0x3fff) << 0; }

    /** Gets Wheel RPM Rear Right / Rear Rear Right Right. Conversion formula (To real from raw): y=(0.50x)+0.0 (Unit: rpm) */
    uint16_t get_WhlRPM_RR() const { return (uint16_t)(raw >> 0 & 0x3fff); }
        
} WHL_STAT2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of PN14_STAT */
	uint32_t get_canid(){ return PN14_STAT_CAN_ID; }
    /** Sets Stop Coordinator Afterrun Function Available / Navail Function Standstill Coordinator available */
    void set_PN14_SPCR_AfterRun_Avl(bool value){ raw = (raw & 0x7fffffffffffffff) | ((uint64_t)value & 0x1) << 63; }

    /** Gets Stop Coordinator Afterrun Function Available / Navail Function Standstill Coordinator available */
    bool get_PN14_SPCR_AfterRun_Avl() const { return (bool)(raw >> 63 & 0x1); }
        
    /** Sets SBC Additional Value Off Request / SBC Added value */
    void set_PN14_SBC_Add_Off_Rq(bool value){ raw = (raw & 0xbfffffffffffffff) | ((uint64_t)value & 0x1) << 62; }

    /** Gets SBC Additional Value Off Request / SBC Added value */
    bool get_PN14_SBC_Add_Off_Rq() const { return (bool)(raw >> 62 & 0x1); }
        
    /** Sets Reversible Belt Tensioner Off Request / GurtStraffer Turn off */
    void set_PN14_RevBltTns_Off_Rq(bool value){ raw = (raw & 0xdfffffffffffffff) | ((uint64_t)value & 0x1) << 61; }

    /** Gets Reversible Belt Tensioner Off Request / GurtStraffer Turn off */
    bool get_PN14_RevBltTns_Off_Rq() const { return (bool)(raw >> 61 & 0x1); }
        
    /** Sets Remote Functions Permission / Remote Control Functions allowed */
    void set_PN14_RemPerm(bool value){ raw = (raw & 0xefffffffffffffff) | ((uint64_t)value & 0x1) << 60; }

    /** Gets Remote Functions Permission / Remote Control Functions allowed */
    bool get_PN14_RemPerm() const { return (bool)(raw >> 60 & 0x1); }
        
    /** Sets Backup Battery Fault / Backup Battery faulty */
    void set_PN14_BackupBat_Flt(bool value){ raw = (raw & 0xfbffffffffffffff) | ((uint64_t)value & 0x1) << 58; }

    /** Gets Backup Battery Fault / Backup Battery faulty */
    bool get_PN14_BackupBat_Flt() const { return (bool)(raw >> 58 & 0x1); }
        
    /** Sets Battery Coupling Switch State / State Battery Coupling Switch */
    void set_PN14_BatCplSw_Stat(PN14_STAT_PN14_BatCplSw_Stat value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Battery Coupling Switch State / State Battery Coupling Switch */
    PN14_STAT_PN14_BatCplSw_Stat get_PN14_BatCplSw_Stat() const { return (PN14_STAT_PN14_BatCplSw_Stat)(raw >> 56 & 0x3); }
        
    /** Sets Supply Battery Voltage / Supply Battery IST voltage. Conversion formula (To raw from real): y=(x-0.0)/0.10 (Unit: V) */
    void set_PN14_SupBat_Volt(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Supply Battery Voltage / Supply Battery IST voltage. Conversion formula (To real from raw): y=(0.10x)+0.0 (Unit: V) */
    uint8_t get_PN14_SupBat_Volt() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Supply Battery Cutoff Switch State / Status Battery Separation Switch */
    void set_PN14_SupBatCutSw_Stat(PN14_STAT_PN14_SupBatCutSw_Stat value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Supply Battery Cutoff Switch State / Status Battery Separation Switch */
    PN14_STAT_PN14_SupBatCutSw_Stat get_PN14_SupBatCutSw_Stat() const { return (PN14_STAT_PN14_SupBatCutSw_Stat)(raw >> 40 & 0x3); }
        
    /** Sets 14 V PowerNet Limp-Home Cutoff Active / 14V-BN emergency shutdown active */
    void set_PN14_LHC_Actv(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets 14 V PowerNet Limp-Home Cutoff Active / 14V-BN emergency shutdown active */
    bool get_PN14_LHC_Actv() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Front Interior Fan to 50% Request / Emergency Shot In front to 50% */
    void set_LHC_IntFan_F_50_Rq(bool value){ raw = (raw & 0xffffffff7fffffff) | ((uint64_t)value & 0x1) << 31; }

    /** Gets LIMP-HOME Cutoff Front Interior Fan to 50% Request / Emergency Shot In front to 50% */
    bool get_LHC_IntFan_F_50_Rq() const { return (bool)(raw >> 31 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Rear Interior Fan to 50% Request / Emergency Shot Inner fan back to 50% */
    void set_LHC_IntFan_R_50_Rq(bool value){ raw = (raw & 0xffffffffbfffffff) | ((uint64_t)value & 0x1) << 30; }

    /** Gets LIMP-HOME Cutoff Rear Interior Fan to 50% Request / Emergency Shot Inner fan back to 50% */
    bool get_LHC_IntFan_R_50_Rq() const { return (bool)(raw >> 30 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff PTC 1st Branch Request / Notification PTC 1. Branch */
    void set_LHC_PTC1_Rq(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets LIMP-HOME Cutoff PTC 1st Branch Request / Notification PTC 1. Branch */
    bool get_LHC_PTC1_Rq() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets LIMP-Home Cutoff PTC 2nd Branch Request / Notification PTC 2. Branch */
    void set_LHC_PTC2_Rq(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets LIMP-Home Cutoff PTC 2nd Branch Request / Notification PTC 2. Branch */
    bool get_LHC_PTC2_Rq() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets LIMP-Home Cutoff PTC 3rd Branch Request / Notification PTC 3. Branch */
    void set_LHC_PTC3_Rq(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets LIMP-Home Cutoff PTC 3rd Branch Request / Notification PTC 3. Branch */
    bool get_LHC_PTC3_Rq() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets LIMP-Home Cutoff PTC 4th Branch Request / Notification PTC 4. Branch */
    void set_LHC_PTC4_Rq(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets LIMP-Home Cutoff PTC 4th Branch Request / Notification PTC 4. Branch */
    bool get_LHC_PTC4_Rq() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets LIMP-Home Cutoff PTC 5th Branch Request / Notification PTC 5. Branch */
    void set_LHC_PTC5_Rq(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets LIMP-Home Cutoff PTC 5th Branch Request / Notification PTC 5. Branch */
    bool get_LHC_PTC5_Rq() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets LIMP-Home Cutoff PTC 6th Branch Request / Notification PTC 6. Branch */
    void set_LHC_PTC6_Rq(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets LIMP-Home Cutoff PTC 6th Branch Request / Notification PTC 6. Branch */
    bool get_LHC_PTC6_Rq() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Trailer Socket Request / Emergency Shot Towers */
    void set_LHC_TrlrSock_Rq(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets LIMP-Home Cutoff Trailer Socket Request / Emergency Shot Towers */
    bool get_LHC_TrlrSock_Rq() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Telematics / Audio / Phone / GPS Request / Notification Telematics / Audio / Phone / GPS */
    void set_LHC_Tlm_Rq(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets LIMP-Home Cutoff Telematics / Audio / Phone / GPS Request / Notification Telematics / Audio / Phone / GPS */
    bool get_LHC_Tlm_Rq() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Seat Ventilation Request / Emergency Shot Seat Ventilation */
    void set_LHC_SeatVn_Rq(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets LIMP-Home Cutoff Seat Ventilation Request / Emergency Shot Seat Ventilation */
    bool get_LHC_SeatVn_Rq() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Seat Heating Stage 1 Request / Emergency Shot Seat Heating Level 1 */
    void set_LHC_SeatHtStg1_Rq(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets LIMP-Home Cutoff Seat Heating Stage 1 Request / Emergency Shot Seat Heating Level 1 */
    bool get_LHC_SeatHtStg1_Rq() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Seat Heating Stage 2 Request / Emergency Shot Seat Heating Level 2 */
    void set_LHC_SeatHtStg2_Rq(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets LIMP-Home Cutoff Seat Heating Stage 2 Request / Emergency Shot Seat Heating Level 2 */
    bool get_LHC_SeatHtStg2_Rq() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Seat Heating Stage 3 Request / Emergency Shot Seat Heating Level 3 */
    void set_LHC_SeatHtStg3_Rq(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets LIMP-Home Cutoff Seat Heating Stage 3 Request / Emergency Shot Seat Heating Level 3 */
    bool get_LHC_SeatHtStg3_Rq() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Door Surface Heating Stage 1 Request / Emergency Shot Door surface heating Level 1 */
    void set_LHC_DSH_Stg1_Rq(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets LIMP-Home Cutoff Door Surface Heating Stage 1 Request / Emergency Shot Door surface heating Level 1 */
    bool get_LHC_DSH_Stg1_Rq() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Door Surface Heating Stage 2 Request / Emergency Shot Door surface heating Level 2 */
    void set_LHC_DSH_Stg2_Rq(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets LIMP-Home Cutoff Door Surface Heating Stage 2 Request / Emergency Shot Door surface heating Level 2 */
    bool get_LHC_DSH_Stg2_Rq() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Fog Lamps Front Request / Emergency Shot Fog Light */
    void set_LHC_FogLmp_Ft_Rq(bool value){ raw = (raw & 0xffffffffffff7fff) | ((uint64_t)value & 0x1) << 15; }

    /** Gets LIMP-Home Cutoff Fog Lamps Front Request / Emergency Shot Fog Light */
    bool get_LHC_FogLmp_Ft_Rq() const { return (bool)(raw >> 15 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Engine Fan to 50% Request / Emergency Shot Engineer Fan to 50% */
    void set_LHC_EngFan_50_Rq(bool value){ raw = (raw & 0xffffffffffffbfff) | ((uint64_t)value & 0x1) << 14; }

    /** Gets LIMP-Home Cutoff Engine Fan to 50% Request / Emergency Shot Engineer Fan to 50% */
    bool get_LHC_EngFan_50_Rq() const { return (bool)(raw >> 14 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Rear Cooler Box Request / Emergency Shot Fund Cooler */
    void set_LHC_CoolBox_R_Rq(bool value){ raw = (raw & 0xffffffffffffdfff) | ((uint64_t)value & 0x1) << 13; }

    /** Gets LIMP-Home Cutoff Rear Cooler Box Request / Emergency Shot Fund Cooler */
    bool get_LHC_CoolBox_R_Rq() const { return (bool)(raw >> 13 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Mirror Heater Request / emergency shutdown Exterior mirror heating */
    void set_LHC_MirrHt_Rq(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets LIMP-Home Cutoff Mirror Heater Request / emergency shutdown Exterior mirror heating */
    bool get_LHC_MirrHt_Rq() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Windshield Heater Request / Emergency Shutters Windscreen Heating */
    void set_LHC_WShHt_Rq(bool value){ raw = (raw & 0xfffffffffffff7ff) | ((uint64_t)value & 0x1) << 11; }

    /** Gets LIMP-Home Cutoff Windshield Heater Request / Emergency Shutters Windscreen Heating */
    bool get_LHC_WShHt_Rq() const { return (bool)(raw >> 11 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Steering Wheel Heater Request / Emergency Shot Steering Wheeling */
    void set_LHC_StW_Ht_Rq(bool value){ raw = (raw & 0xfffffffffffffbff) | ((uint64_t)value & 0x1) << 10; }

    /** Gets LIMP-HOME Cutoff Steering Wheel Heater Request / Emergency Shot Steering Wheeling */
    bool get_LHC_StW_Ht_Rq() const { return (bool)(raw >> 10 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Electric Backlite Heater Request / Emergency Shot Rear Disc Heating */
    void set_LHC_EBL_Rq(bool value){ raw = (raw & 0xfffffffffffffdff) | ((uint64_t)value & 0x1) << 9; }

    /** Gets LIMP-Home Cutoff Electric Backlite Heater Request / Emergency Shot Rear Disc Heating */
    bool get_LHC_EBL_Rq() const { return (bool)(raw >> 9 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Wiper Park Position Heater Request / Emergency Shuttle Wiper Dashing */
    void set_LHC_WprPkHt_Rq(bool value){ raw = (raw & 0xfffffffffffffeff) | ((uint64_t)value & 0x1) << 8; }

    /** Gets LIMP-HOME Cutoff Wiper Park Position Heater Request / Emergency Shuttle Wiper Dashing */
    bool get_LHC_WprPkHt_Rq() const { return (bool)(raw >> 8 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Taxi RoofSign / Printer Request / Emergency Shot TaxidAchach */
    void set_PN14_LHC_Taxi_Rq(bool value){ raw = (raw & 0xffffffffffffffef) | ((uint64_t)value & 0x1) << 4; }

    /** Gets LIMP-Home Cutoff Taxi RoofSign / Printer Request / Emergency Shot TaxidAchach */
    bool get_PN14_LHC_Taxi_Rq() const { return (bool)(raw >> 4 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Independant Car Heater Request / Emergency shutdown */
    void set_LHC_ICH_Rq(bool value){ raw = (raw & 0xfffffffffffffff7) | ((uint64_t)value & 0x1) << 3; }

    /** Gets LIMP-HOME Cutoff Independant Car Heater Request / Emergency shutdown */
    bool get_LHC_ICH_Rq() const { return (bool)(raw >> 3 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Residual Heat Utilization Request / Notification Residual heat use */
    void set_LHC_RHU_Rq(bool value){ raw = (raw & 0xfffffffffffffffb) | ((uint64_t)value & 0x1) << 2; }

    /** Gets LIMP-Home Cutoff Residual Heat Utilization Request / Notification Residual heat use */
    bool get_LHC_RHU_Rq() const { return (bool)(raw >> 2 & 0x1); }
        
    /** Sets LIMP-Home Cutoff Comfort Lamps Request / Notification for Comfort Lamps */
    void set_LHC_ComfLmp_Rq(bool value){ raw = (raw & 0xfffffffffffffffd) | ((uint64_t)value & 0x1) << 1; }

    /** Gets LIMP-Home Cutoff Comfort Lamps Request / Notification for Comfort Lamps */
    bool get_LHC_ComfLmp_Rq() const { return (bool)(raw >> 1 & 0x1); }
        
    /** Sets LIMP-HOME Cutoff Trunk Socket / Cigarette Lighter Request / Emergency Shot Coffee Socket / Cigar Lighter */
    void set_LHC_TrkSock_Rq(bool value){ raw = (raw & 0xfffffffffffffffe) | ((uint64_t)value & 0x1) << 0; }

    /** Gets LIMP-HOME Cutoff Trunk Socket / Cigarette Lighter Request / Emergency Shot Coffee Socket / Cigar Lighter */
    bool get_LHC_TrkSock_Rq() const { return (bool)(raw >> 0 & 0x1); }
        
} PN14_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of CVI */
	uint32_t get_canid(){ return CVI_CAN_ID; }
    /** Sets Country code / country code */
    void set_Country(CVI_Country value){ raw = (raw & 0x0fffffffffffffff) | ((uint64_t)value & 0xf) << 60; }

    /** Gets Country code / country code */
    CVI_Country get_Country() const { return (CVI_Country)(raw >> 60 & 0xf); }
        
    /** Sets DC group / DC group */
    void set_Group(CVI_Group value){ raw = (raw & 0xf0ffffffffffffff) | ((uint64_t)value & 0xf) << 56; }

    /** Gets DC group / DC group */
    CVI_Group get_Group() const { return (CVI_Group)(raw >> 56 & 0xf); }
        
    /** Sets Guard level / Guard Level */
    void set_Guard(CVI_Guard value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Guard level / Guard Level */
    CVI_Guard get_Guard() const { return (CVI_Guard)(raw >> 54 & 0x3); }
        
    /** Sets Vehicle line / Series */
    void set_VehLine(CVI_VehLine value){ raw = (raw & 0xffc0ffffffffffff) | ((uint64_t)value & 0x3f) << 48; }

    /** Gets Vehicle line / Series */
    CVI_VehLine get_VehLine() const { return (CVI_VehLine)(raw >> 48 & 0x3f); }
        
    /** Sets Vehicle line version: year / year change: Year */
    void set_VehLineYear(CVI_VehLineYear value){ raw = (raw & 0xffff83ffffffffff) | ((uint64_t)value & 0x1f) << 42; }

    /** Gets Vehicle line version: year / year change: Year */
    CVI_VehLineYear get_VehLineYear() const { return (CVI_VehLineYear)(raw >> 42 & 0x1f); }
        
    /** Sets Vehicle line version: package / change Year: Package */
    void set_VehLinePack(CVI_VehLinePack value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Vehicle line version: package / change Year: Package */
    CVI_VehLinePack get_VehLinePack() const { return (CVI_VehLinePack)(raw >> 40 & 0x3); }
        
    /** Sets Steering variant / Steering variant */
    void set_StStyle(CVI_StStyle value){ raw = (raw & 0xffffff9fffffffff) | ((uint64_t)value & 0x3) << 37; }

    /** Gets Steering variant / Steering variant */
    CVI_StStyle get_StStyle() const { return (CVI_StStyle)(raw >> 37 & 0x3); }
        
    /** Sets Vehicle body style / body variant */
    void set_BodyStyle(CVI_BodyStyle value){ raw = (raw & 0xffffffe0ffffffff) | ((uint64_t)value & 0x1f) << 32; }

    /** Gets Vehicle body style / body variant */
    CVI_BodyStyle get_BodyStyle() const { return (CVI_BodyStyle)(raw >> 32 & 0x1f); }
        
    /** Sets Engine (Bit 7: Otto-engine => 0, diesel engine => 1) / motor (Bit 7: gasoline => 0, Diesel => 1) */
    void set_EngStyle(CVI_EngStyle value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Engine (Bit 7: Otto-engine => 0, diesel engine => 1) / motor (Bit 7: gasoline => 0, Diesel => 1) */
    CVI_EngStyle get_EngStyle() const { return (CVI_EngStyle)(raw >> 24 & 0xff); }
        
    /** Sets Rain sensor available / rain sensor available */
    void set_RainSens_Avl(bool value){ raw = (raw & 0xffffffffff7fffff) | ((uint64_t)value & 0x1) << 23; }

    /** Gets Rain sensor available / rain sensor available */
    bool get_RainSens_Avl() const { return (bool)(raw >> 23 & 0x1); }
        
    /** Sets Light sensor available / light sensor available */
    void set_LgtSens_Avl(bool value){ raw = (raw & 0xffffffffffbfffff) | ((uint64_t)value & 0x1) << 22; }

    /** Gets Light sensor available / light sensor available */
    bool get_LgtSens_Avl() const { return (bool)(raw >> 22 & 0x1); }
        
    /** Sets Independent car heater available / heater available */
    void set_ICH_Avl(bool value){ raw = (raw & 0xffffffffffdfffff) | ((uint64_t)value & 0x1) << 21; }

    /** Gets Independent car heater available / heater available */
    bool get_ICH_Avl() const { return (bool)(raw >> 21 & 0x1); }
        
    /** Sets Passenger compartment detection available / interior protection available */
    void set_PCD_Avl(bool value){ raw = (raw & 0xffffffffffefffff) | ((uint64_t)value & 0x1) << 20; }

    /** Gets Passenger compartment detection available / interior protection available */
    bool get_PCD_Avl() const { return (bool)(raw >> 20 & 0x1); }
        
    /** Sets Vehicle theft alarm available / EDW available */
    void set_VTA_Avl(bool value){ raw = (raw & 0xfffffffffff7ffff) | ((uint64_t)value & 0x1) << 19; }

    /** Gets Vehicle theft alarm available / EDW available */
    bool get_VTA_Avl() const { return (bool)(raw >> 19 & 0x1); }
        
    /** Sets Trailer Hitch available / trailer coupling available */
    void set_TrlrHtch_Avl(bool value){ raw = (raw & 0xfffffffffffbffff) | ((uint64_t)value & 0x1) << 18; }

    /** Gets Trailer Hitch available / trailer coupling available */
    bool get_TrlrHtch_Avl() const { return (bool)(raw >> 18 & 0x1); }
        
    /** Sets Air Condition available / KLA available */
    void set_HVAC_Avl(bool value){ raw = (raw & 0xfffffffffffdffff) | ((uint64_t)value & 0x1) << 17; }

    /** Gets Air Condition available / KLA available */
    bool get_HVAC_Avl() const { return (bool)(raw >> 17 & 0x1); }
        
    /** Sets Transmission Control available / transmission control available */
    void set_TCM_Avl(bool value){ raw = (raw & 0xfffffffffffeffff) | ((uint64_t)value & 0x1) << 16; }

    /** Gets Transmission Control available / transmission control available */
    bool get_TCM_Avl() const { return (bool)(raw >> 16 & 0x1); }
        
    /** Sets Vehicle roof style / roof version */
    void set_RoofStyle(CVI_RoofStyle value){ raw = (raw & 0xffffffffffff1fff) | ((uint64_t)value & 0x7) << 13; }

    /** Gets Vehicle roof style / roof version */
    CVI_RoofStyle get_RoofStyle() const { return (CVI_RoofStyle)(raw >> 13 & 0x7); }
        
    /** Sets Complete substitution lights enabled / Complete replacement light allowed */
    void set_Cplt_SL_Enbl(bool value){ raw = (raw & 0xffffffffffffefff) | ((uint64_t)value & 0x1) << 12; }

    /** Gets Complete substitution lights enabled / Complete replacement light allowed */
    bool get_Cplt_SL_Enbl() const { return (bool)(raw >> 12 & 0x1); }
        
    /** Sets Vehicle options package / vehicle equipment package */
    void set_VehOPTPack(CVI_VehOPTPack value){ raw = (raw & 0xfffffffffffff3ff) | ((uint64_t)value & 0x3) << 10; }

    /** Gets Vehicle options package / vehicle equipment package */
    CVI_VehOPTPack get_VehOPTPack() const { return (CVI_VehOPTPack)(raw >> 10 & 0x3); }
        
    /** Sets HVAC style / KLA variant */
    void set_HVACStyle(CVI_HVACStyle value){ raw = (raw & 0xfffffffffffffcff) | ((uint64_t)value & 0x3) << 8; }

    /** Gets HVAC style / KLA variant */
    CVI_HVACStyle get_HVACStyle() const { return (CVI_HVACStyle)(raw >> 8 & 0x3); }
        
    /** Sets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_CRC_CVI(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets CRC Checksum Byte 1 to 7 Accordinging to SAE J1850 / CRC Checksum Byte 1 - 7 to SAE J1850. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_CRC_CVI() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} CVI;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of VEH_DYN_STAT */
	uint32_t get_canid(){ return VEH_DYN_STAT_CAN_ID; }
    /** Sets Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means Left) / Rohsignal Gierrate Without Calculation / Filtering (+ = Left). Conversion formula (To raw from real): y=(x+327.67999267578125)/0.01 (Unit: °/s) */
    void set_VehYawRate_Raw(uint16_t value){ raw = (raw & 0x0000ffffffffffff) | ((uint64_t)value & 0xffff) << 48; }

    /** Gets Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means Left) / Rohsignal Gierrate Without Calculation / Filtering (+ = Left). Conversion formula (To real from raw): y=(0.01x)-327.67999267578125 (Unit: °/s) */
    uint16_t get_VehYawRate_Raw() const { return (uint16_t)(raw >> 48 & 0xffff); }
        
    /** Sets Offset of Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means LEFT) / Offset of the Raw Signal Greeding rate without reconciliation / filtering (+ = left). Conversion formula (To raw from real): y=(x+10.239999771118164)/0.08 */
    void set_VehYawRateOffset(uint8_t value){ raw = (raw & 0xffff00ffffffffff) | ((uint64_t)value & 0xff) << 40; }

    /** Gets Offset of Vehicle Yaw Rate Unfiltered / Unadjusted (+ Means LEFT) / Offset of the Raw Signal Greeding rate without reconciliation / filtering (+ = left). Conversion formula (To real from raw): y=(0.08x)-10.239999771118164 */
    uint8_t get_VehYawRateOffset() const { return (uint8_t)(raw >> 40 & 0xff); }
        
    /** Sets Offset of Vehicle Longitudinal Acceleration (+ Means Forward) / Offset of vehicle longitudinal acceleration (+ = forward). Conversion formula (To raw from real): y=(x+2.559999942779541)/0.02 (Unit: m/s²) */
    void set_VehAccel_X_Offset(uint8_t value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Offset of Vehicle Longitudinal Acceleration (+ Means Forward) / Offset of vehicle longitudinal acceleration (+ = forward). Conversion formula (To real from raw): y=(0.02x)-2.559999942779541 (Unit: m/s²) */
    uint8_t get_VehAccel_X_Offset() const { return (uint8_t)(raw >> 32 & 0xff); }
        
    /** Sets Vehicle Longitudinal Acceleration (+ Means Forward) / vehicle longitudinal acceleration (+ = forward). Conversion formula (To raw from real): y=(x+10.239999771118164)/0.08 (Unit: m/s²) */
    void set_VehAccel_X(uint8_t value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Vehicle Longitudinal Acceleration (+ Means Forward) / vehicle longitudinal acceleration (+ = forward). Conversion formula (To real from raw): y=(0.08x)-10.239999771118164 (Unit: m/s²) */
    uint8_t get_VehAccel_X() const { return (uint8_t)(raw >> 24 & 0xff); }
        
    /** Sets Vehicle Lateral Acceleration (+ Means LEFT, Specific to Center of Gravity, Offset Corrected) / Vehicle Cross Acceleration in Focus (+ = Left, Focus-related, Offset Corrected). Conversion formula (To raw from real): y=(x+10.239999771118164)/0.08 (Unit: m/s²) */
    void set_VehAccel_Y(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Vehicle Lateral Acceleration (+ Means LEFT, Specific to Center of Gravity, Offset Corrected) / Vehicle Cross Acceleration in Focus (+ = Left, Focus-related, Offset Corrected). Conversion formula (To real from raw): y=(0.08x)-10.239999771118164 (Unit: m/s²) */
    uint8_t get_VehAccel_Y() const { return (uint8_t)(raw >> 16 & 0xff); }
        
    /** Sets Message Counter / Message Counter. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_MC_VEH_DYN_STAT(uint8_t value){ raw = (raw & 0xffffffffffff0fff) | ((uint64_t)value & 0xf) << 12; }

    /** Gets Message Counter / Message Counter. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_MC_VEH_DYN_STAT() const { return (uint8_t)(raw >> 12 & 0xf); }
        
    /** Sets Offset of Vehicle Lateral Acceleration (+ Means Left) / Offset of vehicle cross-acceleration in focus (+ = left). Conversion formula (To raw from real): y=(x+2.559999942779541)/0.02 (Unit: m/s²) */
    void set_VehAccel_Y_Offset(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Offset of Vehicle Lateral Acceleration (+ Means Left) / Offset of vehicle cross-acceleration in focus (+ = left). Conversion formula (To real from raw): y=(0.02x)-2.559999942779541 (Unit: m/s²) */
    uint8_t get_VehAccel_Y_Offset() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} VEH_DYN_STAT;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BODY_R1 */
	uint32_t get_canid(){ return BODY_R1_CAN_ID; }
    /** Sets Rotary Latch Door Rear Right State / Status Swivel Fall Door Rear Right */
    void set_DrRLtch_RR_Stat(BODY_R1_DrRLtch_RR_Stat value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Rotary Latch Door Rear Right State / Status Swivel Fall Door Rear Right */
    BODY_R1_DrRLtch_RR_Stat get_DrRLtch_RR_Stat() const { return (BODY_R1_DrRLtch_RR_Stat)(raw >> 62 & 0x3); }
        
    /** Sets Rotary Latch Door Rear Left State / Status Swivel Fall Door Rear Left */
    void set_DrRLtch_RL_Stat(BODY_R1_DrRLtch_RL_Stat value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets Rotary Latch Door Rear Left State / Status Swivel Fall Door Rear Left */
    BODY_R1_DrRLtch_RL_Stat get_DrRLtch_RL_Stat() const { return (BODY_R1_DrRLtch_RL_Stat)(raw >> 60 & 0x3); }
        
    /** Sets Rotary Latch Door Front Right State / Status Swivel Fall Door Front Right */
    void set_DrRLtch_FR_Stat(BODY_R1_DrRLtch_FR_Stat value){ raw = (raw & 0xf3ffffffffffffff) | ((uint64_t)value & 0x3) << 58; }

    /** Gets Rotary Latch Door Front Right State / Status Swivel Fall Door Front Right */
    BODY_R1_DrRLtch_FR_Stat get_DrRLtch_FR_Stat() const { return (BODY_R1_DrRLtch_FR_Stat)(raw >> 58 & 0x3); }
        
    /** Sets Rotary Latch Door Front Left State / Status Swivel Fall Door Front Left */
    void set_DrRLtch_FL_Stat(BODY_R1_DrRLtch_FL_Stat value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Rotary Latch Door Front Left State / Status Swivel Fall Door Front Left */
    BODY_R1_DrRLtch_FL_Stat get_DrRLtch_FL_Stat() const { return (BODY_R1_DrRLtch_FL_Stat)(raw >> 56 & 0x3); }
        
    /** Sets Emergency Flasher on Request / Warning Blink Light */
    void set_EF_On_Rq(BODY_R1_EF_On_Rq value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Emergency Flasher on Request / Warning Blink Light */
    BODY_R1_EF_On_Rq get_EF_On_Rq() const { return (BODY_R1_EF_On_Rq)(raw >> 54 & 0x3); }
        
    /** Sets Alarm Activated by Vehicle Theft Alarm / EDW alarm triggered */
    void set_VTA_Alm_Actv(bool value){ raw = (raw & 0xffdfffffffffffff) | ((uint64_t)value & 0x1) << 53; }

    /** Gets Alarm Activated by Vehicle Theft Alarm / EDW alarm triggered */
    bool get_VTA_Alm_Actv() const { return (bool)(raw >> 53 & 0x1); }
        
    /** Sets Independent Car Heater / Ventilation Active / Stand heater / ventilation active */
    void set_ICH_HtVn_Actv(bool value){ raw = (raw & 0xffefffffffffffff) | ((uint64_t)value & 0x1) << 52; }

    /** Gets Independent Car Heater / Ventilation Active / Stand heater / ventilation active */
    bool get_ICH_HtVn_Actv() const { return (bool)(raw >> 52 & 0x1); }
        
    /** Sets Engine Hood State / Status Bonnet */
    void set_EngHd_Stat(BODY_R1_EngHd_Stat value){ raw = (raw & 0xfff3ffffffffffff) | ((uint64_t)value & 0x3) << 50; }

    /** Gets Engine Hood State / Status Bonnet */
    BODY_R1_EngHd_Stat get_EngHd_Stat() const { return (BODY_R1_EngHd_Stat)(raw >> 50 & 0x3); }
        
    /** Sets Deck Lid Rotary Latch State / Status Swivel Fall Tail Cover */
    void set_DL_RLtch_Stat(BODY_R1_DL_RLtch_Stat value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets Deck Lid Rotary Latch State / Status Swivel Fall Tail Cover */
    BODY_R1_DL_RLtch_Stat get_DL_RLtch_Stat() const { return (BODY_R1_DL_RLtch_Stat)(raw >> 48 & 0x3); }
        
    /** Sets Low Beam On Request by Automatic Driving Light / AFL Request: Switch on low beam */
    void set_ADL_LoBm_On_Rq(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Low Beam On Request by Automatic Driving Light / AFL Request: Switch on low beam */
    bool get_ADL_LoBm_On_Rq() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Light Sensor Detect's Night Fashion / Light Sensor Actual value */
    void set_LgtSens_Night(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Light Sensor Detect's Night Fashion / Light Sensor Actual value */
    bool get_LgtSens_Night() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Light Sensor Fault / Light Sensor Defective */
    void set_LgtSens_Flt(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Light Sensor Fault / Light Sensor Defective */
    bool get_LgtSens_Flt() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Light sensor "Tunnel" Detected / Light Sensor: Tunnel detected */
    void set_LgtSens_Tunnel(bool value){ raw = (raw & 0xffffefffffffffff) | ((uint64_t)value & 0x1) << 44; }

    /** Gets Light sensor "Tunnel" Detected / Light Sensor: Tunnel detected */
    bool get_LgtSens_Tunnel() const { return (bool)(raw >> 44 & 0x1); }
        
    /** Sets Light Sensor Information Not available / Values ​​of light sensor not available */
    void set_LgtSens_SNA(bool value){ raw = (raw & 0xfffff7ffffffffff) | ((uint64_t)value & 0x1) << 43; }

    /** Gets Light Sensor Information Not available / Values ​​of light sensor not available */
    bool get_LgtSens_SNA() const { return (bool)(raw >> 43 & 0x1); }
        
    /** Sets Twilight State Light Sensor / Twilight Light Sensor. Conversion formula (To raw from real): y=(x-0.0)/1.00 (Unit: Steps) */
    void set_LgtSens_Twlgt(uint8_t value){ raw = (raw & 0xfffff8ffffffffff) | ((uint64_t)value & 0x7) << 40; }

    /** Gets Twilight State Light Sensor / Twilight Light Sensor. Conversion formula (To real from raw): y=(1.00x)+0.0 (Unit: Steps) */
    uint8_t get_LgtSens_Twlgt() const { return (uint8_t)(raw >> 40 & 0x7); }
        
    /** Sets Tire in Limp-Home Operation Fashion / Mature Need */
    void set_Tire_LHOM(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Tire in Limp-Home Operation Fashion / Mature Need */
    bool get_Tire_LHOM() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Wiper Outside Park Position / Wiper Outside Parking */
    void set_WprOutsdPkPosn(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Wiper Outside Park Position / Wiper Outside Parking */
    bool get_WprOutsdPkPosn() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Mech. Parking Brake State / Status Mech. Parking brake */
    void set_MPkBrk_Stat(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Mech. Parking Brake State / Status Mech. Parking brake */
    bool get_MPkBrk_Stat() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Terminal 54 (Brake Light) Active (FROM SAM_R) / Terminal 54 (Brake light) Feedback from SAM_R */
    void set_Term54_Actv(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Terminal 54 (Brake Light) Active (FROM SAM_R) / Terminal 54 (Brake light) Feedback from SAM_R */
    bool get_Term54_Actv() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Horn is on / signal horn is switched on */
    void set_Hrn_On(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Horn is on / signal horn is switched on */
    bool get_Hrn_On() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets trailer detected / trailer operation detected */
    void set_Trlr_Stat(BODY_R1_Trlr_Stat value){ raw = (raw & 0xfffffffcffffffff) | ((uint64_t)value & 0x3) << 32; }

    /** Gets trailer detected / trailer operation detected */
    BODY_R1_Trlr_Stat get_Trlr_Stat() const { return (BODY_R1_Trlr_Stat)(raw >> 32 & 0x3); }
        
    /** Sets Reverse Gear Engaged / reverse input */
    void set_RevGr_Engg(BODY_R1_RevGr_Engg value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets Reverse Gear Engaged / reverse input */
    BODY_R1_RevGr_Engg get_RevGr_Engg() const { return (BODY_R1_RevGr_Engg)(raw >> 30 & 0x3); }
        
    /** Sets Low Beam Passenger Side Or Right (Depending On Vehicle Line) Fault / Downlight passenger side or right (depending on the series) defective */
    void set_LoBm_P_Rt_Flt(bool value){ raw = (raw & 0xffffffffdfffffff) | ((uint64_t)value & 0x1) << 29; }

    /** Gets Low Beam Passenger Side Or Right (Depending On Vehicle Line) Fault / Downlight passenger side or right (depending on the series) defective */
    bool get_LoBm_P_Rt_Flt() const { return (bool)(raw >> 29 & 0x1); }
        
    /** Sets Low Beam Driver Side Or Left (Depending On Vehicle Line) Fault / Dimensioned Driver's side or left (depending on the series) defective */
    void set_LoBm_D_Lt_Flt(bool value){ raw = (raw & 0xffffffffefffffff) | ((uint64_t)value & 0x1) << 28; }

    /** Gets Low Beam Driver Side Or Left (Depending On Vehicle Line) Fault / Dimensioned Driver's side or left (depending on the series) defective */
    bool get_LoBm_D_Lt_Flt() const { return (bool)(raw >> 28 & 0x1); }
        
    /** Sets Infrared Lamp Passenger Side Or Right (Depending On Vehicle Line) Fault / IR headlight passenger side or right (depending on the series) defective */
    void set_IrLmp_P_Rt_Flt(bool value){ raw = (raw & 0xfffffffff7ffffff) | ((uint64_t)value & 0x1) << 27; }

    /** Gets Infrared Lamp Passenger Side Or Right (Depending On Vehicle Line) Fault / IR headlight passenger side or right (depending on the series) defective */
    bool get_IrLmp_P_Rt_Flt() const { return (bool)(raw >> 27 & 0x1); }
        
    /** Sets Infrared Lamp Driver Side Or Right (Depending On Vehicle Line) Fault / IR headlight driver's side or left (depending on the series) defective */
    void set_IrLmp_D_Lt_Flt(bool value){ raw = (raw & 0xfffffffffbffffff) | ((uint64_t)value & 0x1) << 26; }

    /** Gets Infrared Lamp Driver Side Or Right (Depending On Vehicle Line) Fault / IR headlight driver's side or left (depending on the series) defective */
    bool get_IrLmp_D_Lt_Flt() const { return (bool)(raw >> 26 & 0x1); }
        
    /** Sets High beam is on / high beam is switched on */
    void set_HiBm_On(bool value){ raw = (raw & 0xfffffffffdffffff) | ((uint64_t)value & 0x1) << 25; }

    /** Gets High beam is on / high beam is switched on */
    bool get_HiBm_On() const { return (bool)(raw >> 25 & 0x1); }
        
    /** Sets Switch on Low Beam On Request / Low Light */
    void set_LoBm_On_Rq(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets Switch on Low Beam On Request / Low Light */
    bool get_LoBm_On_Rq() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets Inside Air Temperature / Inn temperature. Conversion formula (To raw from real): y=(x-0.0)/0.25 (Unit: °C) */
    void set_AirTemp_Insd(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Inside Air Temperature / Inn temperature. Conversion formula (To real from raw): y=(0.25x)+0.0 (Unit: °C) */
    uint8_t get_AirTemp_Insd() const { return (uint8_t)(raw >> 16 & 0xff); }
        
    /** Sets Steering Wheel Conditioning State / Status Steering Cool Climatization */
    void set_StW_Cond_Stat(BODY_R1_StW_Cond_Stat value){ raw = (raw & 0xffffffffffff3fff) | ((uint64_t)value & 0x3) << 14; }

    /** Gets Steering Wheel Conditioning State / Status Steering Cool Climatization */
    BODY_R1_StW_Cond_Stat get_StW_Cond_Stat() const { return (BODY_R1_StW_Cond_Stat)(raw >> 14 & 0x3); }
        
    /** Sets BUCKLE SWITCH REAR MIDDLE STATE (by SAM_R) / Status Belt Slip Rear Center */
    void set_Bckl_Sw_RM_Stat_SAM_R(BODY_R1_Bckl_Sw_RM_Stat_SAM_R value){ raw = (raw & 0xffffffffffffcfff) | ((uint64_t)value & 0x3) << 12; }

    /** Gets BUCKLE SWITCH REAR MIDDLE STATE (by SAM_R) / Status Belt Slip Rear Center */
    BODY_R1_Bckl_Sw_RM_Stat_SAM_R get_Bckl_Sw_RM_Stat_SAM_R() const { return (BODY_R1_Bckl_Sw_RM_Stat_SAM_R)(raw >> 12 & 0x3); }
        
    /** Sets BUCKLE SWITCH REAR RIGHT STATE (by SAM_R) / status Belt lock right */
    void set_Bckl_Sw_RR_Stat_SAM_R(BODY_R1_Bckl_Sw_RR_Stat_SAM_R value){ raw = (raw & 0xfffffffffffff3ff) | ((uint64_t)value & 0x3) << 10; }

    /** Gets BUCKLE SWITCH REAR RIGHT STATE (by SAM_R) / status Belt lock right */
    BODY_R1_Bckl_Sw_RR_Stat_SAM_R get_Bckl_Sw_RR_Stat_SAM_R() const { return (BODY_R1_Bckl_Sw_RR_Stat_SAM_R)(raw >> 10 & 0x3); }
        
    /** Sets BUCKLE SWITCH REAR LEFT STATE (by SAM_R) / Status Curtle Rear Left */
    void set_Bckl_Sw_RL_Stat_SAM_R(BODY_R1_Bckl_Sw_RL_Stat_SAM_R value){ raw = (raw & 0xfffffffffffffcff) | ((uint64_t)value & 0x3) << 8; }

    /** Gets BUCKLE SWITCH REAR LEFT STATE (by SAM_R) / Status Curtle Rear Left */
    BODY_R1_Bckl_Sw_RL_Stat_SAM_R get_Bckl_Sw_RL_Stat_SAM_R() const { return (BODY_R1_Bckl_Sw_RL_Stat_SAM_R)(raw >> 8 & 0x3); }
        
    /** Sets Outside Air Temperature / Outdoor Air Temperature. Conversion formula (To raw from real): y=(x+40.0)/0.50 (Unit: °C) */
    void set_AirTemp_Outsd(uint8_t value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Outside Air Temperature / Outdoor Air Temperature. Conversion formula (To real from raw): y=(0.50x)-40.0 (Unit: °C) */
    uint8_t get_AirTemp_Outsd() const { return (uint8_t)(raw >> 0 & 0xff); }
        
} BODY_R1;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of BODY_R2 */
	uint32_t get_canid(){ return BODY_R2_CAN_ID; }
    /** Sets Vehicle Driving Program Switch Pressed / Button Driving Program */
    void set_VehDrvProgSw_Psd(BODY_R2_VehDrvProgSw_Psd value){ raw = (raw & 0x3fffffffffffffff) | ((uint64_t)value & 0x3) << 62; }

    /** Gets Vehicle Driving Program Switch Pressed / Button Driving Program */
    BODY_R2_VehDrvProgSw_Psd get_VehDrvProgSw_Psd() const { return (BODY_R2_VehDrvProgSw_Psd)(raw >> 62 & 0x3); }
        
    /** Sets Steering Wheel Conditioning Active / steering wheel climatization active */
    void set_StW_Cond_Actv(BODY_R2_StW_Cond_Actv value){ raw = (raw & 0xcfffffffffffffff) | ((uint64_t)value & 0x3) << 60; }

    /** Gets Steering Wheel Conditioning Active / steering wheel climatization active */
    BODY_R2_StW_Cond_Actv get_StW_Cond_Actv() const { return (BODY_R2_StW_Cond_Actv)(raw >> 60 & 0x3); }
        
    /** Sets Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
    void set_SuspLvlAdjSw_Psd(BODY_R2_SuspLvlAdjSw_Psd value){ raw = (raw & 0xfcffffffffffffff) | ((uint64_t)value & 0x3) << 56; }

    /** Gets Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
    BODY_R2_SuspLvlAdjSw_Psd get_SuspLvlAdjSw_Psd() const { return (BODY_R2_SuspLvlAdjSw_Psd)(raw >> 56 & 0x3); }
        
    /** Sets Switch Parktronic / City Assistant Pressed / Button Parktronic / CAS Actuated */
    void set_PTS_Sw_Psd(BODY_R2_PTS_Sw_Psd value){ raw = (raw & 0xff3fffffffffffff) | ((uint64_t)value & 0x3) << 54; }

    /** Gets Switch Parktronic / City Assistant Pressed / Button Parktronic / CAS Actuated */
    BODY_R2_PTS_Sw_Psd get_PTS_Sw_Psd() const { return (BODY_R2_PTS_Sw_Psd)(raw >> 54 & 0x3); }
        
    /** Sets NightView Switch Pressed / NightView Button */
    void set_NV_Sw_Psd(BODY_R2_NV_Sw_Psd value){ raw = (raw & 0xfff3ffffffffffff) | ((uint64_t)value & 0x3) << 50; }

    /** Gets NightView Switch Pressed / NightView Button */
    BODY_R2_NV_Sw_Psd get_NV_Sw_Psd() const { return (BODY_R2_NV_Sw_Psd)(raw >> 50 & 0x3); }
        
    /** Sets Electronic Stability Program Switch Pressed / ESP Button */
    void set_ESP_Sw_Psd(BODY_R2_ESP_Sw_Psd value){ raw = (raw & 0xfffcffffffffffff) | ((uint64_t)value & 0x3) << 48; }

    /** Gets Electronic Stability Program Switch Pressed / ESP Button */
    BODY_R2_ESP_Sw_Psd get_ESP_Sw_Psd() const { return (BODY_R2_ESP_Sw_Psd)(raw >> 48 & 0x3); }
        
    /** Sets Indication Lamp On Request, Coolant Level Too Low / Cooler Spring To Switch on to low control lamp */
    void set_CoolIndLmp_On_Rq(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Indication Lamp On Request, Coolant Level Too Low / Cooler Spring To Switch on to low control lamp */
    bool get_CoolIndLmp_On_Rq() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Deck Lid Switch Pushed / Tail Cover Button */
    void set_DL_Sw_Psd(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Deck Lid Switch Pushed / Tail Cover Button */
    bool get_DL_Sw_Psd() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Transmission Active (Data / Voice) / Transmission Active (Data / Language) */
    void set_TX_Actv(bool value){ raw = (raw & 0xffffdfffffffffff) | ((uint64_t)value & 0x1) << 45; }

    /** Gets Transmission Active (Data / Voice) / Transmission Active (Data / Language) */
    bool get_TX_Actv() const { return (bool)(raw >> 45 & 0x1); }
        
    /** Sets Parking Assistance Switch Pressed / Parking Assist Taster */
    void set_PKAS_Sw_Psd(BODY_R2_PKAS_Sw_Psd value){ raw = (raw & 0xfffffcffffffffff) | ((uint64_t)value & 0x3) << 40; }

    /** Gets Parking Assistance Switch Pressed / Parking Assist Taster */
    BODY_R2_PKAS_Sw_Psd get_PKAS_Sw_Psd() const { return (BODY_R2_PKAS_Sw_Psd)(raw >> 40 & 0x3); }
        
    /** Sets Rotary Light Switch On "Position LAMPS" position / LDS contact parking light */
    void set_RLS_PosnLmp_Posn(bool value){ raw = (raw & 0xffffff7fffffffff) | ((uint64_t)value & 0x1) << 39; }

    /** Gets Rotary Light Switch On "Position LAMPS" position / LDS contact parking light */
    bool get_RLS_PosnLmp_Posn() const { return (bool)(raw >> 39 & 0x1); }
        
    /** Sets Rotary Light Switch On "Fog Lamps Rear" Position / LDS Contact Fog Light Light */
    void set_RLS_FogLmp_R_Posn(bool value){ raw = (raw & 0xffffffbfffffffff) | ((uint64_t)value & 0x1) << 38; }

    /** Gets Rotary Light Switch On "Fog Lamps Rear" Position / LDS Contact Fog Light Light */
    bool get_RLS_FogLmp_R_Posn() const { return (bool)(raw >> 38 & 0x1); }
        
    /** Sets Rotary Light Switch On "Fog Lamps Front" Position / LDS Contact Fog Light */
    void set_RLS_FogLmp_Ft_Posn(bool value){ raw = (raw & 0xffffffdfffffffff) | ((uint64_t)value & 0x1) << 37; }

    /** Gets Rotary Light Switch On "Fog Lamps Front" Position / LDS Contact Fog Light */
    bool get_RLS_FogLmp_Ft_Posn() const { return (bool)(raw >> 37 & 0x1); }
        
    /** Sets Rotary Light Switch Redundancy / LDS Contact Redundancy */
    void set_RLS_Red(bool value){ raw = (raw & 0xffffffefffffffff) | ((uint64_t)value & 0x1) << 36; }

    /** Gets Rotary Light Switch Redundancy / LDS Contact Redundancy */
    bool get_RLS_Red() const { return (bool)(raw >> 36 & 0x1); }
        
    /** Sets Rotary Light Switch On "Low Beam" Position / LDS Contact Driving Light */
    void set_RLS_LoBm_Posn(bool value){ raw = (raw & 0xfffffff7ffffffff) | ((uint64_t)value & 0x1) << 35; }

    /** Gets Rotary Light Switch On "Low Beam" Position / LDS Contact Driving Light */
    bool get_RLS_LoBm_Posn() const { return (bool)(raw >> 35 & 0x1); }
        
    /** Sets Rotary Light Switch On "Parking Lamps Left" Position / LDS Contact Parking Left */
    void set_RLS_PkLmp_Posn_Lt(bool value){ raw = (raw & 0xfffffffbffffffff) | ((uint64_t)value & 0x1) << 34; }

    /** Gets Rotary Light Switch On "Parking Lamps Left" Position / LDS Contact Parking Left */
    bool get_RLS_PkLmp_Posn_Lt() const { return (bool)(raw >> 34 & 0x1); }
        
    /** Sets Rotary Light Switch on "Parking Lamps Right" position / LDS contact parking light right */
    void set_RLS_PkLmp_Posn_Rt(bool value){ raw = (raw & 0xfffffffdffffffff) | ((uint64_t)value & 0x1) << 33; }

    /** Gets Rotary Light Switch on "Parking Lamps Right" position / LDS contact parking light right */
    bool get_RLS_PkLmp_Posn_Rt() const { return (bool)(raw >> 33 & 0x1); }
        
    /** Sets Rotary Light Switch on "Automatic" position / LDS contact autom.speed light */
    void set_RLS_AutoPosn(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Rotary Light Switch on "Automatic" position / LDS contact autom.speed light */
    bool get_RLS_AutoPosn() const { return (bool)(raw >> 32 & 0x1); }
        
    /** Sets BSM War Unit Right State / Status BSM Warning Unit right */
    void set_BSM_WarnUnit_Rt_Stat(BODY_R2_BSM_WarnUnit_Rt_Stat value){ raw = (raw & 0xffffffff3fffffff) | ((uint64_t)value & 0x3) << 30; }

    /** Gets BSM War Unit Right State / Status BSM Warning Unit right */
    BODY_R2_BSM_WarnUnit_Rt_Stat get_BSM_WarnUnit_Rt_Stat() const { return (BODY_R2_BSM_WarnUnit_Rt_Stat)(raw >> 30 & 0x3); }
        
    /** Sets BSM Warn Unit Left State / Status BSM Warning Unit Links */
    void set_BSM_WarnUnit_Lt_Stat(BODY_R2_BSM_WarnUnit_Lt_Stat value){ raw = (raw & 0xffffffffcfffffff) | ((uint64_t)value & 0x3) << 28; }

    /** Gets BSM Warn Unit Left State / Status BSM Warning Unit Links */
    BODY_R2_BSM_WarnUnit_Lt_Stat get_BSM_WarnUnit_Lt_Stat() const { return (BODY_R2_BSM_WarnUnit_Lt_Stat)(raw >> 28 & 0x3); }
        
    /** Sets Rotary Light Switch Initialization Avive / LDS Initialization */
    void set_RLS_Init_Actv(bool value){ raw = (raw & 0xfffffffffeffffff) | ((uint64_t)value & 0x1) << 24; }

    /** Gets Rotary Light Switch Initialization Avive / LDS Initialization */
    bool get_RLS_Init_Actv() const { return (bool)(raw >> 24 & 0x1); }
        
    /** Sets Downhill Speed ​​Regulation Switch Pressed / Downhave Speed ​​Control Button */
    void set_DSR_Sw_Psd(BODY_R2_DSR_Sw_Psd value){ raw = (raw & 0xffffffffff3fffff) | ((uint64_t)value & 0x3) << 22; }

    /** Gets Downhill Speed ​​Regulation Switch Pressed / Downhave Speed ​​Control Button */
    BODY_R2_DSR_Sw_Psd get_DSR_Sw_Psd() const { return (BODY_R2_DSR_Sw_Psd)(raw >> 22 & 0x3); }
        
    /** Sets Telematics Switches pressed / telematics switch operated */
    void set_Tlm_Sw_Psd(BODY_R2_Tlm_Sw_Psd value){ raw = (raw & 0xffffffffffcfffff) | ((uint64_t)value & 0x3) << 20; }

    /** Gets Telematics Switches pressed / telematics switch operated */
    BODY_R2_Tlm_Sw_Psd get_Tlm_Sw_Psd() const { return (BODY_R2_Tlm_Sw_Psd)(raw >> 20 & 0x3); }
        
    /** Sets Phone Call OR Speech Dialogue System Active / Telephone Disconnection or Language Conditioning System */
    void set_Phonecall_SDS_Actv(BODY_R2_Phonecall_SDS_Actv value){ raw = (raw & 0xfffffffffff3ffff) | ((uint64_t)value & 0x3) << 18; }

    /** Gets Phone Call OR Speech Dialogue System Active / Telephone Disconnection or Language Conditioning System */
    BODY_R2_Phonecall_SDS_Actv get_Phonecall_SDS_Actv() const { return (BODY_R2_Phonecall_SDS_Actv)(raw >> 18 & 0x3); }
        
    /** Sets Active Damping Control Switch Pressed / Button Active Damping Control */
    void set_ADC_Sw_Psd(BODY_R2_ADC_Sw_Psd value){ raw = (raw & 0xfffffffffffcffff) | ((uint64_t)value & 0x3) << 16; }

    /** Gets Active Damping Control Switch Pressed / Button Active Damping Control */
    BODY_R2_ADC_Sw_Psd get_ADC_Sw_Psd() const { return (BODY_R2_ADC_Sw_Psd)(raw >> 16 & 0x3); }
        
    /** Sets Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
    void set_SuspLvlAdjSw_Psd_CTRL_L(BODY_R2_SuspLvlAdjSw_Psd_CTRL_L value){ raw = (raw & 0xffffffffffffcfff) | ((uint64_t)value & 0x3) << 12; }

    /** Gets Suspension Level Adjustment Switch Pressed / Vehicle Level Buttock */
    BODY_R2_SuspLvlAdjSw_Psd_CTRL_L get_SuspLvlAdjSw_Psd_CTRL_L() const { return (BODY_R2_SuspLvlAdjSw_Psd_CTRL_L)(raw >> 12 & 0x3); }
        
    /** Sets Active Damping Control Switch Pressed / Button Active Damping Control */
    void set_ADC_Sw_Psd_CTRL_L(BODY_R2_ADC_Sw_Psd_CTRL_L value){ raw = (raw & 0xfffffffffffff3ff) | ((uint64_t)value & 0x3) << 10; }

    /** Gets Active Damping Control Switch Pressed / Button Active Damping Control */
    BODY_R2_ADC_Sw_Psd_CTRL_L get_ADC_Sw_Psd_CTRL_L() const { return (BODY_R2_ADC_Sw_Psd_CTRL_L)(raw >> 10 & 0x3); }
        
    /** Sets Off Road Switch Pressed / Off Road Button */
    void set_OffRoadSw_Psd(BODY_R2_OffRoadSw_Psd value){ raw = (raw & 0xfffffffffffffcff) | ((uint64_t)value & 0x3) << 8; }

    /** Gets Off Road Switch Pressed / Off Road Button */
    BODY_R2_OffRoadSw_Psd get_OffRoadSw_Psd() const { return (BODY_R2_OffRoadSw_Psd)(raw >> 8 & 0x3); }
        
} BODY_R2;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of ECM_OBD */
	uint32_t get_canid(){ return ECM_OBD_CAN_ID; }
    /** Sets Accelerator Pedal Position / Pedal Value. Conversion formula (To raw from real): y=(x-0.0)/0.39 (Unit: %) */
    void set_AccelPdlPosn_OBD(uint8_t value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Accelerator Pedal Position / Pedal Value. Conversion formula (To real from raw): y=(0.39x)+0.0 (Unit: %) */
    uint8_t get_AccelPdlPosn_OBD() const { return (uint8_t)(raw >> 56 & 0xff); }
        
    /** Sets Engine Load / Motorload. Conversion formula (To raw from real): y=(x-0.0)/0.39 (Unit: %) */
    void set_EngLoad_OBD(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Engine Load / Motorload. Conversion formula (To real from raw): y=(0.39x)+0.0 (Unit: %) */
    uint8_t get_EngLoad_OBD() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Outside Air Temperature Sensor Fault / Error Outdoor Air Temperature Sensor */
    void set_AirTemp_Outsd_Sens_Flt(bool value){ raw = (raw & 0xfffffeffffffffff) | ((uint64_t)value & 0x1) << 40; }

    /** Gets Outside Air Temperature Sensor Fault / Error Outdoor Air Temperature Sensor */
    bool get_AirTemp_Outsd_Sens_Flt() const { return (bool)(raw >> 40 & 0x1); }
        
    /** Sets Conditions for Ignition Cycle Counter (RBM) State / Status Conditions for Ignition Cycle Counter (RBM) */
    void set_OBD_IgnCycCntCond_Stat(ECM_OBD_OBD_IgnCycCntCond_Stat value){ raw = (raw & 0xffffffe7ffffffff) | ((uint64_t)value & 0x3) << 35; }

    /** Gets Conditions for Ignition Cycle Counter (RBM) State / Status Conditions for Ignition Cycle Counter (RBM) */
    ECM_OBD_OBD_IgnCycCntCond_Stat get_OBD_IgnCycCntCond_Stat() const { return (ECM_OBD_OBD_IgnCycCntCond_Stat)(raw >> 35 & 0x3); }
        
    /** Sets Conditions for General Denominator (RBM) State / Status Conditions for General Denominator (RBM) */
    void set_OBD_GnrlDenCond_Stat(ECM_OBD_OBD_GnrlDenCond_Stat value){ raw = (raw & 0xfffffff9ffffffff) | ((uint64_t)value & 0x3) << 33; }

    /** Gets Conditions for General Denominator (RBM) State / Status Conditions for General Denominator (RBM) */
    ECM_OBD_OBD_GnrlDenCond_Stat get_OBD_GnrlDenCond_Stat() const { return (ECM_OBD_OBD_GnrlDenCond_Stat)(raw >> 33 & 0x3); }
        
    /** Sets Conditions for warm-up fulfilled / conditions for warm-up fulfilled */
    void set_OBD_WarmupCond_Actv(bool value){ raw = (raw & 0xfffffffeffffffff) | ((uint64_t)value & 0x1) << 32; }

    /** Gets Conditions for warm-up fulfilled / conditions for warm-up fulfilled */
    bool get_OBD_WarmupCond_Actv() const { return (bool)(raw >> 32 & 0x1); }
        
} ECM_OBD;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];

	/** Gets CAN ID of NM_ECM */
	uint32_t get_canid(){ return NM_ECM_CAN_ID; }
    /** Sets Network Management Mode / Network Management Mode */
    void set_NM_Mode(NM_ECM_NM_Mode value){ raw = (raw & 0x00ffffffffffffff) | ((uint64_t)value & 0xff) << 56; }

    /** Gets Network Management Mode / Network Management Mode */
    NM_ECM_NM_Mode get_NM_Mode() const { return (NM_ECM_NM_Mode)(raw >> 56 & 0xff); }
        
    /** Sets Network Management Logical Successor / Network Management Logical Successor. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_NM_Successor(uint8_t value){ raw = (raw & 0xff00ffffffffffff) | ((uint64_t)value & 0xff) << 48; }

    /** Gets Network Management Logical Successor / Network Management Logical Successor. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_NM_Successor() const { return (uint8_t)(raw >> 48 & 0xff); }
        
    /** Sets Network Management Sleep Indication / Network Management Sleep Indication */
    void set_NM_Sleep_Ind(bool value){ raw = (raw & 0xffff7fffffffffff) | ((uint64_t)value & 0x1) << 47; }

    /** Gets Network Management Sleep Indication / Network Management Sleep Indication */
    bool get_NM_Sleep_Ind() const { return (bool)(raw >> 47 & 0x1); }
        
    /** Sets Network Management Sleep Acknowledge / Network Management Sleep Acknowledge */
    void set_NM_Sleep_Ack(bool value){ raw = (raw & 0xffffbfffffffffff) | ((uint64_t)value & 0x1) << 46; }

    /** Gets Network Management Sleep Acknowledge / Network Management Sleep Acknowledge */
    bool get_NM_Sleep_Ack() const { return (bool)(raw >> 46 & 0x1); }
        
    /** Sets Network Management UserData Launch Type / Network Management UserData Sendart */
    void set_NM_Ud_Launch(NM_ECM_NM_Ud_Launch value){ raw = (raw & 0xffffc0ffffffffff) | ((uint64_t)value & 0x3f) << 40; }

    /** Gets Network Management UserData Launch Type / Network Management UserData Sendart */
    NM_ECM_NM_Ud_Launch get_NM_Ud_Launch() const { return (NM_ECM_NM_Ud_Launch)(raw >> 40 & 0x3f); }
        
    /** Sets Network Management UserData Service No./netzmanagement UserData service */
    void set_NM_Ud_Srv(NM_ECM_NM_Ud_Srv value){ raw = (raw & 0xffffff00ffffffff) | ((uint64_t)value & 0xff) << 32; }

    /** Gets Network Management UserData Service No./netzmanagement UserData service */
    NM_ECM_NM_Ud_Srv get_NM_Ud_Srv() const { return (NM_ECM_NM_Ud_Srv)(raw >> 32 & 0xff); }
        
    /** Sets Wakeup Reason / Wake-up */
    void set_WakeupRsn_ECM(NM_ECM_WakeupRsn_ECM value){ raw = (raw & 0xffffffff00ffffff) | ((uint64_t)value & 0xff) << 24; }

    /** Gets Wakeup Reason / Wake-up */
    NM_ECM_WakeupRsn_ECM get_WakeupRsn_ECM() const { return (NM_ECM_WakeupRsn_ECM)(raw >> 24 & 0xff); }
        
    /** Sets Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest. Conversion formula (To raw from real): y=(x-0.0)/1.00 */
    void set_WakeupCnt(uint8_t value){ raw = (raw & 0xffffffffff00ffff) | ((uint64_t)value & 0xff) << 16; }

    /** Gets Counter for Module Wakeup States During Network Sleep / Counter for ECUs Internal Wachzustäustände during bus rest. Conversion formula (To real from raw): y=(1.00x)+0.0 */
    uint8_t get_WakeupCnt() const { return (uint8_t)(raw >> 16 & 0xff); }
        
    /** Sets Network Identification No./netzwerk-id */
    void set_Nw_Id(NM_ECM_Nw_Id value){ raw = (raw & 0xffffffffffffff00) | ((uint64_t)value & 0xff) << 0; }

    /** Gets Network Identification No./netzwerk-id */
    NM_ECM_Nw_Id get_Nw_Id() const { return (NM_ECM_Nw_Id)(raw >> 0 & 0xff); }
        
} NM_ECM;



class ECU_ECM {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            switch(can_id) {
                case CTRL_U_A2_CAN_ID:
                    LAST_FRAME_TIMES[0] = timestamp_now;
                    FRAME_DATA[0] = value;
                    return true;
                case ECM_A1_CAN_ID:
                    LAST_FRAME_TIMES[1] = timestamp_now;
                    FRAME_DATA[1] = value;
                    return true;
                case ECM_A2_CAN_ID:
                    LAST_FRAME_TIMES[2] = timestamp_now;
                    FRAME_DATA[2] = value;
                    return true;
                case EIS_A1_CAN_ID:
                    LAST_FRAME_TIMES[3] = timestamp_now;
                    FRAME_DATA[3] = value;
                    return true;
                case IC_A1_CAN_ID:
                    LAST_FRAME_TIMES[4] = timestamp_now;
                    FRAME_DATA[4] = value;
                    return true;
                case IC_A3_CAN_ID:
                    LAST_FRAME_TIMES[5] = timestamp_now;
                    FRAME_DATA[5] = value;
                    return true;
                case LM_A1_CAN_ID:
                    LAST_FRAME_TIMES[6] = timestamp_now;
                    FRAME_DATA[6] = value;
                    return true;
                case SPC_A3_CAN_ID:
                    LAST_FRAME_TIMES[7] = timestamp_now;
                    FRAME_DATA[7] = value;
                    return true;
                case STW_ANGL_STAT_CAN_ID:
                    LAST_FRAME_TIMES[8] = timestamp_now;
                    FRAME_DATA[8] = value;
                    return true;
                case BRK_STAT_CAN_ID:
                    LAST_FRAME_TIMES[9] = timestamp_now;
                    FRAME_DATA[9] = value;
                    return true;
                case CGW_STAT_CAN_ID:
                    LAST_FRAME_TIMES[10] = timestamp_now;
                    FRAME_DATA[10] = value;
                    return true;
                case BRK_STAT2_CAN_ID:
                    LAST_FRAME_TIMES[11] = timestamp_now;
                    FRAME_DATA[11] = value;
                    return true;
                case SBW_RQ_SCCM_CAN_ID:
                    LAST_FRAME_TIMES[12] = timestamp_now;
                    FRAME_DATA[12] = value;
                    return true;
                case EPKB_STAT_CAN_ID:
                    LAST_FRAME_TIMES[13] = timestamp_now;
                    FRAME_DATA[13] = value;
                    return true;
                case HVAC_RS1_CAN_ID:
                    LAST_FRAME_TIMES[14] = timestamp_now;
                    FRAME_DATA[14] = value;
                    return true;
                case TX_RQ_SBC_CAN_ID:
                    LAST_FRAME_TIMES[15] = timestamp_now;
                    FRAME_DATA[15] = value;
                    return true;
                case ENG_RS3_PT_CAN_ID:
                    LAST_FRAME_TIMES[16] = timestamp_now;
                    FRAME_DATA[16] = value;
                    return true;
                case ENG_RS2_PT_CAN_ID:
                    LAST_FRAME_TIMES[17] = timestamp_now;
                    FRAME_DATA[17] = value;
                    return true;
                case TX_RQ_ECM_CAN_ID:
                    LAST_FRAME_TIMES[18] = timestamp_now;
                    FRAME_DATA[18] = value;
                    return true;
                case ENG_RS1_PT_CAN_ID:
                    LAST_FRAME_TIMES[19] = timestamp_now;
                    FRAME_DATA[19] = value;
                    return true;
                case DPM_STAT_CAN_ID:
                    LAST_FRAME_TIMES[20] = timestamp_now;
                    FRAME_DATA[20] = value;
                    return true;
                case WHL_STAT1_CAN_ID:
                    LAST_FRAME_TIMES[21] = timestamp_now;
                    FRAME_DATA[21] = value;
                    return true;
                case WHL_STAT2_CAN_ID:
                    LAST_FRAME_TIMES[22] = timestamp_now;
                    FRAME_DATA[22] = value;
                    return true;
                case PN14_STAT_CAN_ID:
                    LAST_FRAME_TIMES[23] = timestamp_now;
                    FRAME_DATA[23] = value;
                    return true;
                case CVI_CAN_ID:
                    LAST_FRAME_TIMES[24] = timestamp_now;
                    FRAME_DATA[24] = value;
                    return true;
                case VEH_DYN_STAT_CAN_ID:
                    LAST_FRAME_TIMES[25] = timestamp_now;
                    FRAME_DATA[25] = value;
                    return true;
                case BODY_R1_CAN_ID:
                    LAST_FRAME_TIMES[26] = timestamp_now;
                    FRAME_DATA[26] = value;
                    return true;
                case BODY_R2_CAN_ID:
                    LAST_FRAME_TIMES[27] = timestamp_now;
                    FRAME_DATA[27] = value;
                    return true;
                case ECM_OBD_CAN_ID:
                    LAST_FRAME_TIMES[28] = timestamp_now;
                    FRAME_DATA[28] = value;
                    return true;
                case NM_ECM_CAN_ID:
                    LAST_FRAME_TIMES[29] = timestamp_now;
                    FRAME_DATA[29] = value;
                    return true;
                default:
                    return false;
            }
        }
        
        /** Sets data in pointer to CTRL_U_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CTRL_U_A2(uint64_t now, uint64_t max_expire_time, CTRL_U_A2* dest) const {
            if (LAST_FRAME_TIMES[0] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[0] && now - LAST_FRAME_TIMES[0] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[0];
                return true;
            }
        }
            
        /** Sets data in pointer to ECM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_A1(uint64_t now, uint64_t max_expire_time, ECM_A1* dest) const {
            if (LAST_FRAME_TIMES[1] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[1] && now - LAST_FRAME_TIMES[1] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[1];
                return true;
            }
        }
            
        /** Sets data in pointer to ECM_A2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_A2(uint64_t now, uint64_t max_expire_time, ECM_A2* dest) const {
            if (LAST_FRAME_TIMES[2] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[2] && now - LAST_FRAME_TIMES[2] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[2];
                return true;
            }
        }
            
        /** Sets data in pointer to EIS_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EIS_A1(uint64_t now, uint64_t max_expire_time, EIS_A1* dest) const {
            if (LAST_FRAME_TIMES[3] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[3] && now - LAST_FRAME_TIMES[3] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[3];
                return true;
            }
        }
            
        /** Sets data in pointer to IC_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_IC_A1(uint64_t now, uint64_t max_expire_time, IC_A1* dest) const {
            if (LAST_FRAME_TIMES[4] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[4] && now - LAST_FRAME_TIMES[4] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[4];
                return true;
            }
        }
            
        /** Sets data in pointer to IC_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_IC_A3(uint64_t now, uint64_t max_expire_time, IC_A3* dest) const {
            if (LAST_FRAME_TIMES[5] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[5] && now - LAST_FRAME_TIMES[5] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[5];
                return true;
            }
        }
            
        /** Sets data in pointer to LM_A1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_LM_A1(uint64_t now, uint64_t max_expire_time, LM_A1* dest) const {
            if (LAST_FRAME_TIMES[6] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[6] && now - LAST_FRAME_TIMES[6] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[6];
                return true;
            }
        }
            
        /** Sets data in pointer to SPC_A3
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SPC_A3(uint64_t now, uint64_t max_expire_time, SPC_A3* dest) const {
            if (LAST_FRAME_TIMES[7] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[7] && now - LAST_FRAME_TIMES[7] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[7];
                return true;
            }
        }
            
        /** Sets data in pointer to STW_ANGL_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_STW_ANGL_STAT(uint64_t now, uint64_t max_expire_time, STW_ANGL_STAT* dest) const {
            if (LAST_FRAME_TIMES[8] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[8] && now - LAST_FRAME_TIMES[8] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[8];
                return true;
            }
        }
            
        /** Sets data in pointer to BRK_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BRK_STAT(uint64_t now, uint64_t max_expire_time, BRK_STAT* dest) const {
            if (LAST_FRAME_TIMES[9] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[9] && now - LAST_FRAME_TIMES[9] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[9];
                return true;
            }
        }
            
        /** Sets data in pointer to CGW_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CGW_STAT(uint64_t now, uint64_t max_expire_time, CGW_STAT* dest) const {
            if (LAST_FRAME_TIMES[10] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[10] && now - LAST_FRAME_TIMES[10] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[10];
                return true;
            }
        }
            
        /** Sets data in pointer to BRK_STAT2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BRK_STAT2(uint64_t now, uint64_t max_expire_time, BRK_STAT2* dest) const {
            if (LAST_FRAME_TIMES[11] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[11] && now - LAST_FRAME_TIMES[11] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[11];
                return true;
            }
        }
            
        /** Sets data in pointer to SBW_RQ_SCCM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SBW_RQ_SCCM(uint64_t now, uint64_t max_expire_time, SBW_RQ_SCCM* dest) const {
            if (LAST_FRAME_TIMES[12] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[12] && now - LAST_FRAME_TIMES[12] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[12];
                return true;
            }
        }
            
        /** Sets data in pointer to EPKB_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_EPKB_STAT(uint64_t now, uint64_t max_expire_time, EPKB_STAT* dest) const {
            if (LAST_FRAME_TIMES[13] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[13] && now - LAST_FRAME_TIMES[13] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[13];
                return true;
            }
        }
            
        /** Sets data in pointer to HVAC_RS1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_HVAC_RS1(uint64_t now, uint64_t max_expire_time, HVAC_RS1* dest) const {
            if (LAST_FRAME_TIMES[14] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[14] && now - LAST_FRAME_TIMES[14] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[14];
                return true;
            }
        }
            
        /** Sets data in pointer to TX_RQ_SBC
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TX_RQ_SBC(uint64_t now, uint64_t max_expire_time, TX_RQ_SBC* dest) const {
            if (LAST_FRAME_TIMES[15] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[15] && now - LAST_FRAME_TIMES[15] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[15];
                return true;
            }
        }
            
        /** Sets data in pointer to ENG_RS3_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS3_PT(uint64_t now, uint64_t max_expire_time, ENG_RS3_PT* dest) const {
            if (LAST_FRAME_TIMES[16] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[16] && now - LAST_FRAME_TIMES[16] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[16];
                return true;
            }
        }
            
        /** Sets data in pointer to ENG_RS2_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS2_PT(uint64_t now, uint64_t max_expire_time, ENG_RS2_PT* dest) const {
            if (LAST_FRAME_TIMES[17] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[17] && now - LAST_FRAME_TIMES[17] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[17];
                return true;
            }
        }
            
        /** Sets data in pointer to TX_RQ_ECM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_TX_RQ_ECM(uint64_t now, uint64_t max_expire_time, TX_RQ_ECM* dest) const {
            if (LAST_FRAME_TIMES[18] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[18] && now - LAST_FRAME_TIMES[18] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[18];
                return true;
            }
        }
            
        /** Sets data in pointer to ENG_RS1_PT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENG_RS1_PT(uint64_t now, uint64_t max_expire_time, ENG_RS1_PT* dest) const {
            if (LAST_FRAME_TIMES[19] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[19] && now - LAST_FRAME_TIMES[19] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[19];
                return true;
            }
        }
            
        /** Sets data in pointer to DPM_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_DPM_STAT(uint64_t now, uint64_t max_expire_time, DPM_STAT* dest) const {
            if (LAST_FRAME_TIMES[20] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[20] && now - LAST_FRAME_TIMES[20] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[20];
                return true;
            }
        }
            
        /** Sets data in pointer to WHL_STAT1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_WHL_STAT1(uint64_t now, uint64_t max_expire_time, WHL_STAT1* dest) const {
            if (LAST_FRAME_TIMES[21] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[21] && now - LAST_FRAME_TIMES[21] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[21];
                return true;
            }
        }
            
        /** Sets data in pointer to WHL_STAT2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_WHL_STAT2(uint64_t now, uint64_t max_expire_time, WHL_STAT2* dest) const {
            if (LAST_FRAME_TIMES[22] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[22] && now - LAST_FRAME_TIMES[22] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[22];
                return true;
            }
        }
            
        /** Sets data in pointer to PN14_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_PN14_STAT(uint64_t now, uint64_t max_expire_time, PN14_STAT* dest) const {
            if (LAST_FRAME_TIMES[23] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[23] && now - LAST_FRAME_TIMES[23] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[23];
                return true;
            }
        }
            
        /** Sets data in pointer to CVI
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_CVI(uint64_t now, uint64_t max_expire_time, CVI* dest) const {
            if (LAST_FRAME_TIMES[24] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[24] && now - LAST_FRAME_TIMES[24] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[24];
                return true;
            }
        }
            
        /** Sets data in pointer to VEH_DYN_STAT
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_VEH_DYN_STAT(uint64_t now, uint64_t max_expire_time, VEH_DYN_STAT* dest) const {
            if (LAST_FRAME_TIMES[25] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[25] && now - LAST_FRAME_TIMES[25] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[25];
                return true;
            }
        }
            
        /** Sets data in pointer to BODY_R1
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BODY_R1(uint64_t now, uint64_t max_expire_time, BODY_R1* dest) const {
            if (LAST_FRAME_TIMES[26] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[26] && now - LAST_FRAME_TIMES[26] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[26];
                return true;
            }
        }
            
        /** Sets data in pointer to BODY_R2
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_BODY_R2(uint64_t now, uint64_t max_expire_time, BODY_R2* dest) const {
            if (LAST_FRAME_TIMES[27] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[27] && now - LAST_FRAME_TIMES[27] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[27];
                return true;
            }
        }
            
        /** Sets data in pointer to ECM_OBD
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ECM_OBD(uint64_t now, uint64_t max_expire_time, ECM_OBD* dest) const {
            if (LAST_FRAME_TIMES[28] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[28] && now - LAST_FRAME_TIMES[28] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[28];
                return true;
            }
        }
            
        /** Sets data in pointer to NM_ECM
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_NM_ECM(uint64_t now, uint64_t max_expire_time, NM_ECM* dest) const {
            if (LAST_FRAME_TIMES[29] == 0 || dest == nullptr) { // CAN Frame has not been seen on bus yet / NULL pointer
                return false;
            } else if (now > LAST_FRAME_TIMES[29] && now - LAST_FRAME_TIMES[29] > max_expire_time) { // CAN Frame has not refreshed in valid interval
                return false;
            } else { // CAN Frame is valid! return it
                dest->raw = FRAME_DATA[29];
                return true;
            }
        }
            
	private:
		uint64_t FRAME_DATA[30];
		uint64_t LAST_FRAME_TIMES[30];
};
#endif // __ECU_ECM_H_
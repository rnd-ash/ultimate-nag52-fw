
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'ENGINE'
*/

#ifndef ECU_ENGINE_H
#define ECU_ENGINE_H

#include <stdint.h>
    
#define ENGINE_100_CUSTOMCAN_CAN_ID 0x0100
#define ENGINE_102_CUSTOMCAN_CAN_ID 0x0120



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING1__: 23;
		/** Kickdown pressed **/
		bool KD: 1;
		/** Pedal position (%) **/
		uint8_t PEDAL: 8;
		/** Engine RPM **/
		uint16_t RPM: 16;
		/** Engine oil temperature **/
		uint8_t T_OIL: 8;
		/** Engine coolant temperature **/
		uint8_t T_COOLANT: 8;
	} __attribute__((packed));
	/** Gets CAN ID of ENGINE_100_CUSTOMCAN **/
	uint32_t get_canid(){ return ENGINE_100_CUSTOMCAN_CAN_ID; }
} ENGINE_100_CUSTOMCAN;



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		/** Static engine torque (Nm) **/
		uint16_t STATIC_TORQUE: 16;
		/** Driver requested engine torque (Nm) **/
		uint16_t DRIVER_TORQUE: 16;
		/** Minimum engine torque (Nm) **/
		uint16_t MIN_TORQUE: 16;
		/** Maximum engine torque (Nm) **/
		uint16_t MAX_TORQUE: 16;
	} __attribute__((packed));
	/** Gets CAN ID of ENGINE_102_CUSTOMCAN **/
	uint32_t get_canid(){ return ENGINE_102_CUSTOMCAN_CAN_ID; }
} ENGINE_102_CUSTOMCAN;



class ECU_ENGINE {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint32_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case ENGINE_100_CUSTOMCAN_CAN_ID:
                    idx = 0;
                    break;
                case ENGINE_102_CUSTOMCAN_CAN_ID:
                    idx = 1;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to ENGINE_100
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENGINE_100(const uint32_t now, const uint32_t max_expire_time, ENGINE_100_CUSTOMCAN* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
        /** Sets data in pointer to ENGINE_102
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_ENGINE_102(const uint32_t now, const uint32_t max_expire_time, ENGINE_102_CUSTOMCAN* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[1] <= now && now - LAST_FRAME_TIMES[1] < max_expire_time) {
                dest->raw = FRAME_DATA[1];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[2];
		uint32_t LAST_FRAME_TIMES[2];
};
#endif // ECU_ENGINE_H

/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'GS51'
*/

#ifndef __ECU_GS51_H_
#define __ECU_GS51_H_

#include <stdint.h>
    
#define GS_218_EGS51_CAN_ID 0x0218

/** Target gear */
enum class GS_218h_GZC_EGS51 : uint16_t {
	G_N = 0, // Destination "N"
	G_D1 = 1, // Destination "1"
	G_D2 = 2, // Destination "2"
	G_D3 = 3, // Destination "3"
	G_D4 = 4, // Destination "4"
	G_D5 = 5, // Destination "5"
	G_R = 6, // Destination "R"
	G_R2 = 7, // Destination "R2"
	G_P = 8, // Destination "P"
	G_SNV = 15, // signal not available
};

/** actual gear */
enum class GS_218h_GIC_EGS51 : uint16_t {
	G_N = 0, // Destination "N"
	G_D1 = 1, // Destination "1"
	G_D2 = 2, // Destination "2"
	G_D3 = 3, // Destination "3"
	G_D4 = 4, // Destination "4"
	G_D5 = 5, // Destination "5"
	G_R = 6, // Destination "R"
	G_R2 = 7, // Destination "R2"
	G_P = 8, // Destination "P"
	G_SNV = 15, // signal not available
};



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING1__: 16;
		/** error number or counter for calid / CVN transmission **/
		uint8_t FEHLER: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint32_t __PADDING2__: 18;
		/** Kickdown pressed **/
		bool KICKDOWN: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING3__: 1;
		/** actual gear **/
		GS_218h_GIC_EGS51 GIC: 4;
		/** Target gear **/
		GS_218h_GZC_EGS51 GZC: 4;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING4__: 6;
		/** Enable torque request **/
		bool TORQUE_REQ_EN: 1;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		bool __PADDING5__: 1;
		/** Torque request value. 0xFE when inactive **/
		uint8_t TORQUE_REQ: 8;
	} __attribute__((packed));
	/** Gets CAN ID of GS_218_EGS51 **/
	uint32_t get_canid(){ return GS_218_EGS51_CAN_ID; }
} GS_218_EGS51;



class ECU_GS51 {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint64_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case GS_218_EGS51_CAN_ID:
                    idx = 0;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to GS_218
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_GS_218(uint64_t now, uint64_t max_expire_time, GS_218_EGS51* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[1];
		uint64_t LAST_FRAME_TIMES[1];
};
#endif // __ECU_GS51_H_
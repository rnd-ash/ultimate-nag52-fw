
/**
* AUTOGENERATED BY convert.py
* DO NOT EDIT THIS FILE!
*
* IF MODIFICATIONS NEED TO BE MADE, MODIFY can_data.txt!
*
* CAN Defintiion for ECU 'TESTER'
*/

#ifndef ECU_TESTER_H
#define ECU_TESTER_H

#include <stdint.h>
    
#define SOLENOID_CONTROL_EGS_SLAVE_CAN_ID 0x0501



typedef union {
	uint64_t raw;
	uint8_t bytes[8];
	struct {
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint16_t __PADDING1__: 16;
		/** TCC PWM request **/
		uint8_t TCC_REQ: 8;
		 /** BITFIELD PADDING. DO NOT CHANGE **/
		uint8_t __PADDING2__: 8;
		/** SPC Current request **/
		uint16_t SPC_REQ: 16;
		/** MPC Current request **/
		uint16_t MPC_REQ: 16;
	} __attribute__((packed));
	/** Gets CAN ID of SOLENOID_CONTROL_EGS_SLAVE **/
	uint32_t get_canid(){ return SOLENOID_CONTROL_EGS_SLAVE_CAN_ID; }
} SOLENOID_CONTROL_EGS_SLAVE;



class ECU_TESTER {
	public:
        /**
         * @brief Imports the CAN frame given the CAN ID, CAN Contents, and current timestamp
         *
         * Returns true if the frame was imported successfully, and false if import failed (Due to non-matching CAN ID).
         *
         * NOTE: The endianness of the value cannot be guaranteed. It is up to the caller to correct the byte order!
         */
        bool import_frames(uint64_t value, uint32_t can_id, uint32_t timestamp_now) {
            uint8_t idx = 0;
            bool add = true;
            switch(can_id) {
                case SOLENOID_CONTROL_EGS_SLAVE_CAN_ID:
                    idx = 0;
                    break;
                default:
                    add = false;
                    break;
            }
            if (add) {
                LAST_FRAME_TIMES[idx] = timestamp_now;
                FRAME_DATA[idx] = value;
            }
            return add;
        }
        
        /** Sets data in pointer to SOLENOID_CONTROL
          * 
          * If this function returns false, then the CAN Frame is invalid or has not been seen
          * on the CANBUS network yet. Meaning it's data cannot be used.
          *
          * If the function returns true, then the pointer to 'dest' has been updated with the new CAN data
          */
        bool get_SOLENOID_CONTROL(const uint32_t now, const uint32_t max_expire_time, SOLENOID_CONTROL_EGS_SLAVE* dest) const {
            bool ret = false;
            if (dest != nullptr && LAST_FRAME_TIMES[0] <= now && now - LAST_FRAME_TIMES[0] < max_expire_time) {
                dest->raw = FRAME_DATA[0];
                ret = true;
            }
            return ret;
        }
            
	private:
		uint64_t FRAME_DATA[1];
		uint32_t LAST_FRAME_TIMES[1];
};
#endif // ECU_TESTER_H